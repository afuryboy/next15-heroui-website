{
  "title": "Textarea",
  "description": "Textarea component is a multi-line Input which allows you to write large texts.",
  "body": {
    "raw": "\nimport {textareaContent} from \"@/content/components/textarea\";\n\n# Textarea\n\nTextarea component is a multi-line Input which allows you to write large texts.\n\n<ComponentLinks component=\"input\" storybook=\"textarea\" reactAriaHook=\"useTextField\" />\n\n---\n\n<CarbonAd/>\n\n## Installation\n\n<PackageManagers\n  showGlobalInstallWarning\n  commands={{\n    cli: \"npx heroui-cli@latest add input\",\n    npm: \"npm install @heroui/input\",\n    yarn: \"yarn add @heroui/input\",\n    pnpm: \"pnpm add @heroui/input\",\n    bun: \"bun add @heroui/input\",\n  }}\n/>\n\n## Import\n\n<ImportTabs\n  commands={{\n    main: 'import {Textarea} from \"@heroui/react\";',\n    individual: 'import {Textarea} from \"@heroui/input\";',\n  }}\n/>\n\n## Usage\n\n<CodeDemo title=\"Usage\" files={textareaContent.usage} />\n\n### Disabled\n\n<CodeDemo title=\"Disabled\" files={textareaContent.disabled} />\n\n### Read Only\n\n<CodeDemo title=\"Readonly\" files={textareaContent.readonly} />\n\n### Required\n\nIf you pass the `isRequired` property to the input, it will have a `danger` asterisk at\nthe end of the label and the textarea will be required.\n\n<CodeDemo title=\"Required\" files={textareaContent.required} />\n\n### Clear Button\n\nIf you pass the `isClearable` property to the textarea, it will have a clear button at the\nend of the textarea, it will be visible when the textarea has a value.\n\n<CodeDemo title=\"Clear Button\" files={textareaContent.clearButton} />\n\n### Autosize\n\nTextarea grows automatically based on the content, but you can also set a min and max height to\nit using the `minRows` and `maxRows` properties. It is based on [react-textarea-autosize](https://github.com/Andarist/react-textarea-autosize).\n\n<CodeDemo title=\"Autosize\" files={textareaContent.autosize} />\n\n### Without Autosize\n\nIn case you want to disable the autosize feature, you can use the `disableAutosize` property.\n\n<CodeDemo title=\"Without Autosize\" files={textareaContent.disableAutosize} />\n\n### Variants\n\n<CodeDemo title=\"Variants\" files={textareaContent.variants} />\n\n### With Error Message\n\nYou can combine the `isInvalid` and `errorMessage` properties to show an invalid textarea.\n\n<CodeDemo title=\"With Error Message\" files={textareaContent.errorMessage} />\n\n### Description\n\n<CodeDemo title=\"Description\" files={textareaContent.description} />\n\n### Controlled\n\nYou can use the `value` and `onValueChange` properties to control the input value.\n\n<CodeDemo title=\"Controlled\" files={textareaContent.controlled} />\n\n> **Note**: HeroUI `Textarea` also supports native events like `onChange`, useful for form libraries\n> such as [Formik](https://formik.org/) and [React Hook Form](https://react-hook-form.com/).\n\n\n## Slots\n\n- **base**: Input wrapper, it handles alignment, placement, and general appearance.\n- **label**: Label of the textarea, it is the one that is displayed above, inside or left of the textarea.\n- **inputWrapper**: Wraps the `label` (when it is inside) and the `innerWrapper`.\n- **input**: The textarea input element.\n- **description**: The description of the textarea.\n- **errorMessage**: The error message of the textarea.\n- **headerWrapper**: Wraps the `label` and the `clearButton`.\n\n<Spacer y={4} />\n\n## Data Attributes\n\n`Textarea` has the following attributes on the `base` element:\n\n- **data-invalid**:\n  When the textarea is invalid. Based on `isInvalid` prop.\n- **data-required**:\n  When the textarea is required. Based on `isRequired` prop.\n- **data-readonly**:\n  When the textarea is readonly. Based on `isReadOnly` prop.\n- **data-hover**:\n  When the textarea is being hovered. Based on [useHover](https://react-spectrum.adobe.com/react-aria/useHover.html)\n- **data-focus**:\n  When the textarea is being focused. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).\n- **data-focus-visible**:\n  When the textarea is being focused with the keyboard. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).\n- **data-disabled**:\n  When the textarea is disabled. Based on `isDisabled` prop.\n\n<Spacer y={4} />\n\n## Accessibility\n\n- Built with a native `<input>` element.\n- Visual and ARIA labeling support.\n- Change, clipboard, composition, selection, and input event support.\n- Required and invalid states exposed to assistive technology via ARIA.\n- Support for description and error message help text linked to the input via ARIA.\n\n<Spacer y={4} />\n\n## API\n\n### Textarea Props\n\n<APITable\n  data={[\n    {\n      attribute: \"children\",\n      type: \"ReactNode\",\n      description: \"The content of the textarea.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"minRows\",\n      type: \"number\",\n      description: \"The minimum number of rows to display.\",\n      default: \"3\"\n    },\n    {\n      attribute: \"maxRows\",\n      type: \"number\", \n      description: \"Maximum number of rows up to which the textarea can grow.\",\n      default: \"8\"\n    },\n    {\n      attribute: \"cacheMeasurements\",\n      type: \"boolean\",\n      description: \"Reuse previously computed measurements when computing height of textarea.\",\n      default: \"false\"\n    },\n    {\n      attribute: \"variant\",\n      type: \"flat | bordered | faded | underlined\",\n      description: \"The variant of the textarea.\",\n      default: \"flat\"\n    },\n    {\n      attribute: \"color\",\n      type: \"default | primary | secondary | success | warning | danger\",\n      description: \"The color of the textarea.\",\n      default: \"default\"\n    },\n    {\n      attribute: \"size\",\n      type: \"sm | md | lg\",\n      description: \"The size of the textarea.\",\n      default: \"md\"\n    },\n    {\n      attribute: \"radius\",\n      type: \"none | sm | md | lg | full\",\n      description: \"The radius of the textarea.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"label\",\n      type: \"ReactNode\",\n      description: \"The content to display as the label.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"value\",\n      type: \"string\",\n      description: \"The current value of the textarea (controlled).\",\n      default: \"-\"\n    },\n    {\n      attribute: \"defaultValue\",\n      type: \"string\",\n      description: \"The default value of the textarea (uncontrolled).\",\n      default: \"-\"\n    },\n    {\n      attribute: \"placeholder\",\n      type: \"string\",\n      description: \"The placeholder of the textarea.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"startContent\",\n      type: \"ReactNode\",\n      description: \"Element to be rendered in the left side of the input.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"endContent\",\n      type: \"ReactNode\",\n      description: \"Element to be rendered in the right side of the input.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"description\",\n      type: \"ReactNode\",\n      description: \"A description for the textarea. Provides a hint such as specific requirements for what to choose.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"errorMessage\",\n      type: \"ReactNode | ((v: ValidationResult) => ReactNode)\",\n      description: \"An error message for the textarea.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"validate\",\n      type: \"(value: string) => ValidationError | true | null | undefined\",\n      description: \"Validate input values when committing (e.g. on blur), returning error messages for invalid values.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"validationBehavior\",\n      type: \"native | aria\",\n      description: \"Whether to use native HTML form validation or ARIA validation. When wrapped in a Form component, the default is `aria`. Otherwise, the default is `native`.\",\n      default: \"native\"\n    },\n    {\n      attribute: \"labelPlacement\",\n      type: \"inside | outside | outside-left\",\n      description: \"The position of the label.\",\n      default: \"inside\"\n    },\n    {\n      attribute: \"fullWidth\",\n      type: \"boolean\",\n      description: \"Whether the textarea should take up the width of its parent.\",\n      default: \"true\"\n    },\n    {\n      attribute: \"isRequired\",\n      type: \"boolean\",\n      description: \"Whether user input is required on the textarea before form submission.\",\n      default: \"false\"\n    },\n    {\n      attribute: \"isReadOnly\",\n      type: \"boolean\",\n      description: \"Whether the textarea can be selected but not changed by the user.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"isDisabled\",\n      type: \"boolean\",\n      description: \"Whether the textarea is disabled.\",\n      default: \"false\"\n    },\n    {\n      attribute: \"isClearable\",\n      type: \"boolean\",\n      description: \"Whether the textarea should have a clear button.\",\n      default: \"false\"\n    },\n    {\n      attribute: \"isInvalid\",\n      type: \"boolean\",\n      description: \"Whether the textarea is invalid.\",\n      default: \"false\"\n    },\n    {\n      attribute: \"validationState\",\n      type: \"valid | invalid\",\n      description: \"Whether the textarea should display its \\\"valid\\\" or \\\"invalid\\\" visual styling. (Deprecated) use isInvalid instead.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"disableAutosize\",\n      type: \"boolean\",\n      description: \"Whether the textarea auto vertically resize should be disabled.\",\n      default: \"false\"\n    },\n    {\n      attribute: \"disableAnimation\",\n      type: \"boolean\",\n      description: \"Whether the textarea should be animated.\",\n      default: \"false\"\n    },\n    {\n      attribute: \"classNames\",\n      type: \"Partial<Record<\\\"base\\\" | \\\"label\\\" | \\\"inputWrapper\\\" | \\\"innerWrapper\\\" | \\\"input\\\" | \\\"description\\\" | \\\"errorMessage\\\", string>>\",\n      description: \"Allows to set custom class names for the checkbox slots.\",\n      default: \"-\"\n    }\n  ]}\n/>\n\n### Input Events\n\n<APITable\n  data={[\n    {\n      attribute: \"onChange\",\n      type: \"React.ChangeEvent<HTMLInputElement>\",\n      description: \"Handler that is called when the element's value changes. You can pull out the new value by accessing event.target.value (string).\",\n      default: \"-\"\n    },\n    {\n      attribute: \"onValueChange\",\n      type: \"(value: string) => void\",\n      description: \"Handler that is called when the element's value changes.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"onClear\",\n      type: \"() => void\",\n      description: \"Handler that is called when the clear button is clicked.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"onHeightChange\",\n      type: \"(height: number, meta: { rowHeight: number }) => void\",\n      description: \"Handler that is called when the height of the textarea changes.\",\n      default: \"-\"\n    }\n  ]}\n/>\n",
    "code": "var Component=(()=>{var F=Object.create;var d=Object.defineProperty;var U=Object.getOwnPropertyDescriptor;var _=Object.getOwnPropertyNames;var L=Object.getPrototypeOf,S=Object.prototype.hasOwnProperty;var O=(a,t)=>()=>(t||a((t={exports:{}}).exports,t),t.exports),Y=(a,t)=>{for(var i in t)d(a,i,{get:t[i],enumerable:!0})},h=(a,t,i,l)=>{if(t&&typeof t==\"object\"||typeof t==\"function\")for(let r of _(t))!S.call(a,r)&&r!==i&&d(a,r,{get:()=>t[r],enumerable:!(l=U(t,r))||l.enumerable});return a};var X=(a,t,i)=>(i=a!=null?F(L(a)):{},h(t||!a||!a.__esModule?d(i,\"default\",{value:a,enumerable:!0}):i,a)),G=a=>h(d({},\"__esModule\",{value:!0}),a);var f=O((ye,m)=>{m.exports=_jsx_runtime});var ge={};Y(ge,{default:()=>P,frontmatter:()=>xe});var e=X(f());var b=`import {Textarea} from \"@heroui/react\";\n\nexport default function App() {\n  return <Textarea className=\"max-w-xs\" label=\"Description\" placeholder=\"Enter your description\" />;\n}\n`;var K={\"/App.jsx\":b},x={...K};var g=`import {Textarea} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <Textarea\n      isDisabled\n      className=\"max-w-xs\"\n      defaultValue=\"HeroUI is a React UI library that provides a set of accessible, reusable, and beautiful components.\"\n      label=\"Description\"\n      labelPlacement=\"outside\"\n      placeholder=\"Enter your description\"\n    />\n  );\n}\n`;var Z={\"/App.jsx\":g},v={...Z};var y=`import {Textarea} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <Textarea\n      isRequired\n      className=\"max-w-xs\"\n      label=\"Description\"\n      labelPlacement=\"outside\"\n      placeholder=\"Enter your description\"\n    />\n  );\n}\n`;var ee={\"/App.jsx\":y},w={...ee};var A=`import {Textarea} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <Textarea\n      isReadOnly\n      className=\"max-w-xs\"\n      defaultValue=\"HeroUI is a React UI library that provides a set of accessible, reusable, and beautiful components.\"\n      label=\"Description\"\n      labelPlacement=\"outside\"\n      placeholder=\"Enter your description\"\n      variant=\"bordered\"\n    />\n  );\n}\n`;var ae={\"/App.jsx\":A},T={...ae};var R=`import {Textarea} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <div className=\"flex w-full flex-wrap md:flex-nowrap mb-6 md:mb-0 gap-4\">\n      <Textarea label=\"Description\" placeholder=\"Enter your description (Default autosize)\" />\n      <Textarea label=\"Description\" minRows={2} placeholder=\"Enter your description (Min rows 2)\" />\n      <Textarea label=\"Description\" maxRows={3} placeholder=\"Enter your description (Max rows 3)\" />\n    </div>\n  );\n}\n`;var ie={\"/App.jsx\":R},I={...ie};var W=`import {Textarea} from \"@heroui/react\";\n\nexport default function App() {\n  const variants = [\"flat\", \"faded\", \"bordered\", \"underlined\"];\n\n  return (\n    <div className=\"w-full grid grid-cols-12 gap-4\">\n      {variants.map((variant) => (\n        <Textarea\n          key={variant}\n          className=\"col-span-12 md:col-span-6 mb-6 md:mb-0\"\n          label=\"Description\"\n          labelPlacement=\"outside\"\n          placeholder=\"Enter your description\"\n          variant={variant}\n        />\n      ))}\n    </div>\n  );\n}\n`;var oe={\"/App.jsx\":W},C={...oe};var D=`import {Textarea} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <Textarea\n      className=\"max-w-xs\"\n      defaultValue=\"HeroUI is a React UI library with...\"\n      errorMessage=\"The description should be at least 255 characters long.\"\n      isInvalid={true}\n      label=\"Description\"\n      placeholder=\"Enter your description\"\n      variant=\"bordered\"\n    />\n  );\n}\n`;var se={\"/App.jsx\":D},E={...se};var k=`import {Textarea} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <Textarea\n      className=\"max-w-xs\"\n      description=\"Enter a concise description of your project.\"\n      label=\"Description\"\n      placeholder=\"Enter your description\"\n      variant=\"faded\"\n    />\n  );\n}\n`;var ce={\"/App.jsx\":k},N={...ce};var z=`import {Textarea} from \"@heroui/react\";\n\nexport default function App() {\n  const [value, setValue] = React.useState(\"\");\n\n  return (\n    <div className=\"w-full flex flex-col gap-2 max-w-[240px]\">\n      <Textarea\n        label=\"Description\"\n        labelPlacement=\"outside\"\n        placeholder=\"Enter your description\"\n        value={value}\n        variant=\"underlined\"\n        onValueChange={setValue}\n      />\n      <p className=\"text-default-500 text-small\">Textarea value: {value}</p>\n    </div>\n  );\n}\n`;var ue={\"/App.jsx\":z},M={...ue};var j=`import {Textarea} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <Textarea\n      disableAnimation\n      disableAutosize\n      classNames={{\n        base: \"max-w-xs\",\n        input: \"resize-y min-h-[40px]\",\n      }}\n      label=\"Description\"\n      placeholder=\"Enter your description\"\n      variant=\"bordered\"\n    />\n  );\n}\n`;var me={\"/App.jsx\":j},q={...me};var H=`import {Textarea} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <Textarea\n      isClearable\n      className=\"max-w-xs\"\n      defaultValue=\"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\"\n      label=\"Description\"\n      placeholder=\"Description\"\n      variant=\"bordered\"\n      // eslint-disable-next-line no-console\n      onClear={() => console.log(\"textarea cleared\")}\n    />\n  );\n}\n`;var be={\"/App.jsx\":H},V={...be};var n={usage:x,disabled:v,required:w,readonly:T,autosize:I,variants:C,errorMessage:E,description:N,controlled:M,disableAutosize:q,clearButton:V};var xe={title:\"Textarea\",description:\"Textarea component is a multi-line Input which allows you to write large texts.\"};function B(a){let t={a:\"a\",blockquote:\"blockquote\",code:\"code\",h1:\"h1\",h2:\"h2\",h3:\"h3\",hr:\"hr\",li:\"li\",p:\"p\",strong:\"strong\",ul:\"ul\",...a.components},{APITable:i,CarbonAd:l,CodeDemo:r,ComponentLinks:c,ImportTabs:p,PackageManagers:u,Spacer:s}=t;return i||o(\"APITable\",!0),l||o(\"CarbonAd\",!0),r||o(\"CodeDemo\",!0),c||o(\"ComponentLinks\",!0),p||o(\"ImportTabs\",!0),u||o(\"PackageManagers\",!0),s||o(\"Spacer\",!0),(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(t.h1,{id:\"textarea\",children:\"Textarea\"}),`\n`,(0,e.jsx)(t.p,{children:\"Textarea component is a multi-line Input which allows you to write large texts.\"}),`\n`,(0,e.jsx)(c,{component:\"input\",storybook:\"textarea\",reactAriaHook:\"useTextField\"}),`\n`,(0,e.jsx)(t.hr,{}),`\n`,(0,e.jsx)(l,{}),`\n`,(0,e.jsx)(t.h2,{id:\"installation\",children:\"Installation\"}),`\n`,(0,e.jsx)(u,{showGlobalInstallWarning:!0,commands:{cli:\"npx heroui-cli@latest add input\",npm:\"npm install @heroui/input\",yarn:\"yarn add @heroui/input\",pnpm:\"pnpm add @heroui/input\",bun:\"bun add @heroui/input\"}}),`\n`,(0,e.jsx)(t.h2,{id:\"import\",children:\"Import\"}),`\n`,(0,e.jsx)(p,{commands:{main:'import {Textarea} from \"@heroui/react\";',individual:'import {Textarea} from \"@heroui/input\";'}}),`\n`,(0,e.jsx)(t.h2,{id:\"usage\",children:\"Usage\"}),`\n`,(0,e.jsx)(r,{title:\"Usage\",files:n.usage}),`\n`,(0,e.jsx)(t.h3,{id:\"disabled\",children:\"Disabled\"}),`\n`,(0,e.jsx)(r,{title:\"Disabled\",files:n.disabled}),`\n`,(0,e.jsx)(t.h3,{id:\"read-only\",children:\"Read Only\"}),`\n`,(0,e.jsx)(r,{title:\"Readonly\",files:n.readonly}),`\n`,(0,e.jsx)(t.h3,{id:\"required\",children:\"Required\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"If you pass the \",(0,e.jsx)(t.code,{children:\"isRequired\"}),\" property to the input, it will have a \",(0,e.jsx)(t.code,{children:\"danger\"}),` asterisk at\nthe end of the label and the textarea will be required.`]}),`\n`,(0,e.jsx)(r,{title:\"Required\",files:n.required}),`\n`,(0,e.jsx)(t.h3,{id:\"clear-button\",children:\"Clear Button\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"If you pass the \",(0,e.jsx)(t.code,{children:\"isClearable\"}),` property to the textarea, it will have a clear button at the\nend of the textarea, it will be visible when the textarea has a value.`]}),`\n`,(0,e.jsx)(r,{title:\"Clear Button\",files:n.clearButton}),`\n`,(0,e.jsx)(t.h3,{id:\"autosize\",children:\"Autosize\"}),`\n`,(0,e.jsxs)(t.p,{children:[`Textarea grows automatically based on the content, but you can also set a min and max height to\nit using the `,(0,e.jsx)(t.code,{children:\"minRows\"}),\" and \",(0,e.jsx)(t.code,{children:\"maxRows\"}),\" properties. It is based on \",(0,e.jsx)(t.a,{href:\"https://github.com/Andarist/react-textarea-autosize\",children:\"react-textarea-autosize\"}),\".\"]}),`\n`,(0,e.jsx)(r,{title:\"Autosize\",files:n.autosize}),`\n`,(0,e.jsx)(t.h3,{id:\"without-autosize\",children:\"Without Autosize\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"In case you want to disable the autosize feature, you can use the \",(0,e.jsx)(t.code,{children:\"disableAutosize\"}),\" property.\"]}),`\n`,(0,e.jsx)(r,{title:\"Without Autosize\",files:n.disableAutosize}),`\n`,(0,e.jsx)(t.h3,{id:\"variants\",children:\"Variants\"}),`\n`,(0,e.jsx)(r,{title:\"Variants\",files:n.variants}),`\n`,(0,e.jsx)(t.h3,{id:\"with-error-message\",children:\"With Error Message\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"You can combine the \",(0,e.jsx)(t.code,{children:\"isInvalid\"}),\" and \",(0,e.jsx)(t.code,{children:\"errorMessage\"}),\" properties to show an invalid textarea.\"]}),`\n`,(0,e.jsx)(r,{title:\"With Error Message\",files:n.errorMessage}),`\n`,(0,e.jsx)(t.h3,{id:\"description\",children:\"Description\"}),`\n`,(0,e.jsx)(r,{title:\"Description\",files:n.description}),`\n`,(0,e.jsx)(t.h3,{id:\"controlled\",children:\"Controlled\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"You can use the \",(0,e.jsx)(t.code,{children:\"value\"}),\" and \",(0,e.jsx)(t.code,{children:\"onValueChange\"}),\" properties to control the input value.\"]}),`\n`,(0,e.jsx)(r,{title:\"Controlled\",files:n.controlled}),`\n`,(0,e.jsxs)(t.blockquote,{children:[`\n`,(0,e.jsxs)(t.p,{children:[(0,e.jsx)(t.strong,{children:\"Note\"}),\": HeroUI \",(0,e.jsx)(t.code,{children:\"Textarea\"}),\" also supports native events like \",(0,e.jsx)(t.code,{children:\"onChange\"}),`, useful for form libraries\nsuch as `,(0,e.jsx)(t.a,{href:\"https://formik.org/\",children:\"Formik\"}),\" and \",(0,e.jsx)(t.a,{href:\"https://react-hook-form.com/\",children:\"React Hook Form\"}),\".\"]}),`\n`]}),`\n`,(0,e.jsx)(t.h2,{id:\"slots\",children:\"Slots\"}),`\n`,(0,e.jsxs)(t.ul,{children:[`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"base\"}),\": Input wrapper, it handles alignment, placement, and general appearance.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"label\"}),\": Label of the textarea, it is the one that is displayed above, inside or left of the textarea.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"inputWrapper\"}),\": Wraps the \",(0,e.jsx)(t.code,{children:\"label\"}),\" (when it is inside) and the \",(0,e.jsx)(t.code,{children:\"innerWrapper\"}),\".\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"input\"}),\": The textarea input element.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"description\"}),\": The description of the textarea.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"errorMessage\"}),\": The error message of the textarea.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"headerWrapper\"}),\": Wraps the \",(0,e.jsx)(t.code,{children:\"label\"}),\" and the \",(0,e.jsx)(t.code,{children:\"clearButton\"}),\".\"]}),`\n`]}),`\n`,(0,e.jsx)(s,{y:4}),`\n`,(0,e.jsx)(t.h2,{id:\"data-attributes\",children:\"Data Attributes\"}),`\n`,(0,e.jsxs)(t.p,{children:[(0,e.jsx)(t.code,{children:\"Textarea\"}),\" has the following attributes on the \",(0,e.jsx)(t.code,{children:\"base\"}),\" element:\"]}),`\n`,(0,e.jsxs)(t.ul,{children:[`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-invalid\"}),`:\nWhen the textarea is invalid. Based on `,(0,e.jsx)(t.code,{children:\"isInvalid\"}),\" prop.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-required\"}),`:\nWhen the textarea is required. Based on `,(0,e.jsx)(t.code,{children:\"isRequired\"}),\" prop.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-readonly\"}),`:\nWhen the textarea is readonly. Based on `,(0,e.jsx)(t.code,{children:\"isReadOnly\"}),\" prop.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-hover\"}),`:\nWhen the textarea is being hovered. Based on `,(0,e.jsx)(t.a,{href:\"https://react-spectrum.adobe.com/react-aria/useHover.html\",children:\"useHover\"})]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-focus\"}),`:\nWhen the textarea is being focused. Based on `,(0,e.jsx)(t.a,{href:\"https://react-spectrum.adobe.com/react-aria/useFocusRing.html\",children:\"useFocusRing\"}),\".\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-focus-visible\"}),`:\nWhen the textarea is being focused with the keyboard. Based on `,(0,e.jsx)(t.a,{href:\"https://react-spectrum.adobe.com/react-aria/useFocusRing.html\",children:\"useFocusRing\"}),\".\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-disabled\"}),`:\nWhen the textarea is disabled. Based on `,(0,e.jsx)(t.code,{children:\"isDisabled\"}),\" prop.\"]}),`\n`]}),`\n`,(0,e.jsx)(s,{y:4}),`\n`,(0,e.jsx)(t.h2,{id:\"accessibility\",children:\"Accessibility\"}),`\n`,(0,e.jsxs)(t.ul,{children:[`\n`,(0,e.jsxs)(t.li,{children:[\"Built with a native \",(0,e.jsx)(t.code,{children:\"<input>\"}),\" element.\"]}),`\n`,(0,e.jsx)(t.li,{children:\"Visual and ARIA labeling support.\"}),`\n`,(0,e.jsx)(t.li,{children:\"Change, clipboard, composition, selection, and input event support.\"}),`\n`,(0,e.jsx)(t.li,{children:\"Required and invalid states exposed to assistive technology via ARIA.\"}),`\n`,(0,e.jsx)(t.li,{children:\"Support for description and error message help text linked to the input via ARIA.\"}),`\n`]}),`\n`,(0,e.jsx)(s,{y:4}),`\n`,(0,e.jsx)(t.h2,{id:\"api\",children:\"API\"}),`\n`,(0,e.jsx)(t.h3,{id:\"textarea-props\",children:\"Textarea Props\"}),`\n`,(0,e.jsx)(i,{data:[{attribute:\"children\",type:\"ReactNode\",description:\"The content of the textarea.\",default:\"-\"},{attribute:\"minRows\",type:\"number\",description:\"The minimum number of rows to display.\",default:\"3\"},{attribute:\"maxRows\",type:\"number\",description:\"Maximum number of rows up to which the textarea can grow.\",default:\"8\"},{attribute:\"cacheMeasurements\",type:\"boolean\",description:\"Reuse previously computed measurements when computing height of textarea.\",default:\"false\"},{attribute:\"variant\",type:\"flat | bordered | faded | underlined\",description:\"The variant of the textarea.\",default:\"flat\"},{attribute:\"color\",type:\"default | primary | secondary | success | warning | danger\",description:\"The color of the textarea.\",default:\"default\"},{attribute:\"size\",type:\"sm | md | lg\",description:\"The size of the textarea.\",default:\"md\"},{attribute:\"radius\",type:\"none | sm | md | lg | full\",description:\"The radius of the textarea.\",default:\"-\"},{attribute:\"label\",type:\"ReactNode\",description:\"The content to display as the label.\",default:\"-\"},{attribute:\"value\",type:\"string\",description:\"The current value of the textarea (controlled).\",default:\"-\"},{attribute:\"defaultValue\",type:\"string\",description:\"The default value of the textarea (uncontrolled).\",default:\"-\"},{attribute:\"placeholder\",type:\"string\",description:\"The placeholder of the textarea.\",default:\"-\"},{attribute:\"startContent\",type:\"ReactNode\",description:\"Element to be rendered in the left side of the input.\",default:\"-\"},{attribute:\"endContent\",type:\"ReactNode\",description:\"Element to be rendered in the right side of the input.\",default:\"-\"},{attribute:\"description\",type:\"ReactNode\",description:\"A description for the textarea. Provides a hint such as specific requirements for what to choose.\",default:\"-\"},{attribute:\"errorMessage\",type:\"ReactNode | ((v: ValidationResult) => ReactNode)\",description:\"An error message for the textarea.\",default:\"-\"},{attribute:\"validate\",type:\"(value: string) => ValidationError | true | null | undefined\",description:\"Validate input values when committing (e.g. on blur), returning error messages for invalid values.\",default:\"-\"},{attribute:\"validationBehavior\",type:\"native | aria\",description:\"Whether to use native HTML form validation or ARIA validation. When wrapped in a Form component, the default is `aria`. Otherwise, the default is `native`.\",default:\"native\"},{attribute:\"labelPlacement\",type:\"inside | outside | outside-left\",description:\"The position of the label.\",default:\"inside\"},{attribute:\"fullWidth\",type:\"boolean\",description:\"Whether the textarea should take up the width of its parent.\",default:\"true\"},{attribute:\"isRequired\",type:\"boolean\",description:\"Whether user input is required on the textarea before form submission.\",default:\"false\"},{attribute:\"isReadOnly\",type:\"boolean\",description:\"Whether the textarea can be selected but not changed by the user.\",default:\"-\"},{attribute:\"isDisabled\",type:\"boolean\",description:\"Whether the textarea is disabled.\",default:\"false\"},{attribute:\"isClearable\",type:\"boolean\",description:\"Whether the textarea should have a clear button.\",default:\"false\"},{attribute:\"isInvalid\",type:\"boolean\",description:\"Whether the textarea is invalid.\",default:\"false\"},{attribute:\"validationState\",type:\"valid | invalid\",description:'Whether the textarea should display its \"valid\" or \"invalid\" visual styling. (Deprecated) use isInvalid instead.',default:\"-\"},{attribute:\"disableAutosize\",type:\"boolean\",description:\"Whether the textarea auto vertically resize should be disabled.\",default:\"false\"},{attribute:\"disableAnimation\",type:\"boolean\",description:\"Whether the textarea should be animated.\",default:\"false\"},{attribute:\"classNames\",type:'Partial<Record<\"base\" | \"label\" | \"inputWrapper\" | \"innerWrapper\" | \"input\" | \"description\" | \"errorMessage\", string>>',description:\"Allows to set custom class names for the checkbox slots.\",default:\"-\"}]}),`\n`,(0,e.jsx)(t.h3,{id:\"input-events\",children:\"Input Events\"}),`\n`,(0,e.jsx)(i,{data:[{attribute:\"onChange\",type:\"React.ChangeEvent<HTMLInputElement>\",description:\"Handler that is called when the element's value changes. You can pull out the new value by accessing event.target.value (string).\",default:\"-\"},{attribute:\"onValueChange\",type:\"(value: string) => void\",description:\"Handler that is called when the element's value changes.\",default:\"-\"},{attribute:\"onClear\",type:\"() => void\",description:\"Handler that is called when the clear button is clicked.\",default:\"-\"},{attribute:\"onHeightChange\",type:\"(height: number, meta: { rowHeight: number }) => void\",description:\"Handler that is called when the height of the textarea changes.\",default:\"-\"}]})]})}function P(a={}){let{wrapper:t}=a.components||{};return t?(0,e.jsx)(t,{...a,children:(0,e.jsx)(B,{...a})}):B(a)}function o(a,t){throw new Error(\"Expected \"+(t?\"component\":\"object\")+\" `\"+a+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return G(ge);})();\n;return Component;"
  },
  "_id": "docs/components/textarea.mdx",
  "_raw": {
    "sourceFilePath": "docs/components/textarea.mdx",
    "sourceFileName": "textarea.mdx",
    "sourceFileDir": "docs/components",
    "contentType": "mdx",
    "flattenedPath": "docs/components/textarea"
  },
  "type": "Doc",
  "slug": "/docs/components/textarea",
  "slugAsParams": "components/textarea",
  "url": "/docs/components/textarea"
}