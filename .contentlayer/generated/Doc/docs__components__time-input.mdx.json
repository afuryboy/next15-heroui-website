{
  "title": "Time Input",
  "description": "A time input allows users to enter and edit time values using a keyboard. Each part of a time value is displayed in an individually editable segment.",
  "body": {
    "raw": "\nimport {timeInputContent} from \"@/content/components/time-input\";\n\n# Time Input\n\nThe `TimeInput` component consists of a label, and a group of segments representing each unit of a time (e.g. hours, minutes, and seconds). Each segment is individually focusable and editable by the user, by typing or using the arrow keys to increment and decrement the value. This approach allows values to be formatted and parsed correctly regardless of the locale or time format, and offers an easy and error-free way to edit times using the keyboard.\n\n<ComponentLinks component=\"date-input\" storybook=\"timeinput\" reactAriaHook=\"useTimeField\" />\n\n---\n\n<CarbonAd/>\n\n## Installation\n\n<PackageManagers\n  showGlobalInstallWarning\n  commands={{\n    cli: \"npx heroui-cli@latest add date-input\",\n    npm: \"npm install @heroui/date-input\",\n    yarn: \"yarn add @heroui/date-input\",\n    pnpm: \"pnpm add @heroui/date-input\",\n    bun: \"bun add @heroui/date-input\"\n  }}\n/>\n\n\n## Import\n\n<ImportTabs\n  commands={{\n    main: 'import {TimeInput} from \"@heroui/react\";',\n    individual: 'import {TimeInput} from \"@heroui/date-input\";',\n  }}\n/>\n\n## Usage\n\nA `TimeInput` displays a placeholder by default. An initial, uncontrolled value can be provided to the TimeField using the defaultValue prop. Alternatively, a controlled value can be provided using the value prop.\n\nTime values are provided using objects in the `@internationalized/date` package. This library handles correct international date and time manipulation across calendars, time zones, and other localization concerns.\n\n`TimeInput` only supports selecting times, but values with date components are also accepted. By default, `TimeInput` will emit `Time` objects in the onChange event, but if a `CalendarDateTime` or `ZonedDateTime` object is passed as the `value` or `defaultValue`, values of that type will be emitted, changing only the time and preserving the date components.\n\n<CodeDemo title=\"Usage\" files={timeInputContent.usage} />\n\n### Required\n\n`TimeInput` supports the `isRequired` prop to ensure the user enters a value, as well as minimum and maximum values, and custom client and server-side validation.\n\n<CodeDemo title=\"Required\" files={timeInputContent.required} />\n\n### Disabled\n\nThe `isDisabled` boolean prop makes `TimeInput` disabled. Inputs cannot be focused or selected.\n\n<CodeDemo title=\"Disabled\" files={timeInputContent.disabled} />\n\n### Read Only\n\nThe `isReadOnly` boolean prop makes `TimeInput`'s value immutable. Unlike `isDisabled`, `TimeInput` remains focusable.\n\n<CodeDemo title=\"Readonly\" files={timeInputContent.readonly} />\n\n### Without Label\n\n`TimeInput` supports the `label` prop to show or not show the label.\n\n<CodeDemo title=\"Without Label\" files={timeInputContent.withoutLabel} />\n\n### With Description\n\nA description for the field. Provides a hint such as specific requirements for what to choose.\n\n<CodeDemo title=\"With Description\" files={timeInputContent.withDescription} />\n\n### With Error Message\n\nYou can combine the `isInvalid` and `errorMessage` properties to show an invalid input.\n\n<CodeDemo title=\"With Error Message\" files={timeInputContent.errorMessage} />\n\nYou can also pass an error message as a function. This allows for dynamic error message handling based on the [ValidationResult](https://github.com/adobe/react-spectrum/blob/1cacbf1d438675feb3859fee54b17e620b458d9c/packages/%40react-types/shared/src/inputs.d.ts#L44-L51).\n\n<CodeDemo title=\"With Error Message Function\" files={timeInputContent.errorMessageFunction} />\n\n\n### Label Placement\n\nThe label's overall position relative to the element it is labeling.\n\n<CodeDemo title=\"Label Placement\" files={timeInputContent.labelPlacement} />\n\n### Start Content\n\nIf you want to display some content before the time inputs, you can set the `startContent` property.\n\n<CodeDemo title=\"Start Content\" files={timeInputContent.startContent} />\n\n### End Content\n\nIf you want to display some content after the time inputs, you can set the `endContent` property.\n\n<CodeDemo title=\"End Content\" files={timeInputContent.endContent} />\n\n### Controlled\n\nAn initial, uncontrolled value can be provided to the `TimeInput` using the `defaultValue` prop. A controlled value can be provided using the `value` prop.\n\n<CodeDemo title=\"Controlled\" files={timeInputContent.controlled} />\n\n### Time Zones\n\n`TimeInput` is time zone aware when a `ZonedDateTime` object is provided as the value. In this case, the time zone abbreviation is displayed, and time zone concerns such as daylight saving time are taken into account when the value is manipulated.\n\nIn most cases, your data will come from and be sent to a server as an [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) formatted string. [@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/) includes functions for parsing strings in multiple formats into ZonedDateTime objects. Which format you use will depend on what information you need to store.\n\n- `parseZonedDateTime` – This function parses a date with an explicit time zone and optional UTC offset attached (e.g. `2021-11-07T00:45[America/Los_Angeles]` or `2021-11-07T00:45-07:00[America/Los_Angeles]`). This format preserves the maximum amount of information. If the exact local time and time zone that a user selected is important, use this format. Storing the time zone and offset that was selected rather than converting to UTC ensures that the local time is correct regardless of daylight saving rule changes (e.g. if a locale abolishes DST). Examples where this applies include calendar events, reminders, and other times that occur in a particular location.\n- `parseAbsolute` – This function parses an absolute date and time that occurs at the same instant at all locations on Earth. It can be represented in UTC (e.g. `2021-11-07T07:45:00Z`), or stored with a particular offset (e.g. `2021-11-07T07:45:00-07:00`). A time zone identifier, e.g. America/Los_Angeles, must be passed, and the result will be converted into that time zone. Absolute times are the best way to represent events that occurred in the past, or future events where an exact time is needed, regardless of time zone.\n- `parseAbsoluteToLocal` – This function parses an absolute date and time into the current user's local time zone. It is a shortcut for parseAbsolute, and accepts the same formats.\n\n<CodeDemo title=\"Time Zones\" files={timeInputContent.timezones} />\n\n### Granularity\n\nThe `granularity` prop allows you to control the smallest unit that is displayed by TimeInput. By default, times are displayed with \"minute\" granularity. More granular time values can be displayed by setting the granularity prop to \"second\".\n\n<CodeDemo title=\"Granularity\" files={timeInputContent.granularity} />\n\n### Min Time Value\n\nThe `minValue` prop allows you to validate time value before a certain time.\n\n<CodeDemo title=\"Min Time Value\" files={timeInputContent.minTimeValue} />\n\n### Max Time Value\n\nThe `maxValue` prop allows you to validate time value before a certain time.\n\n<CodeDemo title=\"Max Time Value\" files={timeInputContent.maxTimeValue} />\n\n### Placeholder Value\n\nWhen no value is set, a placeholder is shown. The format of the placeholder is influenced by the `granularity` and `placeholderValue` props. placeholderValue also controls the default values of each segment when the user first interacts with them, e.g. using the up and down arrow keys. By default, the placeholderValue is midnight, but you can set it to a more appropriate value if needed.\n\n<CodeDemo title=\"Placeholder Value\" files={timeInputContent.placeholderValue} />\n\n### Hide Time Zone\n\nWhen a `ZonedDateTime` object is provided as the value to `TimeInput`, the time zone abbreviation is displayed by default. However, if this is displayed elsewhere or implicit based on the usecase, it can be hidden using the `hideTimeZone` option.\n\n<CodeDemo title=\"Hide Time Zone\" files={timeInputContent.hideTimeZone} />\n\n### Hour Cycle\n\nBy default, `TimeInput` displays times in either 12 or 24 hour hour format depending on the user's locale. However, this can be overridden using the `hourCycle` prop if needed for a specific usecase. This example forces `TimeInput` to use 24-hour time, regardless of the locale.\n\n<CodeDemo title=\"Hour Cycle\" files={timeInputContent.hourCycle} />\n\n## Slots\n\n- **base**: Input wrapper, it handles alignment, placement, and general appearance.\n- **label**: Label of the time input, it is the one that is displayed above, inside or left of the time input.\n- **inputWrapper**: Wraps the `label` (when it is inside) and the `innerWrapper`.\n- **input**: The time input element.\n- **innerWrapper**: Wraps the segments, the `startContent` and the `endContent`.\n- **segment**: The segment of input elements.\n- **helperWrapper**: The wrapper of the helper text. This wraps the helper text and the error message.\n- **description**: The description of the time input.\n- **errorMessage**: The error message of the time input.\n\n<Spacer y={4} />\n\n## Data Attributes\n\n`TimeInput` has the following attributes on the `base` element:\n\n- **data-has-helper**:\n  When the time input has description or error message. Based on `description` or `errorMessage` props.\n- **data-required**:\n  When the time input is required. Based on `isRequired` prop.\n- **data-disabled**:\n  When the time input is disabled. Based on `isDisabled` prop.\n- **data-readonly**:\n  When the time input is readonly. Based on `isReadOnly` prop.\n- **data-invalid**:\n  When the time input is invalid. Based on `isInvalid` prop.\n- **data-has-start-content**:\n  When the time input has start content. Based on `startContent` prop.\n- **data-has-end-content**:\n  When the time input has end content. Based on `endContent` prop.\n\n<Spacer y={4} />\n\n## Accessibility\n\n- Support for locale-specific formatting, number systems, hour cycles, and right-to-left layout.\n- Times can optionally include a time zone. All modifications follow time zone rules such as daylight saving time.\n- Each time unit is displayed as an individually focusable and editable segment, which allows users an easy way to edit times using the keyboard, in any format and locale.\n- Time segments are editable using an easy to use numeric keypad, and all interactions are accessible using touch-based screen readers.\n\n<Spacer y={4} />\n\n## API\n\n### TimeInput Props\n\n<APITable\n  data={[\n    {\n      attribute: \"label\",\n      type: \"ReactNode\",\n      description: \"The content to display as the label.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"name\",\n      type: \"string\",\n      description: \"The name of the time input element, used when submitting an HTML form.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"value\",\n      type: \"TimeValue | null\",\n      description: \"The current value (controlled).\",\n      default: \"-\"\n    },\n    {\n      attribute: \"defaultValue\",\n      type: \"TimeValue | null\",\n      description: \"The default value (uncontrolled).\",\n      default: \"-\"\n    },\n    {\n      attribute: \"variant\",\n      type: \"flat | bordered | faded | underlined\",\n      description: \"The variant of the time input.\",\n      default: \"flat\"\n    },\n    {\n      attribute: \"color\",\n      type: \"default | primary | secondary | success | warning | danger\",\n      description: \"The color of the time input.\",\n      default: \"default\"\n    },\n    {\n      attribute: \"size\",\n      type: \"sm | md | lg\",\n      description: \"The size of the time input.\",\n      default: \"md\"\n    },\n    {\n      attribute: \"radius\",\n      type: \"none | sm | md | lg | full\",\n      description: \"The radius of the time input.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"hourCycle\",\n      type: \"12 | 24\",\n      description: \"Whether to display the time in 12 or 24 hour format. By default, this is determined by the user's locale.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"granularity\",\n      type: \"hour | minute | second\",\n      description: \"Determines the smallest unit that is displayed in the time picker.\",\n      default: \"minute\"\n    },\n    {\n      attribute: \"hideTimeZone\",\n      type: \"boolean\",\n      description: \"Whether to hide the time zone abbreviation.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"labelPlacement\",\n      type: \"inside | outside | outside-left\",\n      description: \"The position of the label.\",\n      default: \"inside\"\n    },\n    {\n      attribute: \"shouldForceLeadingZeros\",\n      type: \"boolean\",\n      description: \"Whether to always show leading zeros in the hour field. By default, this is determined by the user's locale.\",\n      default: \"true\"\n    },\n    {\n      attribute: \"placeholderValue\",\n      type: \"TimeValue\",\n      description: \"A placeholder time that influences the format of the placeholder shown when no value is selected.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"minValue\",\n      type: \"TimeValue\",\n      description: \"The minimum allowed time that a user may select.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"maxValue\",\n      type: \"TimeValue\",\n      description: \"The maximum allowed time that a user may select.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"isDisabled\",\n      type: \"boolean\",\n      description: \"Whether the time input is disabled.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"isReadOnly\",\n      type: \"boolean\",\n      description: \"Whether the time input can be selected but not changed by the user.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"isRequired\",\n      type: \"boolean\",\n      description: \"Whether user time input is required on the time input before form submission.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"isInvalid\",\n      type: \"boolean\",\n      description: \"Whether the time input is invalid.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"autoFocus\",\n      type: \"boolean\",\n      description: \"Whether the element should receive focus on render.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"description\",\n      type: \"ReactNode\",\n      description: \"A description for the field. Provides a hint such as specific requirements for what to choose.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"errorMessage\",\n      type: \"ReactNode | (v: ValidationResult) => ReactNode\",\n      description: \"An error message for the field.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"validate\",\n      type: \"(value: MappedTimeValue<TimeValue>) => ValidationError | true | null | undefined\",\n      description: \"Validate input values when committing (e.g. on blur), returning error messages for invalid values.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"validationBehavior\",\n      type: \"native | aria\",\n      description: \"Whether to use native HTML form validation or ARIA validation. When wrapped in a Form component, the default is `aria`. Otherwise, the default is `native`.\",\n      default: \"native\"\n    },\n    {\n      attribute: \"disableAnimation\",\n      type: \"boolean\",\n      description: \"Whether to disable the animation of the time input.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"classNames\",\n      type: \"Partial<Record<\\\"base\\\" | \\\"label\\\" | \\\"inputWrapper\\\" | \\\"innerWrapper\\\" | \\\"segment\\\" | \\\"helperWrapper\\\" | \\\"input\\\" | \\\"description\\\" | \\\"errorMessage\\\", string>>\",\n      description: \"Allows to set custom class names for the time input slots.\",\n      default: \"-\"\n    }\n  ]}\n/>\n\n### TimeInput Events\n\n<APITable\n  data={[\n    {\n      attribute: \"onFocus\",\n      type: \"(e: FocusEvent<Target>) => void\",\n      description: \"Handler that is called when the element receives focus.\"\n    },\n    {\n      attribute: \"onBlur\",\n      type: \"(e: FocusEvent<Target>) => void\",\n      description: \"Handler that is called when the element loses focus.\"\n    },\n    {\n      attribute: \"onFocusChange\",\n      type: \"(isFocused: boolean) => void\",\n      description: \"Handler that is called when the element's focus status changes.\"\n    },\n    {\n      attribute: \"onKeyDown\",\n      type: \"(e: KeyboardEvent) => void\",\n      description: \"Handler that is called when a key is pressed.\"\n    },\n    {\n      attribute: \"onKeyUp\",\n      type: \"(e: KeyboardEvent) => void\",\n      description: \"Handler that is called when a key is released.\"\n    },\n    {\n      attribute: \"onChange\",\n      type: \"(value: MappedTimeValue<TimeValue>) => void\",\n      description: \"Handler that is called when the value changes.\"\n    }\n  ]}\n/>\n",
    "code": "var Component=(()=>{var ae=Object.create;var s=Object.defineProperty;var re=Object.getOwnPropertyDescriptor;var oe=Object.getOwnPropertyNames;var le=Object.getPrototypeOf,de=Object.prototype.hasOwnProperty;var se=(n,t)=>()=>(t||n((t={exports:{}}).exports,t),t.exports),ue=(n,t)=>{for(var r in t)s(n,r,{get:t[r],enumerable:!0})},m=(n,t,r,l)=>{if(t&&typeof t==\"object\"||typeof t==\"function\")for(let i of oe(t))!de.call(n,i)&&i!==r&&s(n,i,{get:()=>t[i],enumerable:!(l=re(t,i))||l.enumerable});return n};var pe=(n,t,r)=>(r=n!=null?ae(le(n)):{},m(t||!n||!n.__esModule?s(r,\"default\",{value:n,enumerable:!0}):r,n)),ce=n=>m(s({},\"__esModule\",{value:!0}),n);var f=se((at,h)=>{h.exports=_jsx_runtime});var it={};ue(it,{default:()=>ne,frontmatter:()=>tt});var e=pe(f());var T=`import {TimeInput} from \"@heroui/react\";\nimport {Time} from \"@internationalized/date\";\n\nexport default function App() {\n  return (\n    <div className=\"flex flex-wrap gap-4\">\n      <TimeInput label=\"Event Time\" />\n      <TimeInput defaultValue={new Time(11, 45)} label=\"Event Time\" />\n    </div>\n  );\n}\n`;var he={\"/App.jsx\":T},b={...he};var g=`import {TimeInput} from \"@heroui/react\";\n\nexport default function App() {\n  return <TimeInput isRequired label=\"Event Time\" />;\n}\n`;var Te={\"/App.jsx\":g},v={...Te};var y=`import {TimeInput} from \"@heroui/react\";\nimport {Time} from \"@internationalized/date\";\n\nexport default function App() {\n  return <TimeInput isDisabled defaultValue={new Time(11, 45)} label=\"Event Time\" />;\n}\n`;var ge={\"/App.jsx\":y},x={...ge};var w=`import {TimeInput} from \"@heroui/react\";\nimport {Time} from \"@internationalized/date\";\n\nexport default function App() {\n  return <TimeInput isReadOnly defaultValue={new Time(11, 45)} label=\"Event Time\" />;\n}\n`;var ye={\"/App.jsx\":w},A={...ye};var I=`import {TimeInput} from \"@heroui/react\";\nimport {Time} from \"@internationalized/date\";\n\nexport default function App() {\n  return <TimeInput defaultValue={new Time(11, 45)} label={null} />;\n}\n`;var we={\"/App.jsx\":I},V={...we};var C=`import {TimeInput} from \"@heroui/react\";\n\nexport default function App() {\n  return <TimeInput description=\"Please enter your meeting time\" label=\"Event Time\" />;\n}\n`;var Ie={\"/App.jsx\":C},D={...Ie};var z=`import {TimeInput} from \"@heroui/react\";\n\nexport default function App() {\n  return <TimeInput isInvalid errorMessage=\"Please enter a valid time\" label=\"Event Time\" />;\n}\n`;var Ce={\"/App.jsx\":z},L={...Ce};var W=`import {TimeInput} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <TimeInput\n      isInvalid\n      errorMessage={(value) => {\n        if (value.isInvalid) {\n          return \"Please enter a valid time\";\n        }\n      }}\n      label=\"Event Time\"\n    />\n  );\n}\n`;var ze={\"/App.jsx\":W},k={...ze};var M=`import {TimeInput} from \"@heroui/react\";\nimport {Time} from \"@internationalized/date\";\n\nexport default function App() {\n  return (\n    <div className=\"w-full max-w-xl flex flex-col items-end gap-4\">\n      <TimeInput\n        defaultValue={new Time(11, 45)}\n        description=\"inside\"\n        label=\"Event Time\"\n        labelPlacement=\"inside\"\n      />\n      <TimeInput\n        defaultValue={new Time(11, 45)}\n        description=\"outside\"\n        label=\"Event Time\"\n        labelPlacement=\"outside\"\n      />\n      <TimeInput\n        defaultValue={new Time(11, 45)}\n        description=\"outside-left\"\n        label=\"Event Time\"\n        labelPlacement=\"outside-left\"\n      />\n    </div>\n  );\n}\n`;var We={\"/App.jsx\":M},j={...We};var E=`import {TimeInput} from \"@heroui/react\";\nimport {Time} from \"@internationalized/date\";\n\nexport const ClockCircleLinearIcon = (props) => {\n  return (\n    <svg\n      aria-hidden=\"true\"\n      fill=\"none\"\n      focusable=\"false\"\n      height=\"1em\"\n      role=\"presentation\"\n      viewBox=\"0 0 24 24\"\n      width=\"1em\"\n      {...props}\n    >\n      <g fill=\"none\" stroke=\"currentColor\" strokeWidth=\"1.5\">\n        <circle cx=\"12\" cy=\"12\" r=\"10\" />\n        <path d=\"M12 8v4l2.5 2.5\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\n      </g>\n    </svg>\n  );\n};\n\nexport default function App() {\n  return (\n    <TimeInput\n      defaultValue={new Time(11, 45)}\n      label=\"Event Time\"\n      labelPlacement=\"outside\"\n      startContent={\n        <ClockCircleLinearIcon className=\"text-xl text-default-400 pointer-events-none flex-shrink-0\" />\n      }\n    />\n  );\n}\n`;var Me={\"/App.jsx\":E},Z={...Me};var R=`import {TimeInput} from \"@heroui/react\";\nimport {Time} from \"@internationalized/date\";\n\nexport const ClockCircleLinearIcon = (props) => {\n  return (\n    <svg\n      aria-hidden=\"true\"\n      fill=\"none\"\n      focusable=\"false\"\n      height=\"1em\"\n      role=\"presentation\"\n      viewBox=\"0 0 24 24\"\n      width=\"1em\"\n      {...props}\n    >\n      <g fill=\"none\" stroke=\"currentColor\" strokeWidth=\"1.5\">\n        <circle cx=\"12\" cy=\"12\" r=\"10\" />\n        <path d=\"M12 8v4l2.5 2.5\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\n      </g>\n    </svg>\n  );\n};\n\nexport default function App() {\n  return (\n    <TimeInput\n      defaultValue={new Time(11, 45)}\n      endContent={\n        <ClockCircleLinearIcon className=\"text-xl text-default-400 pointer-events-none flex-shrink-0\" />\n      }\n      label=\"Event Time\"\n      labelPlacement=\"outside\"\n    />\n  );\n}\n`;var Ee={\"/App.jsx\":R},P={...Ee};var S=`import {TimeInput} from \"@heroui/react\";\nimport {parseAbsoluteToLocal, Time, ZonedDateTime} from \"@internationalized/date\";\nimport {useDateFormatter} from \"@react-aria/i18n\";\n\nexport default function App() {\n  let [value, setValue] = React.useState(parseAbsoluteToLocal(\"2024-04-08T18:45:22Z\"));\n\n  let formatter = useDateFormatter({dateStyle: \"short\", timeStyle: \"long\"});\n\n  return (\n    <div className=\"w-full flex flex-row gap-2\">\n      <div className=\"w-full flex flex-col gap-y-2\">\n        <TimeInput label=\"Time (controlled)\" value={value} onChange={setValue} />\n        <p className=\"text-default-500 text-sm\">\n          {value instanceof ZonedDateTime\n            ? (value.toDate && formatter.format(value.toDate())) ||\n              (value && value.toString()) ||\n              \"--\"\n            : \"\"}\n        </p>\n      </div>\n\n      <TimeInput defaultValue={new Time(11, 45)} label=\"Time (uncontrolled)\" />\n    </div>\n  );\n}\n`;var F=`import type {TimeInputValue} from \"@heroui/react\";\n\nimport React from \"react\";\nimport {TimeInput} from \"@heroui/react\";\nimport {parseAbsoluteToLocal, Time, ZonedDateTime} from \"@internationalized/date\";\nimport {useDateFormatter} from \"@react-aria/i18n\";\n\nexport default function App() {\n  let [value, setValue] = React.useState<TimeInputValue | null>(\n    parseAbsoluteToLocal(\"2024-04-08T18:45:22Z\"),\n  );\n\n  let formatter = useDateFormatter({dateStyle: \"short\", timeStyle: \"long\"});\n\n  return (\n    <div className=\"w-full flex flex-row gap-2\">\n      <div className=\"w-full flex flex-col gap-y-2\">\n        <TimeInput label=\"Time (controlled)\" value={value} onChange={setValue} />\n        <p className=\"text-default-500 text-sm\">\n          {value instanceof ZonedDateTime\n            ? (value.toDate && formatter.format(value.toDate())) ||\n              (value && value.toString()) ||\n              \"--\"\n            : \"\"}\n        </p>\n      </div>\n\n      <TimeInput defaultValue={new Time(11, 45)} label=\"Time (uncontrolled)\" />\n    </div>\n  );\n}\n`;var Pe={\"/App.jsx\":S},Se={\"/App.tsx\":F},N={...Pe,...Se};var B=`import {TimeInput} from \"@heroui/react\";\nimport {parseZonedDateTime, parseAbsoluteToLocal} from \"@internationalized/date\";\n\nexport default function App() {\n  return (\n    <div className=\"w-full max-w-xl flex flex-col items-end gap-4\">\n      <TimeInput\n        defaultValue={parseZonedDateTime(\"2022-11-07T00:45[America/Los_Angeles]\")}\n        labelPlacement=\"outside\"\n      />\n      <TimeInput\n        defaultValue={parseAbsoluteToLocal(\"2021-11-07T07:45:00Z\")}\n        labelPlacement=\"outside\"\n      />\n    </div>\n  );\n}\n`;var Ne={\"/App.jsx\":B},H={...Ne};var _=`import {TimeInput} from \"@heroui/react\";\nimport {parseAbsoluteToLocal} from \"@internationalized/date\";\n\nexport default function App() {\n  let [date, setDate] = React.useState(parseAbsoluteToLocal(\"2021-04-07T18:45:22Z\"));\n\n  return (\n    <div className=\"w-full max-w-xl flex flex-col items-start gap-4\">\n      <TimeInput granularity=\"hour\" label=\"Hour\" value={date} onChange={setDate} />\n      <TimeInput granularity=\"minute\" label=\"Minute\" value={date} onChange={setDate} />\n      <TimeInput granularity=\"second\" label=\"Second\" value={date} onChange={setDate} />\n    </div>\n  );\n}\n`;var q=`import type {TimeInputValue} from \"@heroui/react\";\n\nimport React from \"react\";\nimport {TimeInput} from \"@heroui/react\";\nimport {parseAbsoluteToLocal} from \"@internationalized/date\";\n\nexport default function App() {\n  let [date, setDate] = React.useState<TimeInputValue | null>(\n    parseAbsoluteToLocal(\"2021-04-07T18:45:22Z\"),\n  );\n\n  return (\n    <div className=\"w-full max-w-xl flex flex-col items-start gap-4\">\n      <TimeInput granularity=\"hour\" label=\"Hour\" value={date} onChange={setDate} />\n      <TimeInput granularity=\"minute\" label=\"Minute\" value={date} onChange={setDate} />\n      <TimeInput granularity=\"second\" label=\"Second\" value={date} onChange={setDate} />\n    </div>\n  );\n}\n`;var _e={\"/App.jsx\":_},qe={\"/App.tsx\":q},O={..._e,...qe};var U=`import {TimeInput} from \"@heroui/react\";\nimport {Time} from \"@internationalized/date\";\n\nexport default function App() {\n  return <TimeInput defaultValue={new Time(8)} minValue={new Time(9)} />;\n}\n`;var Ue={\"/App.jsx\":U},K={...Ue};var G=`import {TimeInput} from \"@heroui/react\";\nimport {Time} from \"@internationalized/date\";\n\nexport default function App() {\n  return <TimeInput defaultValue={new Time(18)} maxValue={new Time(17)} />;\n}\n`;var Ge={\"/App.jsx\":G},X={...Ge};var Y=`import {TimeInput} from \"@heroui/react\";\nimport {Time} from \"@internationalized/date\";\n\nexport default function App() {\n  return <TimeInput label=\"Meeting time\" placeholderValue={new Time(9)} />;\n}\n`;var Ye={\"/App.jsx\":Y},J={...Ye};var Q=`import {TimeInput} from \"@heroui/react\";\nimport {parseZonedDateTime} from \"@internationalized/date\";\n\nexport default function App() {\n  return (\n    <TimeInput\n      hideTimeZone\n      defaultValue={parseZonedDateTime(\"2022-11-07T10:45[America/Los_Angeles]\")}\n      label=\"Meeting time\"\n    />\n  );\n}\n`;var Qe={\"/App.jsx\":Q},$={...Qe};var ee=`import {TimeInput} from \"@heroui/react\";\nimport {parseZonedDateTime} from \"@internationalized/date\";\n\nexport default function App() {\n  return (\n    <TimeInput\n      defaultValue={parseZonedDateTime(\"2022-11-07T00:45[America/Los_Angeles]\")}\n      granularity=\"minute\"\n      hourCycle={24}\n      label=\"Meeting time\"\n    />\n  );\n}\n`;var et={\"/App.jsx\":ee},te={...et};var a={usage:b,required:v,disabled:x,readonly:A,withoutLabel:V,withDescription:D,errorMessage:L,errorMessageFunction:k,labelPlacement:j,startContent:Z,endContent:P,controlled:N,timezones:H,granularity:O,minTimeValue:K,maxTimeValue:X,placeholderValue:J,hideTimeZone:$,hourCycle:te};var tt={title:\"Time Input\",description:\"A time input allows users to enter and edit time values using a keyboard. Each part of a time value is displayed in an individually editable segment.\"};function ie(n){let t={a:\"a\",code:\"code\",h1:\"h1\",h2:\"h2\",h3:\"h3\",hr:\"hr\",li:\"li\",p:\"p\",strong:\"strong\",ul:\"ul\",...n.components},{APITable:r,CarbonAd:l,CodeDemo:i,ComponentLinks:u,ImportTabs:p,PackageManagers:c,Spacer:d}=t;return r||o(\"APITable\",!0),l||o(\"CarbonAd\",!0),i||o(\"CodeDemo\",!0),u||o(\"ComponentLinks\",!0),p||o(\"ImportTabs\",!0),c||o(\"PackageManagers\",!0),d||o(\"Spacer\",!0),(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(t.h1,{id:\"time-input\",children:\"Time Input\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"The \",(0,e.jsx)(t.code,{children:\"TimeInput\"}),\" component consists of a label, and a group of segments representing each unit of a time (e.g. hours, minutes, and seconds). Each segment is individually focusable and editable by the user, by typing or using the arrow keys to increment and decrement the value. This approach allows values to be formatted and parsed correctly regardless of the locale or time format, and offers an easy and error-free way to edit times using the keyboard.\"]}),`\n`,(0,e.jsx)(u,{component:\"date-input\",storybook:\"timeinput\",reactAriaHook:\"useTimeField\"}),`\n`,(0,e.jsx)(t.hr,{}),`\n`,(0,e.jsx)(l,{}),`\n`,(0,e.jsx)(t.h2,{id:\"installation\",children:\"Installation\"}),`\n`,(0,e.jsx)(c,{showGlobalInstallWarning:!0,commands:{cli:\"npx heroui-cli@latest add date-input\",npm:\"npm install @heroui/date-input\",yarn:\"yarn add @heroui/date-input\",pnpm:\"pnpm add @heroui/date-input\",bun:\"bun add @heroui/date-input\"}}),`\n`,(0,e.jsx)(t.h2,{id:\"import\",children:\"Import\"}),`\n`,(0,e.jsx)(p,{commands:{main:'import {TimeInput} from \"@heroui/react\";',individual:'import {TimeInput} from \"@heroui/date-input\";'}}),`\n`,(0,e.jsx)(t.h2,{id:\"usage\",children:\"Usage\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"A \",(0,e.jsx)(t.code,{children:\"TimeInput\"}),\" displays a placeholder by default. An initial, uncontrolled value can be provided to the TimeField using the defaultValue prop. Alternatively, a controlled value can be provided using the value prop.\"]}),`\n`,(0,e.jsxs)(t.p,{children:[\"Time values are provided using objects in the \",(0,e.jsx)(t.code,{children:\"@internationalized/date\"}),\" package. This library handles correct international date and time manipulation across calendars, time zones, and other localization concerns.\"]}),`\n`,(0,e.jsxs)(t.p,{children:[(0,e.jsx)(t.code,{children:\"TimeInput\"}),\" only supports selecting times, but values with date components are also accepted. By default, \",(0,e.jsx)(t.code,{children:\"TimeInput\"}),\" will emit \",(0,e.jsx)(t.code,{children:\"Time\"}),\" objects in the onChange event, but if a \",(0,e.jsx)(t.code,{children:\"CalendarDateTime\"}),\" or \",(0,e.jsx)(t.code,{children:\"ZonedDateTime\"}),\" object is passed as the \",(0,e.jsx)(t.code,{children:\"value\"}),\" or \",(0,e.jsx)(t.code,{children:\"defaultValue\"}),\", values of that type will be emitted, changing only the time and preserving the date components.\"]}),`\n`,(0,e.jsx)(i,{title:\"Usage\",files:a.usage}),`\n`,(0,e.jsx)(t.h3,{id:\"required\",children:\"Required\"}),`\n`,(0,e.jsxs)(t.p,{children:[(0,e.jsx)(t.code,{children:\"TimeInput\"}),\" supports the \",(0,e.jsx)(t.code,{children:\"isRequired\"}),\" prop to ensure the user enters a value, as well as minimum and maximum values, and custom client and server-side validation.\"]}),`\n`,(0,e.jsx)(i,{title:\"Required\",files:a.required}),`\n`,(0,e.jsx)(t.h3,{id:\"disabled\",children:\"Disabled\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"The \",(0,e.jsx)(t.code,{children:\"isDisabled\"}),\" boolean prop makes \",(0,e.jsx)(t.code,{children:\"TimeInput\"}),\" disabled. Inputs cannot be focused or selected.\"]}),`\n`,(0,e.jsx)(i,{title:\"Disabled\",files:a.disabled}),`\n`,(0,e.jsx)(t.h3,{id:\"read-only\",children:\"Read Only\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"The \",(0,e.jsx)(t.code,{children:\"isReadOnly\"}),\" boolean prop makes \",(0,e.jsx)(t.code,{children:\"TimeInput\"}),\"'s value immutable. Unlike \",(0,e.jsx)(t.code,{children:\"isDisabled\"}),\", \",(0,e.jsx)(t.code,{children:\"TimeInput\"}),\" remains focusable.\"]}),`\n`,(0,e.jsx)(i,{title:\"Readonly\",files:a.readonly}),`\n`,(0,e.jsx)(t.h3,{id:\"without-label\",children:\"Without Label\"}),`\n`,(0,e.jsxs)(t.p,{children:[(0,e.jsx)(t.code,{children:\"TimeInput\"}),\" supports the \",(0,e.jsx)(t.code,{children:\"label\"}),\" prop to show or not show the label.\"]}),`\n`,(0,e.jsx)(i,{title:\"Without Label\",files:a.withoutLabel}),`\n`,(0,e.jsx)(t.h3,{id:\"with-description\",children:\"With Description\"}),`\n`,(0,e.jsx)(t.p,{children:\"A description for the field. Provides a hint such as specific requirements for what to choose.\"}),`\n`,(0,e.jsx)(i,{title:\"With Description\",files:a.withDescription}),`\n`,(0,e.jsx)(t.h3,{id:\"with-error-message\",children:\"With Error Message\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"You can combine the \",(0,e.jsx)(t.code,{children:\"isInvalid\"}),\" and \",(0,e.jsx)(t.code,{children:\"errorMessage\"}),\" properties to show an invalid input.\"]}),`\n`,(0,e.jsx)(i,{title:\"With Error Message\",files:a.errorMessage}),`\n`,(0,e.jsxs)(t.p,{children:[\"You can also pass an error message as a function. This allows for dynamic error message handling based on the \",(0,e.jsx)(t.a,{href:\"https://github.com/adobe/react-spectrum/blob/1cacbf1d438675feb3859fee54b17e620b458d9c/packages/%40react-types/shared/src/inputs.d.ts#L44-L51\",children:\"ValidationResult\"}),\".\"]}),`\n`,(0,e.jsx)(i,{title:\"With Error Message Function\",files:a.errorMessageFunction}),`\n`,(0,e.jsx)(t.h3,{id:\"label-placement\",children:\"Label Placement\"}),`\n`,(0,e.jsx)(t.p,{children:\"The label's overall position relative to the element it is labeling.\"}),`\n`,(0,e.jsx)(i,{title:\"Label Placement\",files:a.labelPlacement}),`\n`,(0,e.jsx)(t.h3,{id:\"start-content\",children:\"Start Content\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"If you want to display some content before the time inputs, you can set the \",(0,e.jsx)(t.code,{children:\"startContent\"}),\" property.\"]}),`\n`,(0,e.jsx)(i,{title:\"Start Content\",files:a.startContent}),`\n`,(0,e.jsx)(t.h3,{id:\"end-content\",children:\"End Content\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"If you want to display some content after the time inputs, you can set the \",(0,e.jsx)(t.code,{children:\"endContent\"}),\" property.\"]}),`\n`,(0,e.jsx)(i,{title:\"End Content\",files:a.endContent}),`\n`,(0,e.jsx)(t.h3,{id:\"controlled\",children:\"Controlled\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"An initial, uncontrolled value can be provided to the \",(0,e.jsx)(t.code,{children:\"TimeInput\"}),\" using the \",(0,e.jsx)(t.code,{children:\"defaultValue\"}),\" prop. A controlled value can be provided using the \",(0,e.jsx)(t.code,{children:\"value\"}),\" prop.\"]}),`\n`,(0,e.jsx)(i,{title:\"Controlled\",files:a.controlled}),`\n`,(0,e.jsx)(t.h3,{id:\"time-zones\",children:\"Time Zones\"}),`\n`,(0,e.jsxs)(t.p,{children:[(0,e.jsx)(t.code,{children:\"TimeInput\"}),\" is time zone aware when a \",(0,e.jsx)(t.code,{children:\"ZonedDateTime\"}),\" object is provided as the value. In this case, the time zone abbreviation is displayed, and time zone concerns such as daylight saving time are taken into account when the value is manipulated.\"]}),`\n`,(0,e.jsxs)(t.p,{children:[\"In most cases, your data will come from and be sent to a server as an \",(0,e.jsx)(t.a,{href:\"https://en.wikipedia.org/wiki/ISO_8601\",children:\"ISO 8601\"}),\" formatted string. \",(0,e.jsx)(t.a,{href:\"https://react-spectrum.adobe.com/internationalized/date/\",children:\"@internationalized/date\"}),\" includes functions for parsing strings in multiple formats into ZonedDateTime objects. Which format you use will depend on what information you need to store.\"]}),`\n`,(0,e.jsxs)(t.ul,{children:[`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.code,{children:\"parseZonedDateTime\"}),\" \\u2013 This function parses a date with an explicit time zone and optional UTC offset attached (e.g. \",(0,e.jsx)(t.code,{children:\"2021-11-07T00:45[America/Los_Angeles]\"}),\" or \",(0,e.jsx)(t.code,{children:\"2021-11-07T00:45-07:00[America/Los_Angeles]\"}),\"). This format preserves the maximum amount of information. If the exact local time and time zone that a user selected is important, use this format. Storing the time zone and offset that was selected rather than converting to UTC ensures that the local time is correct regardless of daylight saving rule changes (e.g. if a locale abolishes DST). Examples where this applies include calendar events, reminders, and other times that occur in a particular location.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.code,{children:\"parseAbsolute\"}),\" \\u2013 This function parses an absolute date and time that occurs at the same instant at all locations on Earth. It can be represented in UTC (e.g. \",(0,e.jsx)(t.code,{children:\"2021-11-07T07:45:00Z\"}),\"), or stored with a particular offset (e.g. \",(0,e.jsx)(t.code,{children:\"2021-11-07T07:45:00-07:00\"}),\"). A time zone identifier, e.g. America/Los_Angeles, must be passed, and the result will be converted into that time zone. Absolute times are the best way to represent events that occurred in the past, or future events where an exact time is needed, regardless of time zone.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.code,{children:\"parseAbsoluteToLocal\"}),\" \\u2013 This function parses an absolute date and time into the current user's local time zone. It is a shortcut for parseAbsolute, and accepts the same formats.\"]}),`\n`]}),`\n`,(0,e.jsx)(i,{title:\"Time Zones\",files:a.timezones}),`\n`,(0,e.jsx)(t.h3,{id:\"granularity\",children:\"Granularity\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"The \",(0,e.jsx)(t.code,{children:\"granularity\"}),' prop allows you to control the smallest unit that is displayed by TimeInput. By default, times are displayed with \"minute\" granularity. More granular time values can be displayed by setting the granularity prop to \"second\".']}),`\n`,(0,e.jsx)(i,{title:\"Granularity\",files:a.granularity}),`\n`,(0,e.jsx)(t.h3,{id:\"min-time-value\",children:\"Min Time Value\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"The \",(0,e.jsx)(t.code,{children:\"minValue\"}),\" prop allows you to validate time value before a certain time.\"]}),`\n`,(0,e.jsx)(i,{title:\"Min Time Value\",files:a.minTimeValue}),`\n`,(0,e.jsx)(t.h3,{id:\"max-time-value\",children:\"Max Time Value\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"The \",(0,e.jsx)(t.code,{children:\"maxValue\"}),\" prop allows you to validate time value before a certain time.\"]}),`\n`,(0,e.jsx)(i,{title:\"Max Time Value\",files:a.maxTimeValue}),`\n`,(0,e.jsx)(t.h3,{id:\"placeholder-value\",children:\"Placeholder Value\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"When no value is set, a placeholder is shown. The format of the placeholder is influenced by the \",(0,e.jsx)(t.code,{children:\"granularity\"}),\" and \",(0,e.jsx)(t.code,{children:\"placeholderValue\"}),\" props. placeholderValue also controls the default values of each segment when the user first interacts with them, e.g. using the up and down arrow keys. By default, the placeholderValue is midnight, but you can set it to a more appropriate value if needed.\"]}),`\n`,(0,e.jsx)(i,{title:\"Placeholder Value\",files:a.placeholderValue}),`\n`,(0,e.jsx)(t.h3,{id:\"hide-time-zone\",children:\"Hide Time Zone\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"When a \",(0,e.jsx)(t.code,{children:\"ZonedDateTime\"}),\" object is provided as the value to \",(0,e.jsx)(t.code,{children:\"TimeInput\"}),\", the time zone abbreviation is displayed by default. However, if this is displayed elsewhere or implicit based on the usecase, it can be hidden using the \",(0,e.jsx)(t.code,{children:\"hideTimeZone\"}),\" option.\"]}),`\n`,(0,e.jsx)(i,{title:\"Hide Time Zone\",files:a.hideTimeZone}),`\n`,(0,e.jsx)(t.h3,{id:\"hour-cycle\",children:\"Hour Cycle\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"By default, \",(0,e.jsx)(t.code,{children:\"TimeInput\"}),\" displays times in either 12 or 24 hour hour format depending on the user's locale. However, this can be overridden using the \",(0,e.jsx)(t.code,{children:\"hourCycle\"}),\" prop if needed for a specific usecase. This example forces \",(0,e.jsx)(t.code,{children:\"TimeInput\"}),\" to use 24-hour time, regardless of the locale.\"]}),`\n`,(0,e.jsx)(i,{title:\"Hour Cycle\",files:a.hourCycle}),`\n`,(0,e.jsx)(t.h2,{id:\"slots\",children:\"Slots\"}),`\n`,(0,e.jsxs)(t.ul,{children:[`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"base\"}),\": Input wrapper, it handles alignment, placement, and general appearance.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"label\"}),\": Label of the time input, it is the one that is displayed above, inside or left of the time input.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"inputWrapper\"}),\": Wraps the \",(0,e.jsx)(t.code,{children:\"label\"}),\" (when it is inside) and the \",(0,e.jsx)(t.code,{children:\"innerWrapper\"}),\".\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"input\"}),\": The time input element.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"innerWrapper\"}),\": Wraps the segments, the \",(0,e.jsx)(t.code,{children:\"startContent\"}),\" and the \",(0,e.jsx)(t.code,{children:\"endContent\"}),\".\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"segment\"}),\": The segment of input elements.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"helperWrapper\"}),\": The wrapper of the helper text. This wraps the helper text and the error message.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"description\"}),\": The description of the time input.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"errorMessage\"}),\": The error message of the time input.\"]}),`\n`]}),`\n`,(0,e.jsx)(d,{y:4}),`\n`,(0,e.jsx)(t.h2,{id:\"data-attributes\",children:\"Data Attributes\"}),`\n`,(0,e.jsxs)(t.p,{children:[(0,e.jsx)(t.code,{children:\"TimeInput\"}),\" has the following attributes on the \",(0,e.jsx)(t.code,{children:\"base\"}),\" element:\"]}),`\n`,(0,e.jsxs)(t.ul,{children:[`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-has-helper\"}),`:\nWhen the time input has description or error message. Based on `,(0,e.jsx)(t.code,{children:\"description\"}),\" or \",(0,e.jsx)(t.code,{children:\"errorMessage\"}),\" props.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-required\"}),`:\nWhen the time input is required. Based on `,(0,e.jsx)(t.code,{children:\"isRequired\"}),\" prop.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-disabled\"}),`:\nWhen the time input is disabled. Based on `,(0,e.jsx)(t.code,{children:\"isDisabled\"}),\" prop.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-readonly\"}),`:\nWhen the time input is readonly. Based on `,(0,e.jsx)(t.code,{children:\"isReadOnly\"}),\" prop.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-invalid\"}),`:\nWhen the time input is invalid. Based on `,(0,e.jsx)(t.code,{children:\"isInvalid\"}),\" prop.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-has-start-content\"}),`:\nWhen the time input has start content. Based on `,(0,e.jsx)(t.code,{children:\"startContent\"}),\" prop.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-has-end-content\"}),`:\nWhen the time input has end content. Based on `,(0,e.jsx)(t.code,{children:\"endContent\"}),\" prop.\"]}),`\n`]}),`\n`,(0,e.jsx)(d,{y:4}),`\n`,(0,e.jsx)(t.h2,{id:\"accessibility\",children:\"Accessibility\"}),`\n`,(0,e.jsxs)(t.ul,{children:[`\n`,(0,e.jsx)(t.li,{children:\"Support for locale-specific formatting, number systems, hour cycles, and right-to-left layout.\"}),`\n`,(0,e.jsx)(t.li,{children:\"Times can optionally include a time zone. All modifications follow time zone rules such as daylight saving time.\"}),`\n`,(0,e.jsx)(t.li,{children:\"Each time unit is displayed as an individually focusable and editable segment, which allows users an easy way to edit times using the keyboard, in any format and locale.\"}),`\n`,(0,e.jsx)(t.li,{children:\"Time segments are editable using an easy to use numeric keypad, and all interactions are accessible using touch-based screen readers.\"}),`\n`]}),`\n`,(0,e.jsx)(d,{y:4}),`\n`,(0,e.jsx)(t.h2,{id:\"api\",children:\"API\"}),`\n`,(0,e.jsx)(t.h3,{id:\"timeinput-props\",children:\"TimeInput Props\"}),`\n`,(0,e.jsx)(r,{data:[{attribute:\"label\",type:\"ReactNode\",description:\"The content to display as the label.\",default:\"-\"},{attribute:\"name\",type:\"string\",description:\"The name of the time input element, used when submitting an HTML form.\",default:\"-\"},{attribute:\"value\",type:\"TimeValue | null\",description:\"The current value (controlled).\",default:\"-\"},{attribute:\"defaultValue\",type:\"TimeValue | null\",description:\"The default value (uncontrolled).\",default:\"-\"},{attribute:\"variant\",type:\"flat | bordered | faded | underlined\",description:\"The variant of the time input.\",default:\"flat\"},{attribute:\"color\",type:\"default | primary | secondary | success | warning | danger\",description:\"The color of the time input.\",default:\"default\"},{attribute:\"size\",type:\"sm | md | lg\",description:\"The size of the time input.\",default:\"md\"},{attribute:\"radius\",type:\"none | sm | md | lg | full\",description:\"The radius of the time input.\",default:\"-\"},{attribute:\"hourCycle\",type:\"12 | 24\",description:\"Whether to display the time in 12 or 24 hour format. By default, this is determined by the user's locale.\",default:\"-\"},{attribute:\"granularity\",type:\"hour | minute | second\",description:\"Determines the smallest unit that is displayed in the time picker.\",default:\"minute\"},{attribute:\"hideTimeZone\",type:\"boolean\",description:\"Whether to hide the time zone abbreviation.\",default:\"-\"},{attribute:\"labelPlacement\",type:\"inside | outside | outside-left\",description:\"The position of the label.\",default:\"inside\"},{attribute:\"shouldForceLeadingZeros\",type:\"boolean\",description:\"Whether to always show leading zeros in the hour field. By default, this is determined by the user's locale.\",default:\"true\"},{attribute:\"placeholderValue\",type:\"TimeValue\",description:\"A placeholder time that influences the format of the placeholder shown when no value is selected.\",default:\"-\"},{attribute:\"minValue\",type:\"TimeValue\",description:\"The minimum allowed time that a user may select.\",default:\"-\"},{attribute:\"maxValue\",type:\"TimeValue\",description:\"The maximum allowed time that a user may select.\",default:\"-\"},{attribute:\"isDisabled\",type:\"boolean\",description:\"Whether the time input is disabled.\",default:\"-\"},{attribute:\"isReadOnly\",type:\"boolean\",description:\"Whether the time input can be selected but not changed by the user.\",default:\"-\"},{attribute:\"isRequired\",type:\"boolean\",description:\"Whether user time input is required on the time input before form submission.\",default:\"-\"},{attribute:\"isInvalid\",type:\"boolean\",description:\"Whether the time input is invalid.\",default:\"-\"},{attribute:\"autoFocus\",type:\"boolean\",description:\"Whether the element should receive focus on render.\",default:\"-\"},{attribute:\"description\",type:\"ReactNode\",description:\"A description for the field. Provides a hint such as specific requirements for what to choose.\",default:\"-\"},{attribute:\"errorMessage\",type:\"ReactNode | (v: ValidationResult) => ReactNode\",description:\"An error message for the field.\",default:\"-\"},{attribute:\"validate\",type:\"(value: MappedTimeValue<TimeValue>) => ValidationError | true | null | undefined\",description:\"Validate input values when committing (e.g. on blur), returning error messages for invalid values.\",default:\"-\"},{attribute:\"validationBehavior\",type:\"native | aria\",description:\"Whether to use native HTML form validation or ARIA validation. When wrapped in a Form component, the default is `aria`. Otherwise, the default is `native`.\",default:\"native\"},{attribute:\"disableAnimation\",type:\"boolean\",description:\"Whether to disable the animation of the time input.\",default:\"-\"},{attribute:\"classNames\",type:'Partial<Record<\"base\" | \"label\" | \"inputWrapper\" | \"innerWrapper\" | \"segment\" | \"helperWrapper\" | \"input\" | \"description\" | \"errorMessage\", string>>',description:\"Allows to set custom class names for the time input slots.\",default:\"-\"}]}),`\n`,(0,e.jsx)(t.h3,{id:\"timeinput-events\",children:\"TimeInput Events\"}),`\n`,(0,e.jsx)(r,{data:[{attribute:\"onFocus\",type:\"(e: FocusEvent<Target>) => void\",description:\"Handler that is called when the element receives focus.\"},{attribute:\"onBlur\",type:\"(e: FocusEvent<Target>) => void\",description:\"Handler that is called when the element loses focus.\"},{attribute:\"onFocusChange\",type:\"(isFocused: boolean) => void\",description:\"Handler that is called when the element's focus status changes.\"},{attribute:\"onKeyDown\",type:\"(e: KeyboardEvent) => void\",description:\"Handler that is called when a key is pressed.\"},{attribute:\"onKeyUp\",type:\"(e: KeyboardEvent) => void\",description:\"Handler that is called when a key is released.\"},{attribute:\"onChange\",type:\"(value: MappedTimeValue<TimeValue>) => void\",description:\"Handler that is called when the value changes.\"}]})]})}function ne(n={}){let{wrapper:t}=n.components||{};return t?(0,e.jsx)(t,{...n,children:(0,e.jsx)(ie,{...n})}):ie(n)}function o(n,t){throw new Error(\"Expected \"+(t?\"component\":\"object\")+\" `\"+n+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return ce(it);})();\n;return Component;"
  },
  "_id": "docs/components/time-input.mdx",
  "_raw": {
    "sourceFilePath": "docs/components/time-input.mdx",
    "sourceFileName": "time-input.mdx",
    "sourceFileDir": "docs/components",
    "contentType": "mdx",
    "flattenedPath": "docs/components/time-input"
  },
  "type": "Doc",
  "slug": "/docs/components/time-input",
  "slugAsParams": "components/time-input",
  "url": "/docs/components/time-input"
}