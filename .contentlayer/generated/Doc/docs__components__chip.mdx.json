{
  "title": "Chip",
  "description": "A Chip is a small block of essential information that represent an input, attribute, or action.",
  "body": {
    "raw": "\nimport {chipContent} from \"@/content/components/chip\";\n\n# Chip\n\nA Chip is a small block of essential information that represent an input, attribute, or action.\n\n<ComponentLinks component=\"chip\" />\n\n---\n\n<CarbonAd/>\n\n## Installation\n\n<PackageManagers\n  showGlobalInstallWarning\n  commands={{\n    cli: \"npx heroui-cli@latest add chip\",\n    npm: \"npm install @heroui/chip\",\n    yarn: \"yarn add @heroui/chip\",\n    pnpm: \"pnpm add @heroui/chip\",\n    bun: \"bun add @heroui/chip\"\n  }}\n/>\n\n## Import\n\n<ImportTabs\n  commands={{\n    main: 'import {Chip} from \"@heroui/react\";',\n    individual: 'import {Chip} from \"@heroui/chip\";',\n  }}\n/>\n\n## Usage\n\n<CodeDemo title=\"Usage\" files={chipContent.usage} />\n\n### Disabled\n\n<CodeDemo title=\"Disabled\" files={chipContent.disabled} />\n\n### Sizes\n\n<CodeDemo title=\"Sizes\" files={chipContent.sizes} />\n\n### Colors\n\n<CodeDemo title=\"Colors\" files={chipContent.colors} />\n\n### Radius\n\n<CodeDemo title=\"Radius\" files={chipContent.radius} />\n\n### Variants\n\n<CodeDemo title=\"Variants\" files={chipContent.variants} />\n\n### Start & End Content\n\n<CodeDemo title=\"Start & End Content\" files={chipContent.startEndContent} />\n\n### With Close Button\n\nIf you pass the `onClose` prop, the close button will be visible. You can override the close icon by passing the `endContent` prop.\n\n<CodeDemo title=\"With Close Button\" files={chipContent.closeButton} />\n\n### With Avatar\n\n<CodeDemo title=\"With Avatar\" files={chipContent.avatar} />\n\n### List of Chips\n\n<CodeDemo title=\"List of Chips\" files={chipContent.list} />\n\n## Slots\n\n- **base**: The base slot of the chip, it is the container of the chip.\n- **content**: The content slot of the chip, it is the container of the chip children.\n- **dot**: Small dot on the left side of the chip. It is visible when the `variant=dot` prop is passed.\n- **avatar**: Avatar classes of the chip. It is visible when the `avatar` prop is passed.\n- **closeButton**: Close button classes of the chip. It is visible when the `onClose` prop is passed.\n\n### Custom Styles\n\nYou can customize the `Chip` component by passing custom Tailwind CSS classes to the component slots.\n\n<CodeDemo title=\"Custom Styles\" files={chipContent.customStyles} />\n\n<Spacer y={4} />\n\n## API\n\n### Chip Props\n\n<APITable\n  data={[\n    {\n      attribute: \"children\",\n      type: \"ReactNode\",\n      description: \"The content of the chip.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"variant\",\n      type: \"solid | bordered | light | flat | faded | shadow | dot\",\n      description: \"The chip appearance style.\",\n      default: \"solid\"\n    },\n    {\n      attribute: \"color\",\n      type: \"default | primary | secondary | success | warning | danger\",\n      description: \"The color of the chip.\",\n      default: \"default\"\n    },\n    {\n      attribute: \"size\",\n      type: \"sm | md | lg\",\n      description: \"The size of the chip.\",\n      default: \"md\"\n    },\n    {\n      attribute: \"radius\",\n      type: \"none | sm | md | lg | full\",\n      description: \"The radius of the chip.\",\n      default: \"full\"\n    },\n    {\n      attribute: \"avatar\",\n      type: \"ReactNode\",\n      description: \"Avatar to be rendered in the left side of the chip.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"startContent\",\n      type: \"ReactNode\",\n      description: \"Element to be rendered in the left side of the chip. This prop overrides the avatar prop.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"endContent\",\n      type: \"ReactNode\",\n      description: \"Element to be rendered in the right side of the chip. This prop overrides the default close button when onClose is passed.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"isDisabled\",\n      type: \"boolean\",\n      description: \"Whether the chip is disabled.\",\n      default: \"false\"\n    },\n    {\n      attribute: \"classNames\",\n      type: 'Partial<Record<\"base\" | \"content\" | \"dot\" | \"avatar\" | \"closeButton\", string>>',\n      description: \"Allows to set custom class names for the chip slots.\",\n      default: \"-\"\n    }\n  ]}\n/>\n\n### Chip Events\n\n<APITable\n  data={[\n    {\n      attribute: \"onClose\",\n      type: \"(e: PressEvent) => void\",\n      description: \"Handler that is called when the close button is pressed. If you pass this prop, the chip will display a close button (endContent).\",\n      default: \"-\"\n    }\n  ]}\n/>\n",
    "code": "var Component=(()=>{var _=Object.create;var p=Object.defineProperty;var V=Object.getOwnPropertyDescriptor;var J=Object.getOwnPropertyNames;var U=Object.getPrototypeOf,X=Object.prototype.hasOwnProperty;var Y=(i,e)=>()=>(e||i((e={exports:{}}).exports,e),e.exports),Z=(i,e)=>{for(var r in e)p(i,r,{get:e[r],enumerable:!0})},u=(i,e,r,s)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of J(e))!X.call(i,o)&&o!==r&&p(i,o,{get:()=>e[o],enumerable:!(s=V(e,o))||s.enumerable});return i};var G=(i,e,r)=>(r=i!=null?_(U(i)):{},u(e||!i||!i.__esModule?p(r,\"default\",{value:i,enumerable:!0}):r,i)),H=i=>u(p({},\"__esModule\",{value:!0}),i);var m=Y((xt,f)=>{f.exports=_jsx_runtime});var gt={};Z(gt,{default:()=>P,frontmatter:()=>vt});var t=G(m());var C=`import {Chip} from \"@heroui/react\";\n\nexport default function App() {\n  return <Chip>Chip</Chip>;\n}\n`;var q={\"/App.jsx\":C},v={...q};var g=`import {Chip} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <Chip isDisabled color=\"primary\">\n      Chip\n    </Chip>\n  );\n}\n`;var Q={\"/App.jsx\":g},b={...Q};var x=`import {Chip} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <div className=\"flex gap-4\">\n      <Chip size=\"sm\">Small</Chip>\n      <Chip size=\"md\">Medium</Chip>\n      <Chip size=\"lg\">Large</Chip>\n    </div>\n  );\n}\n`;var tt={\"/App.jsx\":x},A={...tt};var w=`import {Chip} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <div className=\"flex gap-4\">\n      <Chip color=\"default\">Default</Chip>\n      <Chip color=\"primary\">Primary</Chip>\n      <Chip color=\"secondary\">Secondary</Chip>\n      <Chip color=\"success\">Success</Chip>\n      <Chip color=\"warning\">Warning</Chip>\n      <Chip color=\"danger\">Danger</Chip>\n    </div>\n  );\n}\n`;var it={\"/App.jsx\":w},y={...it};var z=`import {Chip} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <div className=\"flex gap-4\">\n      <Chip radius=\"full\">Full</Chip>\n      <Chip radius=\"lg\">Large</Chip>\n      <Chip radius=\"md\">Medium</Chip>\n      <Chip radius=\"sm\">Small</Chip>\n    </div>\n  );\n}\n`;var rt={\"/App.jsx\":z},S={...rt};var I=`import {Chip} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <div className=\"flex gap-4\">\n      <Chip color=\"warning\" variant=\"solid\">\n        Solid\n      </Chip>\n      <Chip color=\"warning\" variant=\"bordered\">\n        Bordered\n      </Chip>\n      <Chip color=\"warning\" variant=\"light\">\n        Light\n      </Chip>\n      <Chip color=\"warning\" variant=\"flat\">\n        Flat\n      </Chip>\n      <Chip color=\"warning\" variant=\"faded\">\n        Faded\n      </Chip>\n      <Chip color=\"warning\" variant=\"shadow\">\n        Shadow\n      </Chip>\n      <Chip color=\"warning\" variant=\"dot\">\n        Dot\n      </Chip>\n    </div>\n  );\n}\n`;var at={\"/App.jsx\":I},j={...at};var N=`import {Chip} from \"@heroui/react\";\n\nexport const NotificationIcon = ({size, height, width, ...props}) => {\n  return (\n    <svg\n      fill=\"none\"\n      height={size || height || 24}\n      viewBox=\"0 0 24 24\"\n      width={size || width || 24}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      {...props}\n    >\n      <path\n        clipRule=\"evenodd\"\n        d=\"M18.707 8.796c0 1.256.332 1.997 1.063 2.85.553.628.73 1.435.73 2.31 0 .874-.287 1.704-.863 2.378a4.537 4.537 0 01-2.9 1.413c-1.571.134-3.143.247-4.736.247-1.595 0-3.166-.068-4.737-.247a4.532 4.532 0 01-2.9-1.413 3.616 3.616 0 01-.864-2.378c0-.875.178-1.682.73-2.31.754-.854 1.064-1.594 1.064-2.85V8.37c0-1.682.42-2.781 1.283-3.858C7.861 2.942 9.919 2 11.956 2h.09c2.08 0 4.204.987 5.466 2.625.82 1.054 1.195 2.108 1.195 3.745v.426zM9.074 20.061c0-.504.462-.734.89-.833.5-.106 3.545-.106 4.045 0 .428.099.89.33.89.833-.025.48-.306.904-.695 1.174a3.635 3.635 0 01-1.713.731 3.795 3.795 0 01-1.008 0 3.618 3.618 0 01-1.714-.732c-.39-.269-.67-.694-.695-1.173z\"\n        fill=\"currentColor\"\n        fillRule=\"evenodd\"\n      />\n    </svg>\n  );\n};\n\nexport const CheckIcon = ({size, height, width, ...props}) => {\n  return (\n    <svg\n      fill=\"none\"\n      height={size || height || 24}\n      viewBox=\"0 0 24 24\"\n      width={size || width || 24}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      {...props}\n    >\n      <path\n        d=\"M12 2C6.49 2 2 6.49 2 12C2 17.51 6.49 22 12 22C17.51 22 22 17.51 22 12C22 6.49 17.51 2 12 2ZM16.78 9.7L11.11 15.37C10.97 15.51 10.78 15.59 10.58 15.59C10.38 15.59 10.19 15.51 10.05 15.37L7.22 12.54C6.93 12.25 6.93 11.77 7.22 11.48C7.51 11.19 7.99 11.19 8.28 11.48L10.58 13.78L15.72 8.64C16.01 8.35 16.49 8.35 16.78 8.64C17.07 8.93 17.07 9.4 16.78 9.7Z\"\n        fill=\"currentColor\"\n      />\n    </svg>\n  );\n};\n\nexport default function App() {\n  return (\n    <div className=\"flex gap-4\">\n      <Chip color=\"success\" startContent={<CheckIcon size={18} />} variant=\"faded\">\n        Chip\n      </Chip>\n      <Chip color=\"secondary\" endContent={<NotificationIcon size={18} />} variant=\"flat\">\n        Chip\n      </Chip>\n    </div>\n  );\n}\n`;var pt={\"/App.jsx\":N},T={...pt};var k=`import {Chip} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <div className=\"flex gap-4\">\n      {/* eslint-disable no-console */}\n      <Chip onClose={() => console.log(\"close\")}>Chip</Chip>\n      {/* eslint-disable no-console */}\n      <Chip variant=\"bordered\" onClose={() => console.log(\"close\")}>\n        Chip\n      </Chip>\n    </div>\n  );\n}\n`;var ht={\"/App.jsx\":k},R={...ht};var L=`import {Chip, Avatar} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <div className=\"flex gap-4\">\n      <Chip\n        avatar={<Avatar name=\"JW\" src=\"https://i.pravatar.cc/300?u=a042581f4e29026709d\" />}\n        variant=\"flat\"\n      >\n        Avatar\n      </Chip>\n      <Chip\n        avatar={<Avatar getInitials={(name) => name.charAt(0)} name=\"JW\" size=\"sm\" />}\n        variant=\"flat\"\n      >\n        Avatar\n      </Chip>\n    </div>\n  );\n}\n`;var ct={\"/App.jsx\":L},M={...ct};var D=`import {Chip} from \"@heroui/react\";\n\nconst initialFruits = [\"Apple\", \"Banana\", \"Cherry\", \"Watermelon\", \"Orange\"];\n\nexport default function App() {\n  const [fruits, setFruits] = React.useState(initialFruits);\n\n  const handleClose = (fruitToRemove) => {\n    setFruits(fruits.filter((fruit) => fruit !== fruitToRemove));\n    if (fruits.length === 1) {\n      setFruits(initialFruits);\n    }\n  };\n\n  return (\n    <div className=\"flex gap-2\">\n      {fruits.map((fruit, index) => (\n        <Chip key={index} variant=\"flat\" onClose={() => handleClose(fruit)}>\n          {fruit}\n        </Chip>\n      ))}\n    </div>\n  );\n}\n`;var ft={\"/App.jsx\":D},F={...ft};var B=`import {Chip} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <Chip\n      classNames={{\n        base: \"bg-gradient-to-br from-indigo-500 to-pink-500 border-small border-white/50 shadow-pink-500/30\",\n        content: \"drop-shadow shadow-black text-white\",\n      }}\n      variant=\"shadow\"\n    >\n      New\n    </Chip>\n  );\n}\n`;var Ct={\"/App.jsx\":B},E={...Ct};var n={usage:v,disabled:b,sizes:A,colors:y,radius:S,variants:j,startEndContent:T,closeButton:R,avatar:M,list:F,customStyles:E};var vt={title:\"Chip\",description:\"A Chip is a small block of essential information that represent an input, attribute, or action.\"};function W(i){let e={code:\"code\",h1:\"h1\",h2:\"h2\",h3:\"h3\",hr:\"hr\",li:\"li\",p:\"p\",strong:\"strong\",ul:\"ul\",...i.components},{APITable:r,CarbonAd:s,CodeDemo:o,ComponentLinks:l,ImportTabs:h,PackageManagers:d,Spacer:c}=e;return r||a(\"APITable\",!0),s||a(\"CarbonAd\",!0),o||a(\"CodeDemo\",!0),l||a(\"ComponentLinks\",!0),h||a(\"ImportTabs\",!0),d||a(\"PackageManagers\",!0),c||a(\"Spacer\",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h1,{id:\"chip\",children:\"Chip\"}),`\n`,(0,t.jsx)(e.p,{children:\"A Chip is a small block of essential information that represent an input, attribute, or action.\"}),`\n`,(0,t.jsx)(l,{component:\"chip\"}),`\n`,(0,t.jsx)(e.hr,{}),`\n`,(0,t.jsx)(s,{}),`\n`,(0,t.jsx)(e.h2,{id:\"installation\",children:\"Installation\"}),`\n`,(0,t.jsx)(d,{showGlobalInstallWarning:!0,commands:{cli:\"npx heroui-cli@latest add chip\",npm:\"npm install @heroui/chip\",yarn:\"yarn add @heroui/chip\",pnpm:\"pnpm add @heroui/chip\",bun:\"bun add @heroui/chip\"}}),`\n`,(0,t.jsx)(e.h2,{id:\"import\",children:\"Import\"}),`\n`,(0,t.jsx)(h,{commands:{main:'import {Chip} from \"@heroui/react\";',individual:'import {Chip} from \"@heroui/chip\";'}}),`\n`,(0,t.jsx)(e.h2,{id:\"usage\",children:\"Usage\"}),`\n`,(0,t.jsx)(o,{title:\"Usage\",files:n.usage}),`\n`,(0,t.jsx)(e.h3,{id:\"disabled\",children:\"Disabled\"}),`\n`,(0,t.jsx)(o,{title:\"Disabled\",files:n.disabled}),`\n`,(0,t.jsx)(e.h3,{id:\"sizes\",children:\"Sizes\"}),`\n`,(0,t.jsx)(o,{title:\"Sizes\",files:n.sizes}),`\n`,(0,t.jsx)(e.h3,{id:\"colors\",children:\"Colors\"}),`\n`,(0,t.jsx)(o,{title:\"Colors\",files:n.colors}),`\n`,(0,t.jsx)(e.h3,{id:\"radius\",children:\"Radius\"}),`\n`,(0,t.jsx)(o,{title:\"Radius\",files:n.radius}),`\n`,(0,t.jsx)(e.h3,{id:\"variants\",children:\"Variants\"}),`\n`,(0,t.jsx)(o,{title:\"Variants\",files:n.variants}),`\n`,(0,t.jsx)(e.h3,{id:\"start--end-content\",children:\"Start & End Content\"}),`\n`,(0,t.jsx)(o,{title:\"Start & End Content\",files:n.startEndContent}),`\n`,(0,t.jsx)(e.h3,{id:\"with-close-button\",children:\"With Close Button\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"If you pass the \",(0,t.jsx)(e.code,{children:\"onClose\"}),\" prop, the close button will be visible. You can override the close icon by passing the \",(0,t.jsx)(e.code,{children:\"endContent\"}),\" prop.\"]}),`\n`,(0,t.jsx)(o,{title:\"With Close Button\",files:n.closeButton}),`\n`,(0,t.jsx)(e.h3,{id:\"with-avatar\",children:\"With Avatar\"}),`\n`,(0,t.jsx)(o,{title:\"With Avatar\",files:n.avatar}),`\n`,(0,t.jsx)(e.h3,{id:\"list-of-chips\",children:\"List of Chips\"}),`\n`,(0,t.jsx)(o,{title:\"List of Chips\",files:n.list}),`\n`,(0,t.jsx)(e.h2,{id:\"slots\",children:\"Slots\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"base\"}),\": The base slot of the chip, it is the container of the chip.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"content\"}),\": The content slot of the chip, it is the container of the chip children.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"dot\"}),\": Small dot on the left side of the chip. It is visible when the \",(0,t.jsx)(e.code,{children:\"variant=dot\"}),\" prop is passed.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"avatar\"}),\": Avatar classes of the chip. It is visible when the \",(0,t.jsx)(e.code,{children:\"avatar\"}),\" prop is passed.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"closeButton\"}),\": Close button classes of the chip. It is visible when the \",(0,t.jsx)(e.code,{children:\"onClose\"}),\" prop is passed.\"]}),`\n`]}),`\n`,(0,t.jsx)(e.h3,{id:\"custom-styles\",children:\"Custom Styles\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"You can customize the \",(0,t.jsx)(e.code,{children:\"Chip\"}),\" component by passing custom Tailwind CSS classes to the component slots.\"]}),`\n`,(0,t.jsx)(o,{title:\"Custom Styles\",files:n.customStyles}),`\n`,(0,t.jsx)(c,{y:4}),`\n`,(0,t.jsx)(e.h2,{id:\"api\",children:\"API\"}),`\n`,(0,t.jsx)(e.h3,{id:\"chip-props\",children:\"Chip Props\"}),`\n`,(0,t.jsx)(r,{data:[{attribute:\"children\",type:\"ReactNode\",description:\"The content of the chip.\",default:\"-\"},{attribute:\"variant\",type:\"solid | bordered | light | flat | faded | shadow | dot\",description:\"The chip appearance style.\",default:\"solid\"},{attribute:\"color\",type:\"default | primary | secondary | success | warning | danger\",description:\"The color of the chip.\",default:\"default\"},{attribute:\"size\",type:\"sm | md | lg\",description:\"The size of the chip.\",default:\"md\"},{attribute:\"radius\",type:\"none | sm | md | lg | full\",description:\"The radius of the chip.\",default:\"full\"},{attribute:\"avatar\",type:\"ReactNode\",description:\"Avatar to be rendered in the left side of the chip.\",default:\"-\"},{attribute:\"startContent\",type:\"ReactNode\",description:\"Element to be rendered in the left side of the chip. This prop overrides the avatar prop.\",default:\"-\"},{attribute:\"endContent\",type:\"ReactNode\",description:\"Element to be rendered in the right side of the chip. This prop overrides the default close button when onClose is passed.\",default:\"-\"},{attribute:\"isDisabled\",type:\"boolean\",description:\"Whether the chip is disabled.\",default:\"false\"},{attribute:\"classNames\",type:'Partial<Record<\"base\" | \"content\" | \"dot\" | \"avatar\" | \"closeButton\", string>>',description:\"Allows to set custom class names for the chip slots.\",default:\"-\"}]}),`\n`,(0,t.jsx)(e.h3,{id:\"chip-events\",children:\"Chip Events\"}),`\n`,(0,t.jsx)(r,{data:[{attribute:\"onClose\",type:\"(e: PressEvent) => void\",description:\"Handler that is called when the close button is pressed. If you pass this prop, the chip will display a close button (endContent).\",default:\"-\"}]})]})}function P(i={}){let{wrapper:e}=i.components||{};return e?(0,t.jsx)(e,{...i,children:(0,t.jsx)(W,{...i})}):W(i)}function a(i,e){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+i+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return H(gt);})();\n;return Component;"
  },
  "_id": "docs/components/chip.mdx",
  "_raw": {
    "sourceFilePath": "docs/components/chip.mdx",
    "sourceFileName": "chip.mdx",
    "sourceFileDir": "docs/components",
    "contentType": "mdx",
    "flattenedPath": "docs/components/chip"
  },
  "type": "Doc",
  "slug": "/docs/components/chip",
  "slugAsParams": "components/chip",
  "url": "/docs/components/chip"
}