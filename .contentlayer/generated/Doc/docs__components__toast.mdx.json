{
  "title": "Toast",
  "description": "Toast are temporary notifications that provide concise feedback about an action or event.",
  "body": {
    "raw": "\nimport {toastContent} from \"@/content/components/toast\";\n\n# Toast\n\nToasts are temporary notifications that provide concise feedback about an action or event.\n\n<ComponentLinks component=\"toast\" />\n\n---\n\n<CarbonAd />\n\n## Installation\n\n<PackageManagers\n  showGlobalInstallWarning\n  commands={{\n    cli: \"npx heroui-cli@latest add toast\",\n    npm: \"npm install @heroui/toast\",\n    yarn: \"yarn add @heroui/toast\",\n    pnpm: \"pnpm add @heroui/toast\",\n    bun: \"bun add @heroui/toast\",\n  }}\n/>\n\n## Import\n\n<ImportTabs\n  commands={{\n    main: 'import {addToast, ToastProvider} from \"@heroui/react\";',\n    individual: 'import {addToast, ToastProvider} from \"@heroui/toast\";',\n  }}\n/>\n\n## Requirement\n\nThe `ToastProvider` must be added to the application before using the `addToast` function. This is required to initialize the context for managing toasts.\n\n```jsx {4,9}\n// app/providers.tsx\n\nimport {HeroUIProvider} from '@heroui/react'\nimport {ToastProvider} from \"@heroui/toast\";\n\nexport default function Providers({children}) {\n  return (\n    <HeroUIProvider>\n      <ToastProvider />\n      {children}\n    </HeroUIProvider>\n  )\n}\n```\n\n<Spacer y={4} />\n\n```jsx {3,9,11}\n// app/layout.tsx\n\nimport {Providers} from \"./providers\";\n\nexport default function RootLayout({children}) {\n  return (\n    <html lang=\"en\" className='dark'>\n      <body>\n        <Providers>\n          {children}\n        </Providers>\n      </body>\n    </html>\n  );\n}\n```\n\n\n### Usage\n\n<CodeDemo title=\"Usage\" files={toastContent.usage} />\n\n### Colors\n\nToast comes with 6 color variants to convey different meanings.\n\n<CodeDemo title=\"Color\" files={toastContent.color} />\n\n### Variants\n\n<CodeDemo\n  title=\"Variants\"\n  files={toastContent.variants}\n/>\n\n### Radius\n\n<CodeDemo\n  title=\"Radius\"\n  files={toastContent.radius}\n/>\n\n### Toast Placement\n\n<CodeDemo\n  title=\"Placement\"\n  files={toastContent.placement}\n/>\n\n### Custom Styles\n\nYou can customize the alert by passing custom Tailwind CSS classes to the component slots.\n\n<CodeDemo\n  title=\"Custom Style\"\n  files={toastContent.customStyles}\n/>\n\n### Custom Close Icon\n\nYou can pass a custom close icon to the toast by passing the `closeIcon` prop and a custom class name to the `closeButton` slot.\n\n<CodeDemo\n  title=\"Custom Close Icon\"\n  files={toastContent.customCloseIcon}\n/>\n\n### Global Toast Props\n\nYou can pass global toast props to the `ToastProvider` to apply to all toasts.\n\n```jsx\n<ToastProvider \n  toastProps={{\n    radius: \"full\",\n    color: \"primary\",\n    variant: \"flat\",\n    timeout: 1000,\n    hideIcon: true,\n    classNames: {\n      closeButton: \"opacity-100 absolute right-4 top-1/2 -translate-y-1/2\",\n    },\n  }} \n/>\n```\n\n<Spacer y={4} />\n\n## Data Attributes\n\nToast has the following attributes on the `base` element:\n\n- **data-has-title**: When the toast has a title\n- **data-has-description**: When the toast has a description\n- **data-animation**: Shows the current animation of toast (\"entering\", \"queued\", \"exiting\", \"undefined\")\n- **data-placement**: Where the toast is placed on the view-port.\n- **data-drag-value**: Value by which the toast is dragged from it's original position. (This remains \"0\" in case of disabledAnimation)\n\n<Spacer y={4} />\n\n### Slots\n\nToast has the following slots:\n\n- `base`: The main toast container element\n- `title`: The title element\n- `description`: The description element\n- `icon`: The icon element\n- `loadingIcon`: The icon to be displayed until `promise` is resolved/rejected.\n- `content`: The wrapper for the title, description and icon content.\n- `motionDiv`: The motion.div for the FramerMotion.\n- `progressTrack`: The track of the progressBar.\n- `progressIndicator`: The indicator of the progressBar.\n- `closeButton`: The close button element\n- `closeIcon`: The icon which resides in the close button.\n\n\n## Accessibility\n\n- Toast has role of `alert`\n- All Toasts are present in `ToastRegion`.\n- Close button has aria-label=\"Close\" by default\n- When no toast are present, ToastRegion is removed from the DOM\n\n<Spacer y={4} />\n\n## API\n\n### Toast Props\n\n<APITable\n  data={[\n    {\n      attribute: \"title\",\n      type: \"ReactNode\",\n      description: \"The alert title\",\n      default: \"-\"\n    },\n    {\n      attribute: \"icon\", \n      type: \"ReactNode\",\n      description: \"The alert icon - overrides the default icon\",\n      default: \"-\"\n    },\n    {\n      attribute: \"description\",\n      type: \"ReactNode\", \n      description: \"The alert description\",\n      default: \"-\"\n    },\n    {\n      attribute: \"color\",\n      type: \"default | primary | secondary | success | warning | danger\",\n      description: \"The alert color theme\",\n      default: \"default\"\n    },\n    {\n      attribute: \"variant\",\n      type: \"solid | bordered | flat\",\n      description: \"The alert variant\",\n      default: \"flat\"\n    },\n    {\n      attribute: \"radius\",\n      type: \"none | sm | md | lg | full\",\n      description: \"The alert border radius\",\n      default: \"md\"\n    },\n    {\n      attribute: \"endContent\",\n      type: \"ReactNode\",\n      description: \"The alert end content\", \n      default: \"-\"\n    },\n    {\n      attribute: \"closeIcon\",\n      type: \"ReactNode\",\n      description: \"The close icon for the toast - overrides the default close icon\",\n      default: \"-\"\n    },\n    {\n      attribute: \"timeout\",\n      type: \"number\",\n      description: \"Time in milliseconds after which the toast will be closed\", \n      default: \"6000\"\n    },\n    {\n      attribute: \"promise\",\n      type: \"Promise | undefined\",\n      description: \"Promise based on which the notification will be styled\",\n      default: \"undefined\"\n    },\n    {\n      attribute: \"loadingIcon\", \n      type: \"ReactNode\",\n      description: \"The loading icon for toasts with promise prop - overrides the default loading icon\",\n      default: \"-\"\n    },\n    {\n      attribute: \"hideIcon\",\n      type: \"boolean\",\n      description: \"Hides icon when true\",\n      default: \"false\"\n    },\n    {\n      attribute: \"hideCloseButton\",\n      type: \"boolean\",\n      description: \"Hides closeButton when true\",\n      default: \"false\"\n    },\n    {\n      attribute: \"shouldShowTimeoutProgress\",\n      type: \"boolean\",\n      description: \"Whether to indicate the timeout progress or not\",\n      default: \"false\",\n    },\n    {\n      attribute: \"severity\", \n      type: \"default | primary | secondary | success | warning | danger\",\n      description: \"The severity of the toast. This changes the icon of the toast without having to change the color.\",\n      default: \"default\"\n    },\n    {\n      attribute: \"classNames\",\n      type: \"Partial<Record<\\\"base\\\" | \\\"content\\\" | \\\"wrapper\\\" | \\\"title\\\" | \\\"description\\\" | \\\"icon\\\" | \\\"loadingIcon\\\" | \\\"progressTrack\\\" | \\\"progressIndicator\\ | \\\"motionDiv\\\" | \\\"closeButton\\\" | \\\"closeIcon\\\", string>>\",\n      description: \"Allows to set custom class names for the toast slots.\",\n      default: \"-\"\n    }\n  ]}\n/>\n\n### ToastProvider Props\n\n<APITable\n  data={[\n    {\n      attribute: \"maxVisibleToasts\",\n      type: \"number\",\n      description: \"Maximum toasts which will be visible\",\n      default: \"3\"\n    },\n    {\n      attribute: \"placement\", \n      type: \"bottom-right | bottom-left | bottom-center | top-right | top-left | top-center\",\n      description: \"The placement of the toast.\",\n      default: \"bottom-right\"\n    },\n    {\n      attribute: \"disableAnimation\", \n      type: \"boolean\",\n      description: \"Disables the animation.\",\n      default: \"false\"\n    },\n    {\n      attribute: \"toastOffset\",\n      type: \"number\",\n      description: \"offset distance from the top or bottom\",\n      default: \"0\"\n    },\n    {\n      attribute: \"toastProps\",\n      type: \"ToastProps\",\n      description: \"Props to be passed to all toasts\",\n      default: \"-\"\n    },\n    {\n      attribute: \"regionProps\",\n      type: \"ToastRegionProps\",\n      description: \"Props to be passed to toast region\",\n      default: \"-\"\n    },\n  ]}\n/>\n\n### ToastRegion Props\n\n<APITable\n  data={[\n    {\n      attribute: \"classNames\",\n      type: \"Partial<Record<\\\"base\\\", string>>\",\n      description: \"Allows to set custom class names for the toast region slots.\",\n      default: \"-\"\n    }\n  ]}\n/>\n\n### Toast Events\n\n<APITable\n  data={[\n    {\n      attribute: \"onClose\",\n      type: \"() => void\",\n      description: \"Handler called when the close button is clicked\",\n      default: \"-\"\n    }\n  ]}\n/>",
    "code": "var Component=(()=>{var R=Object.create;var d=Object.defineProperty;var j=Object.getOwnPropertyDescriptor;var L=Object.getOwnPropertyNames;var M=Object.getPrototypeOf,W=Object.prototype.hasOwnProperty;var _=(o,e)=>()=>(e||o((e={exports:{}}).exports,e),e.exports),z=(o,e)=>{for(var n in e)d(o,n,{get:e[n],enumerable:!0})},h=(o,e,n,s)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of L(e))!W.call(o,i)&&i!==n&&d(o,i,{get:()=>e[i],enumerable:!(s=j(e,i))||s.enumerable});return o};var H=(o,e,n)=>(n=o!=null?R(M(o)):{},h(e||!o||!o.__esModule?d(n,\"default\",{value:o,enumerable:!0}):n,o)),U=o=>h(d({},\"__esModule\",{value:!0}),o);var f=_((it,m)=>{m.exports=_jsx_runtime});var ot={};z(ot,{default:()=>D,frontmatter:()=>et});var t=H(f());var T=`import {addToast, Button} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <div className=\"flex flex-wrap gap-2\">\n      {[\"Default\", \"Primary\", \"Secondary\", \"Success\", \"Warning\", \"Danger\"].map((color) => (\n        <Button\n          key={color}\n          color={color.toLowerCase()}\n          variant={\"flat\"}\n          onPress={() =>\n            addToast({\n              title: \"Toast title\",\n              description: \"Toast displayed successfully\",\n              color: color.toLowerCase(),\n            })\n          }\n        >\n          {color}\n        </Button>\n      ))}\n    </div>\n  );\n}\n`;var V={\"/App.jsx\":T},g={...V};var b=`import {addToast, Button} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <div className=\"flex flex-wrap gap-2\">\n      {[\n        [\"Solid\", \"solid\"],\n        [\"Bordered\", \"bordered\"],\n        [\"Flat\", \"faded\"],\n      ].map((variant) => (\n        <Button\n          key={variant[0]}\n          // @ts-ignore\n          variant={variant[1]}\n          onPress={() =>\n            addToast({\n              title: \"Toast title\",\n              description: \"Toast displayed successfully\",\n              // @ts-ignore\n              variant: variant[0].toLowerCase(),\n              color: \"secondary\",\n            })\n          }\n        >\n          {variant[0]}\n        </Button>\n      ))}\n    </div>\n  );\n}\n`;var E={\"/App.jsx\":b},v={...E};var y=`import {addToast, Button, cn} from \"@heroui/react\";\n\nconst CustomToastComponent = () => {\n  return (\n    <Button\n      variant=\"flat\"\n      onPress={() => {\n        addToast({\n          title: \"Successfull!\",\n          description: \"Document uploaded to cloud successfully.\",\n          classNames: {\n            base: cn([\n              \"bg-default-50 dark:bg-background shadow-sm\",\n              \"border border-l-8 rounded-md rounded-l-none\",\n              \"flex flex-col items-start\",\n              \"border-primary-200 dark:border-primary-100 border-l-primary\",\n            ]),\n            icon: \"w-6 h-6 fill-current\",\n          },\n          endContent: (\n            <div className=\"ms-11 my-2 flex gap-x-2\">\n              <Button color={\"primary\"} size=\"sm\" variant=\"bordered\">\n                View Document\n              </Button>\n              <Button className=\"underline-offset-2\" color={\"primary\"} size=\"sm\" variant=\"light\">\n                Maybe Later\n              </Button>\n            </div>\n          ),\n          color: \"primary\",\n        });\n      }}\n    >\n      Show Toast\n    </Button>\n  );\n};\n\nexport default function App() {\n  return (\n    <div className=\"flex gap-2\">\n      <CustomToastComponent />\n    </div>\n  );\n}\n`;var Y={\"/App.jsx\":y},x={...Y};var P=`import {addToast, Button} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <div className=\"flex flex-wrap gap-2\">\n      {[\n        [\"None\", \"none\"],\n        [\"Small\", \"sm\"],\n        [\"Medium\", \"md\"],\n        [\"Large\", \"lg\"],\n        [\"Full\", \"full\"],\n      ].map((radius) => (\n        <Button\n          key={radius[1]}\n          radius={radius[1]}\n          variant={\"flat\"}\n          onPress={() =>\n            addToast({\n              title: \"Toast title\",\n              description: \"Toast displayed successfully\",\n              radius: radius[1],\n            })\n          }\n        >\n          {radius[0]}\n        </Button>\n      ))}\n    </div>\n  );\n}\n`;var X={\"/App.jsx\":P},B={...X};var w=`import {addToast, ToastProvider, Button} from \"@heroui/react\";\nimport React from \"react\";\n\nexport default function App() {\n  const [placement, setPlacement] = React.useState(\"bottom-right\");\n\n  return (\n    <>\n      <ToastProvider placement={placement} toastOffset={placement.includes(\"top\") ? 60 : 0} />\n      <div className=\"flex flex-wrap gap-2\">\n        {[\n          [\"Top Left\", \"top-left\"],\n          [\"Top Center\", \"top-center\"],\n          [\"Top Right\", \"top-right\"],\n          [\"Bottom Left\", \"bottom-left\"],\n          [\"Bottom Center\", \"bottom-center\"],\n          [\"Bottom Right\", \"bottom-right\"],\n        ].map((position) => (\n          <Button\n            key={position[1]}\n            variant={\"flat\"}\n            onPress={() => {\n              setPlacement(position[1]);\n              addToast({\n                title: \"Toast title\",\n                description: \"Toast displayed successfully\",\n              });\n            }}\n          >\n            {position[0]}\n          </Button>\n        ))}\n      </div>\n    </>\n  );\n}\n`;var K={\"/App.jsx\":w},C={...K};var A=`import {addToast, Button} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <div className=\"flex flex-wrap gap-2\">\n      <Button\n        variant=\"flat\"\n        onPress={() => {\n          addToast({\n            title: \"Toast Title\",\n          });\n        }}\n      >\n        Default\n      </Button>\n\n      <Button\n        variant=\"flat\"\n        onPress={() => {\n          addToast({\n            title: \"Toast Title\",\n            description: \"Toast Description\",\n          });\n        }}\n      >\n        With Description\n      </Button>\n\n      <Button\n        variant=\"flat\"\n        onPress={() => {\n          addToast({\n            title: \"Toast Title\",\n            description: \"Toast Description\",\n            hideIcon: true,\n          });\n        }}\n      >\n        Hidden Icon\n      </Button>\n\n      <Button\n        variant=\"flat\"\n        onPress={() => {\n          addToast({\n            title: \"Toast Title\",\n            description: \"Toast Description\",\n            promise: new Promise((resolve) => setTimeout(resolve, 3000)),\n          });\n        }}\n      >\n        Promise (3000ms)\n      </Button>\n\n      <Button\n        variant=\"flat\"\n        onPress={() => {\n          addToast({\n            title: \"Toast Title\",\n            description: \"Toast Description\",\n            endContent: (\n              <Button size=\"sm\" variant=\"flat\">\n                Upgrade\n              </Button>\n            ),\n          });\n        }}\n      >\n        With endContent\n      </Button>\n\n      <Button\n        variant=\"flat\"\n        onPress={() => {\n          addToast({\n            title: \"Toast Title\",\n            description: \"Toast Description\",\n            timeout: 3000,\n            shouldShowTimeoutProgress: true,\n          });\n        }}\n      >\n        Show Timeout Progress (3000ms)\n      </Button>\n\n      <Button\n        variant=\"flat\"\n        onPress={() =>\n          addToast({\n            title: \"Toast title\",\n            description: \"Toast displayed successfully\",\n            icon: (\n              <svg height={24} viewBox=\"0 0 24 24\" width={24}>\n                <g\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeMiterlimit={10}\n                  strokeWidth={1.5}\n                >\n                  <path\n                    d=\"M11.845 21.662C8.153 21.662 5 21.088 5 18.787s3.133-4.425 6.845-4.425c3.692 0 6.845 2.1 6.845 4.4s-3.134 2.9-6.845 2.9z\"\n                    data-name=\"Stroke 1\"\n                  />\n                  <path d=\"M11.837 11.174a4.372 4.372 0 10-.031 0z\" data-name=\"Stroke 3\" />\n                </g>\n              </svg>\n            ),\n          })\n        }\n      >\n        Custom Icon\n      </Button>\n    </div>\n  );\n}\n`;var Z={\"/App.jsx\":A},I={...Z};var k=`import {addToast, Button} from \"@heroui/react\";\n\nconst CustomToastComponent = () => {\n  return (\n    <Button\n      variant=\"flat\"\n      onPress={() => {\n        addToast({\n          hideIcon: true,\n          title: \"Toast Title\",\n          description: \"Toast Description\",\n          classNames: {\n            closeButton: \"opacity-100 absolute right-4 top-1/2 -translate-y-1/2\",\n          },\n          closeIcon: (\n            <svg\n              fill=\"none\"\n              height=\"32\"\n              stroke=\"currentColor\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth=\"2\"\n              viewBox=\"0 0 24 24\"\n              width=\"32\"\n            >\n              <path d=\"M18 6 6 18\" />\n              <path d=\"m6 6 12 12\" />\n            </svg>\n          ),\n        });\n      }}\n    >\n      Show Toast\n    </Button>\n  );\n};\n\nexport default function App() {\n  return (\n    <div className=\"flex gap-2\">\n      <CustomToastComponent />\n    </div>\n  );\n}\n`;var tt={\"/App.jsx\":k},N={...tt};var r={color:g,variants:v,customStyles:x,radius:B,placement:C,usage:I,customCloseIcon:N};var et={title:\"Toast\",description:\"Toast are temporary notifications that provide concise feedback about an action or event.\"};function S(o){let e={code:\"code\",h1:\"h1\",h2:\"h2\",h3:\"h3\",hr:\"hr\",li:\"li\",p:\"p\",pre:\"pre\",strong:\"strong\",ul:\"ul\",...o.components},{APITable:n,CarbonAd:s,CodeDemo:i,ComponentLinks:c,ImportTabs:p,PackageManagers:u,Spacer:l}=e;return n||a(\"APITable\",!0),s||a(\"CarbonAd\",!0),i||a(\"CodeDemo\",!0),c||a(\"ComponentLinks\",!0),p||a(\"ImportTabs\",!0),u||a(\"PackageManagers\",!0),l||a(\"Spacer\",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h1,{id:\"toast\",children:\"Toast\"}),`\n`,(0,t.jsx)(e.p,{children:\"Toasts are temporary notifications that provide concise feedback about an action or event.\"}),`\n`,(0,t.jsx)(c,{component:\"toast\"}),`\n`,(0,t.jsx)(e.hr,{}),`\n`,(0,t.jsx)(s,{}),`\n`,(0,t.jsx)(e.h2,{id:\"installation\",children:\"Installation\"}),`\n`,(0,t.jsx)(u,{showGlobalInstallWarning:!0,commands:{cli:\"npx heroui-cli@latest add toast\",npm:\"npm install @heroui/toast\",yarn:\"yarn add @heroui/toast\",pnpm:\"pnpm add @heroui/toast\",bun:\"bun add @heroui/toast\"}}),`\n`,(0,t.jsx)(e.h2,{id:\"import\",children:\"Import\"}),`\n`,(0,t.jsx)(p,{commands:{main:'import {addToast, ToastProvider} from \"@heroui/react\";',individual:'import {addToast, ToastProvider} from \"@heroui/toast\";'}}),`\n`,(0,t.jsx)(e.h2,{id:\"requirement\",children:\"Requirement\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"The \",(0,t.jsx)(e.code,{children:\"ToastProvider\"}),\" must be added to the application before using the \",(0,t.jsx)(e.code,{children:\"addToast\"}),\" function. This is required to initialize the context for managing toasts.\"]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-jsx\",meta:\"{4,9}\",children:`// app/providers.tsx\n\nimport {HeroUIProvider} from '@heroui/react'\nimport {ToastProvider} from \"@heroui/toast\";\n\nexport default function Providers({children}) {\n  return (\n    <HeroUIProvider>\n      <ToastProvider />\n      {children}\n    </HeroUIProvider>\n  )\n}\n`})}),`\n`,(0,t.jsx)(l,{y:4}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-jsx\",meta:\"{3,9,11}\",children:`// app/layout.tsx\n\nimport {Providers} from \"./providers\";\n\nexport default function RootLayout({children}) {\n  return (\n    <html lang=\"en\" className='dark'>\n      <body>\n        <Providers>\n          {children}\n        </Providers>\n      </body>\n    </html>\n  );\n}\n`})}),`\n`,(0,t.jsx)(e.h3,{id:\"usage\",children:\"Usage\"}),`\n`,(0,t.jsx)(i,{title:\"Usage\",files:r.usage}),`\n`,(0,t.jsx)(e.h3,{id:\"colors\",children:\"Colors\"}),`\n`,(0,t.jsx)(e.p,{children:\"Toast comes with 6 color variants to convey different meanings.\"}),`\n`,(0,t.jsx)(i,{title:\"Color\",files:r.color}),`\n`,(0,t.jsx)(e.h3,{id:\"variants\",children:\"Variants\"}),`\n`,(0,t.jsx)(i,{title:\"Variants\",files:r.variants}),`\n`,(0,t.jsx)(e.h3,{id:\"radius\",children:\"Radius\"}),`\n`,(0,t.jsx)(i,{title:\"Radius\",files:r.radius}),`\n`,(0,t.jsx)(e.h3,{id:\"toast-placement\",children:\"Toast Placement\"}),`\n`,(0,t.jsx)(i,{title:\"Placement\",files:r.placement}),`\n`,(0,t.jsx)(e.h3,{id:\"custom-styles\",children:\"Custom Styles\"}),`\n`,(0,t.jsx)(e.p,{children:\"You can customize the alert by passing custom Tailwind CSS classes to the component slots.\"}),`\n`,(0,t.jsx)(i,{title:\"Custom Style\",files:r.customStyles}),`\n`,(0,t.jsx)(e.h3,{id:\"custom-close-icon\",children:\"Custom Close Icon\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"You can pass a custom close icon to the toast by passing the \",(0,t.jsx)(e.code,{children:\"closeIcon\"}),\" prop and a custom class name to the \",(0,t.jsx)(e.code,{children:\"closeButton\"}),\" slot.\"]}),`\n`,(0,t.jsx)(i,{title:\"Custom Close Icon\",files:r.customCloseIcon}),`\n`,(0,t.jsx)(e.h3,{id:\"global-toast-props\",children:\"Global Toast Props\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"You can pass global toast props to the \",(0,t.jsx)(e.code,{children:\"ToastProvider\"}),\" to apply to all toasts.\"]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-jsx\",children:`<ToastProvider \n  toastProps={{\n    radius: \"full\",\n    color: \"primary\",\n    variant: \"flat\",\n    timeout: 1000,\n    hideIcon: true,\n    classNames: {\n      closeButton: \"opacity-100 absolute right-4 top-1/2 -translate-y-1/2\",\n    },\n  }} \n/>\n`})}),`\n`,(0,t.jsx)(l,{y:4}),`\n`,(0,t.jsx)(e.h2,{id:\"data-attributes\",children:\"Data Attributes\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"Toast has the following attributes on the \",(0,t.jsx)(e.code,{children:\"base\"}),\" element:\"]}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"data-has-title\"}),\": When the toast has a title\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"data-has-description\"}),\": When the toast has a description\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"data-animation\"}),': Shows the current animation of toast (\"entering\", \"queued\", \"exiting\", \"undefined\")']}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"data-placement\"}),\": Where the toast is placed on the view-port.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"data-drag-value\"}),`: Value by which the toast is dragged from it's original position. (This remains \"0\" in case of disabledAnimation)`]}),`\n`]}),`\n`,(0,t.jsx)(l,{y:4}),`\n`,(0,t.jsx)(e.h3,{id:\"slots\",children:\"Slots\"}),`\n`,(0,t.jsx)(e.p,{children:\"Toast has the following slots:\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"base\"}),\": The main toast container element\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"title\"}),\": The title element\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"description\"}),\": The description element\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"icon\"}),\": The icon element\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"loadingIcon\"}),\": The icon to be displayed until \",(0,t.jsx)(e.code,{children:\"promise\"}),\" is resolved/rejected.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"content\"}),\": The wrapper for the title, description and icon content.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"motionDiv\"}),\": The motion.div for the FramerMotion.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"progressTrack\"}),\": The track of the progressBar.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"progressIndicator\"}),\": The indicator of the progressBar.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"closeButton\"}),\": The close button element\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"closeIcon\"}),\": The icon which resides in the close button.\"]}),`\n`]}),`\n`,(0,t.jsx)(e.h2,{id:\"accessibility\",children:\"Accessibility\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[\"Toast has role of \",(0,t.jsx)(e.code,{children:\"alert\"})]}),`\n`,(0,t.jsxs)(e.li,{children:[\"All Toasts are present in \",(0,t.jsx)(e.code,{children:\"ToastRegion\"}),\".\"]}),`\n`,(0,t.jsx)(e.li,{children:'Close button has aria-label=\"Close\" by default'}),`\n`,(0,t.jsx)(e.li,{children:\"When no toast are present, ToastRegion is removed from the DOM\"}),`\n`]}),`\n`,(0,t.jsx)(l,{y:4}),`\n`,(0,t.jsx)(e.h2,{id:\"api\",children:\"API\"}),`\n`,(0,t.jsx)(e.h3,{id:\"toast-props\",children:\"Toast Props\"}),`\n`,(0,t.jsx)(n,{data:[{attribute:\"title\",type:\"ReactNode\",description:\"The alert title\",default:\"-\"},{attribute:\"icon\",type:\"ReactNode\",description:\"The alert icon - overrides the default icon\",default:\"-\"},{attribute:\"description\",type:\"ReactNode\",description:\"The alert description\",default:\"-\"},{attribute:\"color\",type:\"default | primary | secondary | success | warning | danger\",description:\"The alert color theme\",default:\"default\"},{attribute:\"variant\",type:\"solid | bordered | flat\",description:\"The alert variant\",default:\"flat\"},{attribute:\"radius\",type:\"none | sm | md | lg | full\",description:\"The alert border radius\",default:\"md\"},{attribute:\"endContent\",type:\"ReactNode\",description:\"The alert end content\",default:\"-\"},{attribute:\"closeIcon\",type:\"ReactNode\",description:\"The close icon for the toast - overrides the default close icon\",default:\"-\"},{attribute:\"timeout\",type:\"number\",description:\"Time in milliseconds after which the toast will be closed\",default:\"6000\"},{attribute:\"promise\",type:\"Promise | undefined\",description:\"Promise based on which the notification will be styled\",default:\"undefined\"},{attribute:\"loadingIcon\",type:\"ReactNode\",description:\"The loading icon for toasts with promise prop - overrides the default loading icon\",default:\"-\"},{attribute:\"hideIcon\",type:\"boolean\",description:\"Hides icon when true\",default:\"false\"},{attribute:\"hideCloseButton\",type:\"boolean\",description:\"Hides closeButton when true\",default:\"false\"},{attribute:\"shouldShowTimeoutProgress\",type:\"boolean\",description:\"Whether to indicate the timeout progress or not\",default:\"false\"},{attribute:\"severity\",type:\"default | primary | secondary | success | warning | danger\",description:\"The severity of the toast. This changes the icon of the toast without having to change the color.\",default:\"default\"},{attribute:\"classNames\",type:'Partial<Record<\"base\" | \"content\" | \"wrapper\" | \"title\" | \"description\" | \"icon\" | \"loadingIcon\" | \"progressTrack\" | \"progressIndicator | \"motionDiv\" | \"closeButton\" | \"closeIcon\", string>>',description:\"Allows to set custom class names for the toast slots.\",default:\"-\"}]}),`\n`,(0,t.jsx)(e.h3,{id:\"toastprovider-props\",children:\"ToastProvider Props\"}),`\n`,(0,t.jsx)(n,{data:[{attribute:\"maxVisibleToasts\",type:\"number\",description:\"Maximum toasts which will be visible\",default:\"3\"},{attribute:\"placement\",type:\"bottom-right | bottom-left | bottom-center | top-right | top-left | top-center\",description:\"The placement of the toast.\",default:\"bottom-right\"},{attribute:\"disableAnimation\",type:\"boolean\",description:\"Disables the animation.\",default:\"false\"},{attribute:\"toastOffset\",type:\"number\",description:\"offset distance from the top or bottom\",default:\"0\"},{attribute:\"toastProps\",type:\"ToastProps\",description:\"Props to be passed to all toasts\",default:\"-\"},{attribute:\"regionProps\",type:\"ToastRegionProps\",description:\"Props to be passed to toast region\",default:\"-\"}]}),`\n`,(0,t.jsx)(e.h3,{id:\"toastregion-props\",children:\"ToastRegion Props\"}),`\n`,(0,t.jsx)(n,{data:[{attribute:\"classNames\",type:'Partial<Record<\"base\", string>>',description:\"Allows to set custom class names for the toast region slots.\",default:\"-\"}]}),`\n`,(0,t.jsx)(e.h3,{id:\"toast-events\",children:\"Toast Events\"}),`\n`,(0,t.jsx)(n,{data:[{attribute:\"onClose\",type:\"() => void\",description:\"Handler called when the close button is clicked\",default:\"-\"}]})]})}function D(o={}){let{wrapper:e}=o.components||{};return e?(0,t.jsx)(e,{...o,children:(0,t.jsx)(S,{...o})}):S(o)}function a(o,e){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+o+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return U(ot);})();\n;return Component;"
  },
  "_id": "docs/components/toast.mdx",
  "_raw": {
    "sourceFilePath": "docs/components/toast.mdx",
    "sourceFileName": "toast.mdx",
    "sourceFileDir": "docs/components",
    "contentType": "mdx",
    "flattenedPath": "docs/components/toast"
  },
  "type": "Doc",
  "slug": "/docs/components/toast",
  "slugAsParams": "components/toast",
  "url": "/docs/components/toast"
}