{
  "title": "Routing",
  "description": "Learn how to integrate client side routing into your HeroUI application.",
  "body": {
    "raw": "\n# Routing\n\nHeroUI Components such as [Tabs](/docs/components/tabs), [Listbox](/docs/components/listbox), [Dropdown](/docs/components/dropdown) and many others offer\nthe flexibility to be rendered as **HTML links**.\n\n<CarbonAd />\n\n## Introduction\n\nBy default, links perform native browser navigation when they are interacted with. However, many apps and\nframeworks use client side routers to avoid a full page reload when navigating between pages.\n\nThe `HeroUIProvider` component configures all HeroUI components within it to navigate using the client side\nrouter you provide.\n\nSet this up once in the `root` of your app, and any HeroUI component with the `href` prop will automatically navigate\nusing your router.\n\n## HeroUIProvider Setup\n\nThe `HeroUIProvider` component accepts `navigate` and `useHref` props. `navigate` is a router function for client-side\nnavigation, while `useHref` optionally converts router hrefs to native HTML hrefs. Here's the pattern:\n\n```jsx\nimport * as React from \"react\";\n\nimport {HeroUIProvider} from \"@heroui/react\";\nimport {useNavigate, useHref} from \"your-router\";\n\nfunction App() {\n  const navigate = useNavigate();\n\n  return (\n    <HeroUIProvider navigate={navigate} useHref={useHref}>\n      <YourApplication />\n    </HeroUIProvider>\n  );\n}\n```\n\n<Spacer y={2} />\n\n> **Note**: Framework-specific examples are shown below.\n\n### Router Options\n\nAll `HeroUI` link components accept a `routerOptions` prop that passes options to the router's navigate function for\ncontrolling behavior like scrolling and history navigation.\n\n```jsx\n<DropdownItem href=\"/login\" routerOptions={{replace: true}}>\n  {/* ...*/}\n</DropdownItem>\n```\n\nWhen using TypeScript, you can configure the RouterConfig type globally so that all link components have auto\ncomplete and type safety using a type provided by your router.\n\n```tsx\nimport type {RouterOptions} from \"your-router\";\n\ndeclare module \"@react-types/shared\" {\n  interface RouterConfig {\n    routerOptions: RouterOptions;\n  }\n}\n```\n\n<Spacer y={2} />\n\n## Next.js\n\n#### App Router\n\nGo to your `app/providers.tsx` or `app/providers.jsx` (create it if it doesn't exist) and add the\n`useRouter` hook from `next/navigation`, it returns a router object that can be used to perform navigation.\n\n> Check the [Next.js docs](https://nextjs.org/docs/app/api-reference/functions/use-router) for more details.\n\n<Steps>\n\n#### Add the `useRouter`\n\n```tsx {15}\n// app/providers.tsx\n\"use client\";\n\nimport {useRouter} from \"next/navigation\";\nimport {HeroUIProvider} from \"@heroui/react\";\n\n// Only if using TypeScript\ndeclare module \"@react-types/shared\" {\n  interface RouterConfig {\n    routerOptions: NonNullable<Parameters<ReturnType<typeof useRouter>[\"push\"]>[1]>;\n  }\n}\n\nexport function Providers({children}: {children: React.ReactNode}) {\n  const router = useRouter();\n\n  return <HeroUIProvider navigate={router.push}>{children}</HeroUIProvider>;\n}\n```\n\n#### Add Provider to Root\n\nNow, Go to your `root` layout page and wrap it with the `HeroUIProvider`:\n\n```tsx {8}\n// app/layout.tsx\nimport {Providers} from \"./providers\";\n\nexport default function RootLayout({children}: {children: React.ReactNode}) {\n  return (\n    <html lang=\"en\" className=\"dark\">\n      <body>\n        <Providers>{children}</Providers>\n      </body>\n    </html>\n  );\n}\n```\n\n> **Note**: Skip this step if you already set up the `HeroUIProvider` in your app.\n\n#### Next.js Base Path (Optional)\n\nIf you are using the Next.js [basePath](https://nextjs.org/docs/app/api-reference/next-config-js/basePath) setting,\nyou'll need to configure an environment variable to access it.\n\n```js\n// next.config.js\nconst basePath = \"...\";\nconst nextConfig = {\n  basePath,\n  env: {\n    BASE_PATH: basePath,\n  },\n};\n```\n\nThen, provide a custom `useHref` function to prepend it to the href for all links.\n\n```tsx {9,12}\n// app/providers.tsx\n\"use client\";\n\nimport {useRouter} from \"next/navigation\";\nimport {HeroUIProvider} from \"@heroui/react\";\n\nexport function Providers({children}: {children: React.ReactNode}) {\n  const router = useRouter();\n  const useHref = (href: string) => process.env.BASE_PATH + href;\n\n  return (\n    <HeroUIProvider navigate={router.push} useHref={useHref}>\n      {children}\n    </HeroUIProvider>\n  );\n}\n```\n\n</Steps>\n\n### Pages Router\n\nGo to pages`/_app.js` or `pages/_app.tsx` (create it if it doesn't exist) and add the`useRouter` hook\nfrom `next/router`, it returns a router object that can be used to perform navigation.\n\n```tsx\n// pages/_app.tsx\nimport type {AppProps} from \"next/app\";\nimport {type NextRouter, useRouter} from \"next/router\";\nimport {HeroUIProvider} from \"@heroui/react\";\n\ndeclare module \"@react-types/shared\" {\n  interface RouterConfig {\n    routerOptions: NonNullable<\n      Parameters<NextRouter['push']>[2]\n    >;\n  }\n}\n\nfunction MyApp({Component, pageProps}: AppProps) {\n  const router = useRouter();\n\n  return (\n    <HeroUIProvider navigate={router.push}>\n      <Component {...pageProps} />\n    </HeroUIProvider>\n  );\n}\n\nexport default MyApp;\n```\n\nWhen using the [basePath](https://nextjs.org/docs/app/api-reference/next-config-js/basePath) configuration option, \nprovide a `useHref` option to the router passed to Provider to prepend it to links automatically.\n\n```tsx {8}\n// pages/_app.tsx\nimport type {AppProps} from \"next/app\";\nimport {HeroUIProvider} from \"@heroui/react\";\nimport {useRouter} from \"next/router\";\n\nfunction MyApp({Component, pageProps}: AppProps) {\n  const router = useRouter();\n  const useHref = (href: string) => router.basePath + href;\n\n  return (\n    <HeroUIProvider navigate={router.push} useHref={useHref}>\n      <Component {...pageProps} />\n    </HeroUIProvider>\n  );\n}\n\nexport default MyApp;\n```\n\n## React Router\n\nUse the `useNavigate` hook from `react-router-dom` to get the `navigate` function for routing. The `useHref` hook can be used with React Router's `basename` option.\n\nMake sure to place the component using these hooks inside `BrowserRouter` and keep `<Routes>` within `HeroUIProvider`. Here's how to set it up in your App component:\n\n```tsx\n// App.tsx or App.jsx\nimport type {NavigateOptions} from \"react-router-dom\";\n\nimport {BrowserRouter, useNavigate, useHref} from \"react-router-dom\";\nimport {HeroUIProvider} from \"@heroui/react\";\n\ndeclare module \"@react-types/shared\" {\n  interface RouterConfig {\n    routerOptions: NavigateOptions;\n  }\n}\n\nfunction App() {\n  const navigate = useNavigate();\n\n  return (\n    <HeroUIProvider navigate={navigate} useHref={useHref}>\n      {/* Your app here... */}\n      <Routes>\n        <Route path=\"/\" element={<HomePage />} />\n        {/* ... */}\n      </Routes>\n    </HeroUIProvider>\n  );\n}\n\n// main.tsx or main.jsx\nReactDOM.createRoot(document.getElementById(\"root\")).render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n);\n```\n\nEnsure that the component that calls `useNavigate` and renders `HeroUIProvider` is inside the router\ncomponent (e.g. `BrowserRouter`) so that it has access to React Router's internal context. The React Router `<Routes>`\nelement should also be defined inside `HeroUIProvider` so that links inside the rendered routes have access\nto the router.\n\n## Remix\n\nRemix uses React Router under the hood, so the same `useNavigate` and `useHref` hook described above also works in Remix\napps. `HeroUIProvider` should be rendered at the `root` of each page that includes HeroUI components, or in\n`app/root.tsx` to add it to all pages. See the [Remix docs](https://remix.run/docs/en/main/file-conventions/root)\nfor more details.\n\n```tsx\n// app/root.tsx\nimport type {NavigateOptions} from 'react-router-dom';\n\nimport {useNavigate, useHref, Outlet} from \"@remix-run/react\";\nimport {HeroUIProvider} from \"@heroui/react\";\n\ndeclare module \"@react-types/shared\" {\n  interface RouterConfig {\n    routerOptions: NavigateOptions;\n  }\n}\n\nexport default function App() {\n  const navigate = useNavigate();\n\n  return (\n    <html lang=\"en\">\n      <head>{/* ... */}</head>\n      <body>\n        <HeroUIProvider navigate={navigate} useHref={useHref}>\n          <Outlet />\n        </HeroUIProvider>\n        {/* ... */}\n      </body>\n    </html>\n  );\n}\n```\n\n## TanStack\n\nTo use [TanStack Router](https://tanstack.com/router/latest) with HeroUI, render HeroUI's RouterProvider inside your root route. \nUse `router.navigate` in the `navigate` prop, and `router.buildLocation` in the `useHref` prop.\n\n```tsx\n// app/root.tsx\nimport type {NavigateOptions, ToOptions} from '@tanstack/react-router';\n\nimport {useRouter} from '@tanstack/react-router';\nimport {HeroUIProvider} from \"@heroui/react\";\n\n\ndeclare module \"@react-types/shared\" {\n  interface RouterConfig {\n    href: ToOptions['to'];\n    routerOptions: Omit<NavigateOptions, keyof ToOptions>;\n  }\n}\n\nfunction RootRoute() {\n  let router = useRouter();\n\n  return (\n    <HeroUIProvider\n      navigate={(to, options) => router.navigate({to, ...options})}\n      useHref={(to) => router.buildLocation({to}).href}\n    >\n      {/* You app here... */}\n    </HeroUIProvider>\n  );\n}\n```\n\n## Usage examples\n\nNow that you have set up the `HeroUIProvider` in your app, you can use the `href` prop in the `Tabs`,\n`Listbox` and `Dropdown` items to navigate between pages.\n\nThe [Link](/docs/components/link) component will also use the `navigate` function from the\n`HeroUIProvider` to navigate between pages.\n\n```jsx\nimport {\n  Tabs,\n  Tab,\n  Listbox,\n  ListboxItem,\n  Dropdown,\n  DropdownTrigger,\n  DropdownMenu,\n  DropdownItem,\n  Button,\n  Link,\n} from \"@heroui/react\";\n\nfunction App() {\n  return (\n    <>\n      <Tabs aria-label=\"Navigation\">\n        <Tab key=\"home\" href=\"/home\">\n          Home\n        </Tab>\n        <Tab key=\"about\" href=\"/about\">\n          About\n        </Tab>\n      </Tabs>\n      <Listbox aria-label=\"Navigation\">\n        <ListboxItem key=\"home\" href=\"/home\">\n          Home\n        </ListboxItem>\n        <ListboxItem key=\"about\" href=\"/about\">\n          About\n        </ListboxItem>\n      </Listbox>\n      <Dropdown>\n        <DropdownTrigger>\n          <Button>Open</Button>\n        </DropdownTrigger>\n        <DropdownMenu aria-label=\"Navigation\">\n          <DropdownItem key=\"home\" href=\"/home\">\n            Home\n          </DropdownItem>\n          <DropdownItem key=\"about\" href=\"/about\">\n            About\n          </DropdownItem>\n        </DropdownMenu>\n      </Dropdown>\n      <Link href=\"/home\">Home</Link>\n      <Link href=\"/about\">About</Link>\n    </>\n  );\n}\n```\n\n<Spacer y={2} />\n\n> For more information about routing in React Aria, visit the [React Aria Routing Guide](https://react-spectrum.adobe.com/react-aria/routing.html).\n",
    "code": "var Component=(()=>{var l=Object.create;var a=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,v=Object.prototype.hasOwnProperty;var x=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),b=(r,e)=>{for(var o in e)a(r,o,{get:e[o],enumerable:!0})},c=(r,e,o,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let t of f(e))!v.call(r,t)&&t!==o&&a(r,t,{get:()=>e[t],enumerable:!(i=m(e,t))||i.enumerable});return r};var y=(r,e,o)=>(o=r!=null?l(g(r)):{},c(e||!r||!r.__esModule?a(o,\"default\",{value:r,enumerable:!0}):o,r)),H=r=>c(a({},\"__esModule\",{value:!0}),r);var p=x((w,s)=>{s.exports=_jsx_runtime});var P={};b(P,{default:()=>u,frontmatter:()=>R});var n=y(p()),R={title:\"Routing\",description:\"Learn how to integrate client side routing into your HeroUI application.\"};function h(r){let e={a:\"a\",blockquote:\"blockquote\",code:\"code\",h1:\"h1\",h2:\"h2\",h3:\"h3\",h4:\"h4\",p:\"p\",pre:\"pre\",strong:\"strong\",...r.components},{CarbonAd:o,Spacer:i,Steps:t}=e;return o||d(\"CarbonAd\",!0),i||d(\"Spacer\",!0),t||d(\"Steps\",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h1,{id:\"routing\",children:\"Routing\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"HeroUI Components such as \",(0,n.jsx)(e.a,{href:\"/docs/components/tabs\",children:\"Tabs\"}),\", \",(0,n.jsx)(e.a,{href:\"/docs/components/listbox\",children:\"Listbox\"}),\", \",(0,n.jsx)(e.a,{href:\"/docs/components/dropdown\",children:\"Dropdown\"}),` and many others offer\nthe flexibility to be rendered as `,(0,n.jsx)(e.strong,{children:\"HTML links\"}),\".\"]}),`\n`,(0,n.jsx)(o,{}),`\n`,(0,n.jsx)(e.h2,{id:\"introduction\",children:\"Introduction\"}),`\n`,(0,n.jsx)(e.p,{children:`By default, links perform native browser navigation when they are interacted with. However, many apps and\nframeworks use client side routers to avoid a full page reload when navigating between pages.`}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"HeroUIProvider\"}),` component configures all HeroUI components within it to navigate using the client side\nrouter you provide.`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Set this up once in the \",(0,n.jsx)(e.code,{children:\"root\"}),\" of your app, and any HeroUI component with the \",(0,n.jsx)(e.code,{children:\"href\"}),` prop will automatically navigate\nusing your router.`]}),`\n`,(0,n.jsx)(e.h2,{id:\"herouiprovider-setup\",children:\"HeroUIProvider Setup\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"HeroUIProvider\"}),\" component accepts \",(0,n.jsx)(e.code,{children:\"navigate\"}),\" and \",(0,n.jsx)(e.code,{children:\"useHref\"}),\" props. \",(0,n.jsx)(e.code,{children:\"navigate\"}),` is a router function for client-side\nnavigation, while `,(0,n.jsx)(e.code,{children:\"useHref\"}),\" optionally converts router hrefs to native HTML hrefs. Here's the pattern:\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`import * as React from \"react\";\n\nimport {HeroUIProvider} from \"@heroui/react\";\nimport {useNavigate, useHref} from \"your-router\";\n\nfunction App() {\n  const navigate = useNavigate();\n\n  return (\n    <HeroUIProvider navigate={navigate} useHref={useHref}>\n      <YourApplication />\n    </HeroUIProvider>\n  );\n}\n`})}),`\n`,(0,n.jsx)(i,{y:2}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Note\"}),\": Framework-specific examples are shown below.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{id:\"router-options\",children:\"Router Options\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"All \",(0,n.jsx)(e.code,{children:\"HeroUI\"}),\" link components accept a \",(0,n.jsx)(e.code,{children:\"routerOptions\"}),` prop that passes options to the router's navigate function for\ncontrolling behavior like scrolling and history navigation.`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`<DropdownItem href=\"/login\" routerOptions={{replace: true}}>\n  {/* ...*/}\n</DropdownItem>\n`})}),`\n`,(0,n.jsx)(e.p,{children:`When using TypeScript, you can configure the RouterConfig type globally so that all link components have auto\ncomplete and type safety using a type provided by your router.`}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-tsx\",children:`import type {RouterOptions} from \"your-router\";\n\ndeclare module \"@react-types/shared\" {\n  interface RouterConfig {\n    routerOptions: RouterOptions;\n  }\n}\n`})}),`\n`,(0,n.jsx)(i,{y:2}),`\n`,(0,n.jsx)(e.h2,{id:\"nextjs\",children:\"Next.js\"}),`\n`,(0,n.jsx)(e.h4,{id:\"app-router\",children:\"App Router\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Go to your \",(0,n.jsx)(e.code,{children:\"app/providers.tsx\"}),\" or \",(0,n.jsx)(e.code,{children:\"app/providers.jsx\"}),` (create it if it doesn't exist) and add the\n`,(0,n.jsx)(e.code,{children:\"useRouter\"}),\" hook from \",(0,n.jsx)(e.code,{children:\"next/navigation\"}),\", it returns a router object that can be used to perform navigation.\"]}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsxs)(e.p,{children:[\"Check the \",(0,n.jsx)(e.a,{href:\"https://nextjs.org/docs/app/api-reference/functions/use-router\",children:\"Next.js docs\"}),\" for more details.\"]}),`\n`]}),`\n`,(0,n.jsxs)(t,{children:[(0,n.jsxs)(e.h4,{id:\"add-the-userouter\",children:[\"Add the \",(0,n.jsx)(e.code,{children:\"useRouter\"})]}),(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-tsx\",meta:\"{15}\",children:`// app/providers.tsx\n\"use client\";\n\nimport {useRouter} from \"next/navigation\";\nimport {HeroUIProvider} from \"@heroui/react\";\n\n// Only if using TypeScript\ndeclare module \"@react-types/shared\" {\n  interface RouterConfig {\n    routerOptions: NonNullable<Parameters<ReturnType<typeof useRouter>[\"push\"]>[1]>;\n  }\n}\n\nexport function Providers({children}: {children: React.ReactNode}) {\n  const router = useRouter();\n\n  return <HeroUIProvider navigate={router.push}>{children}</HeroUIProvider>;\n}\n`})}),(0,n.jsx)(e.h4,{id:\"add-provider-to-root\",children:\"Add Provider to Root\"}),(0,n.jsxs)(e.p,{children:[\"Now, Go to your \",(0,n.jsx)(e.code,{children:\"root\"}),\" layout page and wrap it with the \",(0,n.jsx)(e.code,{children:\"HeroUIProvider\"}),\":\"]}),(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-tsx\",meta:\"{8}\",children:`// app/layout.tsx\nimport {Providers} from \"./providers\";\n\nexport default function RootLayout({children}: {children: React.ReactNode}) {\n  return (\n    <html lang=\"en\" className=\"dark\">\n      <body>\n        <Providers>{children}</Providers>\n      </body>\n    </html>\n  );\n}\n`})}),(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Note\"}),\": Skip this step if you already set up the \",(0,n.jsx)(e.code,{children:\"HeroUIProvider\"}),\" in your app.\"]}),`\n`]}),(0,n.jsx)(e.h4,{id:\"nextjs-base-path-optional\",children:\"Next.js Base Path (Optional)\"}),(0,n.jsxs)(e.p,{children:[\"If you are using the Next.js \",(0,n.jsx)(e.a,{href:\"https://nextjs.org/docs/app/api-reference/next-config-js/basePath\",children:\"basePath\"}),` setting,\nyou'll need to configure an environment variable to access it.`]}),(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-js\",children:`// next.config.js\nconst basePath = \"...\";\nconst nextConfig = {\n  basePath,\n  env: {\n    BASE_PATH: basePath,\n  },\n};\n`})}),(0,n.jsxs)(e.p,{children:[\"Then, provide a custom \",(0,n.jsx)(e.code,{children:\"useHref\"}),\" function to prepend it to the href for all links.\"]}),(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-tsx\",meta:\"{9,12}\",children:`// app/providers.tsx\n\"use client\";\n\nimport {useRouter} from \"next/navigation\";\nimport {HeroUIProvider} from \"@heroui/react\";\n\nexport function Providers({children}: {children: React.ReactNode}) {\n  const router = useRouter();\n  const useHref = (href: string) => process.env.BASE_PATH + href;\n\n  return (\n    <HeroUIProvider navigate={router.push} useHref={useHref}>\n      {children}\n    </HeroUIProvider>\n  );\n}\n`})})]}),`\n`,(0,n.jsx)(e.h3,{id:\"pages-router\",children:\"Pages Router\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Go to pages\",(0,n.jsx)(e.code,{children:\"/_app.js\"}),\" or \",(0,n.jsx)(e.code,{children:\"pages/_app.tsx\"}),\" (create it if it doesn't exist) and add the\",(0,n.jsx)(e.code,{children:\"useRouter\"}),` hook\nfrom `,(0,n.jsx)(e.code,{children:\"next/router\"}),\", it returns a router object that can be used to perform navigation.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-tsx\",children:`// pages/_app.tsx\nimport type {AppProps} from \"next/app\";\nimport {type NextRouter, useRouter} from \"next/router\";\nimport {HeroUIProvider} from \"@heroui/react\";\n\ndeclare module \"@react-types/shared\" {\n  interface RouterConfig {\n    routerOptions: NonNullable<\n      Parameters<NextRouter['push']>[2]\n    >;\n  }\n}\n\nfunction MyApp({Component, pageProps}: AppProps) {\n  const router = useRouter();\n\n  return (\n    <HeroUIProvider navigate={router.push}>\n      <Component {...pageProps} />\n    </HeroUIProvider>\n  );\n}\n\nexport default MyApp;\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"When using the \",(0,n.jsx)(e.a,{href:\"https://nextjs.org/docs/app/api-reference/next-config-js/basePath\",children:\"basePath\"}),` configuration option,\nprovide a `,(0,n.jsx)(e.code,{children:\"useHref\"}),\" option to the router passed to Provider to prepend it to links automatically.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-tsx\",meta:\"{8}\",children:`// pages/_app.tsx\nimport type {AppProps} from \"next/app\";\nimport {HeroUIProvider} from \"@heroui/react\";\nimport {useRouter} from \"next/router\";\n\nfunction MyApp({Component, pageProps}: AppProps) {\n  const router = useRouter();\n  const useHref = (href: string) => router.basePath + href;\n\n  return (\n    <HeroUIProvider navigate={router.push} useHref={useHref}>\n      <Component {...pageProps} />\n    </HeroUIProvider>\n  );\n}\n\nexport default MyApp;\n`})}),`\n`,(0,n.jsx)(e.h2,{id:\"react-router\",children:\"React Router\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Use the \",(0,n.jsx)(e.code,{children:\"useNavigate\"}),\" hook from \",(0,n.jsx)(e.code,{children:\"react-router-dom\"}),\" to get the \",(0,n.jsx)(e.code,{children:\"navigate\"}),\" function for routing. The \",(0,n.jsx)(e.code,{children:\"useHref\"}),\" hook can be used with React Router's \",(0,n.jsx)(e.code,{children:\"basename\"}),\" option.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Make sure to place the component using these hooks inside \",(0,n.jsx)(e.code,{children:\"BrowserRouter\"}),\" and keep \",(0,n.jsx)(e.code,{children:\"<Routes>\"}),\" within \",(0,n.jsx)(e.code,{children:\"HeroUIProvider\"}),\". Here's how to set it up in your App component:\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-tsx\",children:`// App.tsx or App.jsx\nimport type {NavigateOptions} from \"react-router-dom\";\n\nimport {BrowserRouter, useNavigate, useHref} from \"react-router-dom\";\nimport {HeroUIProvider} from \"@heroui/react\";\n\ndeclare module \"@react-types/shared\" {\n  interface RouterConfig {\n    routerOptions: NavigateOptions;\n  }\n}\n\nfunction App() {\n  const navigate = useNavigate();\n\n  return (\n    <HeroUIProvider navigate={navigate} useHref={useHref}>\n      {/* Your app here... */}\n      <Routes>\n        <Route path=\"/\" element={<HomePage />} />\n        {/* ... */}\n      </Routes>\n    </HeroUIProvider>\n  );\n}\n\n// main.tsx or main.jsx\nReactDOM.createRoot(document.getElementById(\"root\")).render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n);\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Ensure that the component that calls \",(0,n.jsx)(e.code,{children:\"useNavigate\"}),\" and renders \",(0,n.jsx)(e.code,{children:\"HeroUIProvider\"}),` is inside the router\ncomponent (e.g. `,(0,n.jsx)(e.code,{children:\"BrowserRouter\"}),\") so that it has access to React Router's internal context. The React Router \",(0,n.jsx)(e.code,{children:\"<Routes>\"}),`\nelement should also be defined inside `,(0,n.jsx)(e.code,{children:\"HeroUIProvider\"}),` so that links inside the rendered routes have access\nto the router.`]}),`\n`,(0,n.jsx)(e.h2,{id:\"remix\",children:\"Remix\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Remix uses React Router under the hood, so the same \",(0,n.jsx)(e.code,{children:\"useNavigate\"}),\" and \",(0,n.jsx)(e.code,{children:\"useHref\"}),` hook described above also works in Remix\napps. `,(0,n.jsx)(e.code,{children:\"HeroUIProvider\"}),\" should be rendered at the \",(0,n.jsx)(e.code,{children:\"root\"}),` of each page that includes HeroUI components, or in\n`,(0,n.jsx)(e.code,{children:\"app/root.tsx\"}),\" to add it to all pages. See the \",(0,n.jsx)(e.a,{href:\"https://remix.run/docs/en/main/file-conventions/root\",children:\"Remix docs\"}),`\nfor more details.`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-tsx\",children:`// app/root.tsx\nimport type {NavigateOptions} from 'react-router-dom';\n\nimport {useNavigate, useHref, Outlet} from \"@remix-run/react\";\nimport {HeroUIProvider} from \"@heroui/react\";\n\ndeclare module \"@react-types/shared\" {\n  interface RouterConfig {\n    routerOptions: NavigateOptions;\n  }\n}\n\nexport default function App() {\n  const navigate = useNavigate();\n\n  return (\n    <html lang=\"en\">\n      <head>{/* ... */}</head>\n      <body>\n        <HeroUIProvider navigate={navigate} useHref={useHref}>\n          <Outlet />\n        </HeroUIProvider>\n        {/* ... */}\n      </body>\n    </html>\n  );\n}\n`})}),`\n`,(0,n.jsx)(e.h2,{id:\"tanstack\",children:\"TanStack\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"To use \",(0,n.jsx)(e.a,{href:\"https://tanstack.com/router/latest\",children:\"TanStack Router\"}),` with HeroUI, render HeroUI's RouterProvider inside your root route.\nUse `,(0,n.jsx)(e.code,{children:\"router.navigate\"}),\" in the \",(0,n.jsx)(e.code,{children:\"navigate\"}),\" prop, and \",(0,n.jsx)(e.code,{children:\"router.buildLocation\"}),\" in the \",(0,n.jsx)(e.code,{children:\"useHref\"}),\" prop.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-tsx\",children:`// app/root.tsx\nimport type {NavigateOptions, ToOptions} from '@tanstack/react-router';\n\nimport {useRouter} from '@tanstack/react-router';\nimport {HeroUIProvider} from \"@heroui/react\";\n\n\ndeclare module \"@react-types/shared\" {\n  interface RouterConfig {\n    href: ToOptions['to'];\n    routerOptions: Omit<NavigateOptions, keyof ToOptions>;\n  }\n}\n\nfunction RootRoute() {\n  let router = useRouter();\n\n  return (\n    <HeroUIProvider\n      navigate={(to, options) => router.navigate({to, ...options})}\n      useHref={(to) => router.buildLocation({to}).href}\n    >\n      {/* You app here... */}\n    </HeroUIProvider>\n  );\n}\n`})}),`\n`,(0,n.jsx)(e.h2,{id:\"usage-examples\",children:\"Usage examples\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Now that you have set up the \",(0,n.jsx)(e.code,{children:\"HeroUIProvider\"}),\" in your app, you can use the \",(0,n.jsx)(e.code,{children:\"href\"}),\" prop in the \",(0,n.jsx)(e.code,{children:\"Tabs\"}),`,\n`,(0,n.jsx)(e.code,{children:\"Listbox\"}),\" and \",(0,n.jsx)(e.code,{children:\"Dropdown\"}),\" items to navigate between pages.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.a,{href:\"/docs/components/link\",children:\"Link\"}),\" component will also use the \",(0,n.jsx)(e.code,{children:\"navigate\"}),` function from the\n`,(0,n.jsx)(e.code,{children:\"HeroUIProvider\"}),\" to navigate between pages.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-jsx\",children:`import {\n  Tabs,\n  Tab,\n  Listbox,\n  ListboxItem,\n  Dropdown,\n  DropdownTrigger,\n  DropdownMenu,\n  DropdownItem,\n  Button,\n  Link,\n} from \"@heroui/react\";\n\nfunction App() {\n  return (\n    <>\n      <Tabs aria-label=\"Navigation\">\n        <Tab key=\"home\" href=\"/home\">\n          Home\n        </Tab>\n        <Tab key=\"about\" href=\"/about\">\n          About\n        </Tab>\n      </Tabs>\n      <Listbox aria-label=\"Navigation\">\n        <ListboxItem key=\"home\" href=\"/home\">\n          Home\n        </ListboxItem>\n        <ListboxItem key=\"about\" href=\"/about\">\n          About\n        </ListboxItem>\n      </Listbox>\n      <Dropdown>\n        <DropdownTrigger>\n          <Button>Open</Button>\n        </DropdownTrigger>\n        <DropdownMenu aria-label=\"Navigation\">\n          <DropdownItem key=\"home\" href=\"/home\">\n            Home\n          </DropdownItem>\n          <DropdownItem key=\"about\" href=\"/about\">\n            About\n          </DropdownItem>\n        </DropdownMenu>\n      </Dropdown>\n      <Link href=\"/home\">Home</Link>\n      <Link href=\"/about\">About</Link>\n    </>\n  );\n}\n`})}),`\n`,(0,n.jsx)(i,{y:2}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsxs)(e.p,{children:[\"For more information about routing in React Aria, visit the \",(0,n.jsx)(e.a,{href:\"https://react-spectrum.adobe.com/react-aria/routing.html\",children:\"React Aria Routing Guide\"}),\".\"]}),`\n`]})]})}function u(r={}){let{wrapper:e}=r.components||{};return e?(0,n.jsx)(e,{...r,children:(0,n.jsx)(h,{...r})}):h(r)}function d(r,e){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+r+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return H(P);})();\n;return Component;"
  },
  "_id": "docs/guide/routing.mdx",
  "_raw": {
    "sourceFilePath": "docs/guide/routing.mdx",
    "sourceFileName": "routing.mdx",
    "sourceFileDir": "docs/guide",
    "contentType": "mdx",
    "flattenedPath": "docs/guide/routing"
  },
  "type": "Doc",
  "slug": "/docs/guide/routing",
  "slugAsParams": "guide/routing",
  "url": "/docs/guide/routing"
}