{
  "title": "Input OTP",
  "description": "InputOtp is a component that allows users to enter OTP.",
  "body": {
    "raw": "\nimport {inputOtpContent} from \"@/content/components/input-otp\";\n\n# Input OTP\n\nThe InputOtp component enables users to enter one-time passwords (OTP). It is built on top of the [input-otp](https://github.com/guilhermerodz/input-otp) library by [@guilherme_rodz](https://twitter.com/guilherme_rodz).\n\n<ComponentLinks component=\"input-otp\" />\n\n---\n\n<CarbonAd />\n\n## Installation\n\n<PackageManagers\n  showGlobalInstallWarning\n  commands={{\n    cli: \"npx heroui-cli@latest add input-otp\",\n    npm: \"npm install @heroui/input-otp\",\n    yarn: \"yarn add @heroui/input-otp\",\n    pnpm: \"pnpm add @heroui/input-otp\",\n    bun: \"bun add @heroui/input-otp\",\n  }}\n/>\n\n## Import\n\n<ImportTabs\n  commands={{\n    main: 'import {InputOtp} from \"@heroui/react\";',\n    individual: 'import {InputOtp} from \"@heroui/input-otp\";',\n  }}\n/>\n\n## Usage\n\n<CodeDemo title=\"Usage\" files={inputOtpContent.usage} />\n\n## Disabled\n\nThe `isDisabled` prop disables user interaction with the `InputOtp` component.\n\n<CodeDemo title=\"Disabled\" files={inputOtpContent.disabled} />\n\n## Read Only\n\nThe `isReadOnly` prop makes the `InputOtp` component read-only while maintaining its visual appearance.\n\n<CodeDemo title=\"Read Only\" files={inputOtpContent.readonly} />\n\n## Required\n\nThe `isRequired` prop marks the `InputOtp` as a required field.\n\n<CodeDemo title=\"Required\" files={inputOtpContent.required} />\n\n## Sizes\n\nThe size of the `InputOtp` can be customized using the `size` prop. The default value is `md`.\n\n<CodeDemo title=\"Sizes\" files={inputOtpContent.sizes} />\n\n## Colors\n\nColor of the `InputOtp` can be changed by `color` property.\n\n<CodeDemo title=\"Colors\" files={inputOtpContent.colors} />\n\n## Variants\n\nStyling/Variant of the `InputOtp` can be changed by `variant` property. By default, `variant` property is set to `flat`.\n\n<CodeDemo title=\"Variants\" files={inputOtpContent.variants} />\n\n## Radius\n\nRadius of the `InputOtp` can be changed by `radius` property. By default, `radius` property is set to `md`.\n\n<CodeDemo title=\"Radius\" files={inputOtpContent.radius} />\n\n## Password\n\n`InputOtp` can be used as password/secured-pin input by setting `type` as `password`.\n\n<CodeDemo title=\"Password\" files={inputOtpContent.password} />\n\n## Description\n\nDescription of the `InputOtp` can be set by `description` property.\n\n<CodeDemo title=\"Description\" files={inputOtpContent.description} />\n\n## Error Message\n\nCustom error message of the `InputOtp` can be set by `errorMessage` property.\n\n<CodeDemo title=\"Error Message\" files={inputOtpContent.errorMessage} />\n\n## Allowed Keys\n\n- The `InputOtp` component only accepts specified input keys. Any other input is ignored.\n- You can customize the allowed keys using the `allowedKeys` prop, which accepts a regex pattern.\n- By default, `allowedKeys` is set to `^[0-9]*$` (only numerical digits).\n\n<CodeDemo title=\"Allowed Keys\" files={inputOtpContent.allowedKeys} />\n\n## Controlled\n\n<CodeDemo title=\"Controlled\" files={inputOtpContent.controlled} />\n\n## React Hook Form\n\nYou can use `InputOtp` with React Hook Form for form validation and submission handling.\n\n<CodeDemo title=\"React Hook Form\" files={inputOtpContent.form} />\n\n## Different Lengths & Validation\n\nThe `InputOtp` component supports different lengths through the `length` property. You can set the number of input segments by passing a number value to the `length` prop. Common use cases include 4-digit PINs and 6-digit authentication codes.\n\n<CodeDemo title=\"Lengths\" files={inputOtpContent.lengths} />\n\n## Custom Styles\n\nYou can customize the styles of the `InputOtp` component using the `classNames` prop.\n\n<CodeDemo title=\"Custom Styles\" files={inputOtpContent.customStyles} />\n\n## Slots\n\n- **base**: InputOtp wrapper, it handles alignment, placement, and general appearance.\n- **wrapper**: Wraps the underlying input-otp component. Sent as `containerClassName` prop to underlying input-otp component.\n- **input**: The input element.\n- **segmentWrapper**: Wraps all the segment elements.\n- **segment**: The segment element.\n- **caret**: The caret represents the typing indicator of the input-otp component.\n- **passwordChar**: The passwordChar represents the text styling when input-type is password.\n- **helperWrapper**: Wraps the `description` and the `errorMessage`.\n- **description**: The description of the input-otp.\n- **errorMessage**: The error message of the input-otp.\n\n<Spacer y={4} />\n\n## Data Attributes\n\n`InputOtp` has the following attributes on the `base` element:\n\n- **data-invalid**:\n  When the input-otp is invalid. Based on `isInvalid` prop.\n- **data-required**:\n  When the input-otp is required. Based on `isRequired` prop.\n- **data-readonly**:\n  When the input-otp is readonly. Based on `isReadOnly` prop.\n- **data-filled**:\n  When the input-otp is completely filled.\n- **data-disabled**:\n  When the input-otp is disabled. Based on `isDisabled` prop.\n\n`InputOtp` also has the following attributes on the `segment` element:\n\n- **data-active**:\n  When the segment is active.\n- **data-focus**:\n  When the segment is focused.\n- **data-focus-visible**:\n  When the segment is focused visible.\n- **data-has-value**:\n  When the segment has value.\n\n<Spacer y={4} />\n\n## Accessibility\n\n- Built on top of [input-otp](https://github.com/guilhermerodz/input-otp).\n- Required and invalid states exposed to assistive technology via ARIA.\n- Support for description and error message help text linked to the input-otp via ARIA.\n- Keyboard navigation:\n  - Tab: Moves focus between input segments\n  - Arrow keys: Navigate between segments\n  - Backspace: Clears current segment and moves focus to previous segment\n- ARIA attributes:\n  - `aria-invalid`: Indicates validation state\n  - `aria-required`: Indicates if the input is required\n\n<Spacer y={4} />\n\n## API\n\n### InputOtp Props\n\n<APITable\n  data={[\n    {\n      attribute: \"length\",\n      type: \"number\",\n      description: \"The length of the input-otp.\",\n      default: \"4\"\n    },\n    {\n      attribute: \"allowedKeys\",\n      type: \"regEx string\",\n      description: \"The allowed keys for the input-otp.\",\n      default: \"^[0-9]*$\"\n    },\n    {\n      attribute: \"variant\",\n      type: \"flat | bordered | faded | underlined\",\n      description: \"The variant of the input-otp.\",\n      default: \"flat\"\n    },\n    {\n      attribute: \"color\",\n      type: \"default | primary | secondary | success | warning | danger\",\n      description: \"The color of the input-otp.\",\n      default: \"default\"\n    },\n    {\n      attribute: \"size\",\n      type: \"sm | md | lg\",\n      description: \"The size of the input-otp.\",\n      default: \"md\"\n    },\n    {\n      attribute: \"radius\",\n      type: \"none | sm | md | lg | full\",\n      description: \"The radius of the input-otp.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"value\",\n      type: \"string\",\n      description: \"The current value of the input-otp (controlled).\",\n      default: \"-\"\n    },\n    {\n      attribute: \"defaultValue\",\n      type: \"string\",\n      description: \"The default value of the input-otp (uncontrolled).\",\n      default: \"-\"\n    },\n    {\n      attribute: \"description\",\n      type: \"ReactNode\",\n      description: \"Provides additional information or hints about the input requirements.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"errorMessage\",\n      type: \"ReactNode | ((v: ValidationResult) => ReactNode)\",\n      description: \"An error message for the input-otp. It is only shown when isInvalid is set to true\",\n      default: \"-\"\n    },\n    {\n      attribute: \"fullWidth\",\n      type: \"boolean\",\n      description: \"When true, the InputOtp expands to fill its parent container width.\",\n      default: \"false\"\n    },\n    {\n      attribute: \"isRequired\",\n      type: \"boolean\",\n      description: \"Marks the input as required for form submission.\",\n      default: \"false\"\n    },\n    {\n      attribute: \"isReadOnly\",\n      type: \"boolean\",\n      description: \"When true, allows selection but prevents user modification.\",\n      default: \"false\"\n    },\n    {\n      attribute: \"isDisabled\",\n      type: \"boolean\",\n      description: \"Whether the input-otp is disabled.\",\n      default: \"false\"\n    },\n    {\n      attribute: \"isInvalid\",\n      type: \"boolean\",\n      description: \"Whether the input-otp is invalid.\",\n      default: \"false\"\n    },\n    {\n      attribute: \"baseRef\",\n      type: \"RefObject<HTMLDivElement>\",\n      description: \"The ref to the base element.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"disableAnimation\",\n      type: \"boolean\",\n      description: \"Whether the input-otp should be animated.\",\n      default: \"false\"\n    },\n    {\n      attribute: \"classNames\",\n      type: \"Partial<Record<'base' | 'inputWrapper' | 'input' | 'segmentWrapper' | 'segment' | 'caret' | 'passwordChar' | 'helperWrapper' | 'description' | 'errorMessage', string>>\",\n      description: \"Allows to set custom class names for the Input slots.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"autoFocus\",\n      type: \"boolean\",\n      description: \"Whether the element should receive focus on render.\",\n      default: \"false\"\n    },\n    {\n      attribute: \"textAlign\",\n      type: \"left | center | right\",\n      description: \"The text alignment of the input segments\",\n      default: \"center\"\n    },\n    {\n      attribute: \"pushPasswordManagerStrategy\",\n      type: \"'none' | 'hidden' | 'input'\",\n      description: \"Strategy for password manager support\",\n      default: \"-\"\n    },\n    {\n      attribute: \"pasteTransformer\",\n      type: \"(text: string) => string\",\n      description: \"A function to transform pasted text before it's inserted into the input.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"containerClassName\",\n      type: \"string\",\n      description: \"Class name for the input container\",\n      default: \"-\"\n    },\n    {\n      attribute: \"noScriptCSSFallback\",\n      type: \"string\",\n      description: \"CSS fallback for when JavaScript is disabled\",\n      default: \"-\"\n    }\n  ]}\n/>\n\n### InputOtp Events\n\n<APITable\n  data={[\n    {\n      attribute: \"onChange\",\n      type: \"React.ChangeEvent<HTMLInputElement>\",\n      description: \"Handler that is called when the element's value changes. You can pull out the new value by accessing event.target.value (string).\",\n      default: \"-\"\n    },\n    {\n      attribute: \"onValueChange\",\n      type: \"(value: string) => void\",\n      description: \"Handler that is called when the element's value changes.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"onComplete\",\n      type: \"(value: string) => void\",\n      description: \"Handler that is called when the element's value is completely filled.\",\n      default: \"-\"\n    }\n  ]}\n/>\n",
    "code": "var Component=(()=>{var Z=Object.create;var p=Object.defineProperty;var G=Object.getOwnPropertyDescriptor;var Q=Object.getOwnPropertyNames;var ee=Object.getPrototypeOf,te=Object.prototype.hasOwnProperty;var re=(r,t)=>()=>(t||r((t={exports:{}}).exports,t),t.exports),ne=(r,t)=>{for(var o in t)p(r,o,{get:t[o],enumerable:!0})},h=(r,t,o,l)=>{if(t&&typeof t==\"object\"||typeof t==\"function\")for(let n of Q(t))!te.call(r,n)&&n!==o&&p(r,n,{get:()=>t[n],enumerable:!(l=G(t,n))||l.enumerable});return r};var ie=(r,t,o)=>(o=r!=null?Z(ee(r)):{},h(t||!r||!r.__esModule?p(o,\"default\",{value:r,enumerable:!0}):o,r)),oe=r=>h(p({},\"__esModule\",{value:!0}),r);var f=re((He,m)=>{m.exports=_jsx_runtime});var Ee={};ne(Ee,{default:()=>X,frontmatter:()=>Fe});var e=ie(f());var g=`import React from \"react\";\nimport {InputOtp} from \"@heroui/react\";\n\nexport default function App() {\n  const [value, setValue] = React.useState(\"\");\n\n  return (\n    <div className=\"flex flex-col items-start gap-2\">\n      <InputOtp length={4} value={value} onValueChange={setValue} />\n      <div className=\"text-small text-default-500\">\n        OTP value: <span className=\"text-md font-medium\">{value}</span>\n      </div>\n    </div>\n  );\n}\n`;var le={\"/App.jsx\":g},v={...le};var b=`import {InputOtp} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <div className=\"flex w-full flex-wrap md:flex-nowrap gap-4\">\n      <InputOtp isDisabled defaultValue=\"1234\" length={4} />\n    </div>\n  );\n}\n`;var pe={\"/App.jsx\":b},x={...pe};var y=`import {InputOtp} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <div className=\"flex w-full flex-wrap md:flex-nowrap gap-4\">\n      <InputOtp isReadOnly defaultValue=\"1234\" length={4} />\n    </div>\n  );\n}\n`;var ce={\"/App.jsx\":y},w={...ce};var O=`import {Button, InputOtp, Form} from \"@heroui/react\";\n\nexport default function App() {\n  const [otp, setOtp] = React.useState(\"\");\n\n  return (\n    <Form\n      className=\"flex w-full flex-col items-start gap-4\"\n      onSubmit={(e) => {\n        e.preventDefault();\n        const formData = new FormData(e.currentTarget);\n        const otp = formData.get(\"otp\");\n\n        setOtp(otp);\n      }}\n    >\n      <InputOtp\n        isRequired\n        aria-label=\"OTP input field\"\n        length={4}\n        name=\"otp\"\n        placeholder=\"Enter code\"\n      />\n      <Button size=\"sm\" type=\"submit\" variant=\"bordered\">\n        Submit\n      </Button>\n      {otp && <div className=\"text-small text-default-500\">OTP submitted: {otp}</div>}\n    </Form>\n  );\n}\n`;var he={\"/App.jsx\":O},I={...he};var A=`import {InputOtp} from \"@heroui/react\";\n\nexport default function App() {\n  const sizes = [\"sm\", \"md\", \"lg\"];\n\n  return (\n    <div className=\"w-full flex flex-col gap-4\">\n      {sizes.map((size) => (\n        <div key={size} className=\"flex flex-col w-full\">\n          <div className=\"text-default-500\">size: {size}</div>\n          <InputOtp length={4} size={size} />\n        </div>\n      ))}\n    </div>\n  );\n}\n`;var fe={\"/App.jsx\":A},T={...fe};var N=`import {InputOtp} from \"@heroui/react\";\n\nexport default function App() {\n  const colors = [\"default\", \"primary\", \"secondary\", \"success\", \"warning\", \"danger\"];\n\n  return (\n    <div className=\"w-full flex flex-wrap gap-4\">\n      {colors.map((color) => (\n        <div key={color}>\n          <div className=\"text-default-500\">color: {color}</div>\n          <InputOtp color={color} length={4} />\n        </div>\n      ))}\n    </div>\n  );\n}\n`;var ve={\"/App.jsx\":N},S={...ve};var C=`import {InputOtp} from \"@heroui/react\";\n\nexport default function App() {\n  const variants = [\"flat\", \"bordered\", \"underlined\", \"faded\"];\n\n  return (\n    <div className=\"w-full flex flex-wrap gap-4\">\n      {variants.map((variant) => (\n        <div key={variant}>\n          <div className=\"text-default-500\">variant: {variant}</div>\n          <InputOtp length={4} variant={variant} />\n        </div>\n      ))}\n    </div>\n  );\n}\n`;var xe={\"/App.jsx\":C},R={...xe};var P=`import {InputOtp} from \"@heroui/react\";\n\nexport default function App() {\n  const radiusValues = [\"none\", \"sm\", \"md\", \"lg\", \"full\"];\n\n  return (\n    <div className=\"w-full flex flex-wrap gap-6\">\n      {radiusValues.map((radius) => (\n        <div key={radius}>\n          <div className=\"text-default-500\">radius: {radius}</div>\n          <InputOtp length={4} radius={radius} />\n        </div>\n      ))}\n    </div>\n  );\n}\n`;var we={\"/App.jsx\":P},k={...we};var z=`import {InputOtp} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <div className=\"flex w-full flex-wrap md:flex-nowrap gap-4\">\n      <InputOtp description=\"This is description to the OTP component.\" length={4} />\n    </div>\n  );\n}\n`;var Ie={\"/App.jsx\":z},W={...Ie};var V=`import {InputOtp} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <div className=\"flex w-full flex-wrap md:flex-nowrap gap-4\">\n      <InputOtp isInvalid errorMessage=\"Invalid OTP code\" length={4} />\n    </div>\n  );\n}\n`;var Te={\"/App.jsx\":V},j={...Te};var M=`import {InputOtp} from \"@heroui/react\";\n\nexport default function App() {\n  const allowedKeysConfig = [\n    {\n      name: \"Only lowercase letters (a-z):\",\n      value: \"^[a-z]*$\",\n    },\n    {\n      name: \"Only uppercase letters (A-Z):\",\n      value: \"^[A-Z]*$\",\n    },\n  ];\n\n  return (\n    <div className=\"w-full flex flex-wrap gap-6\">\n      {allowedKeysConfig.map((config, idx) => (\n        <div key={idx}>\n          <div className=\"text-default-500\">{config.name}</div>\n          <InputOtp allowedKeys={config.value} length={4} />\n        </div>\n      ))}\n    </div>\n  );\n}\n`;var Se={\"/App.jsx\":M},q={...Se};var D=`import {InputOtp} from \"@heroui/react\";\nimport React from \"react\";\n\nexport default function App() {\n  const [value, setValue] = React.useState(\"\");\n\n  return (\n    <div className=\"w-full flex flex-col gap-2 max-w-[240px]\">\n      <InputOtp length={4} value={value} onValueChange={setValue} />\n      <p className=\"text-default-500 text-small\">value: {value}</p>\n    </div>\n  );\n}\n`;var Re={\"/App.jsx\":D},B={...Re};var F=`import {InputOtp} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <div className=\"flex w-full flex-wrap md:flex-nowrap gap-4\">\n      <InputOtp length={4} radius=\"full\" size=\"sm\" type=\"password\" variant=\"bordered\" />\n    </div>\n  );\n}\n`;var ke={\"/App.jsx\":F},E={...ke};var K=`import {InputOtp} from \"@heroui/react\";\nimport {useForm, Controller} from \"react-hook-form\";\nimport {Button} from \"@heroui/react\";\n\nexport default function App() {\n  const {\n    handleSubmit,\n    control,\n    formState: {errors},\n  } = useForm({\n    defaultValues: {\n      otp: \"\",\n    },\n  });\n\n  const onSubmit = (data) => {\n    alert(JSON.stringify(data));\n  };\n\n  return (\n    <form className=\"flex flex-col gap-4 w-full max-w-[300px]\" onSubmit={handleSubmit(onSubmit)}>\n      <Controller\n        control={control}\n        name=\"otp\"\n        render={({field}) => (\n          <InputOtp\n            {...field}\n            errorMessage={errors.otp && errors.otp.message}\n            isInvalid={!!errors.otp}\n            length={4}\n          />\n        )}\n        rules={{\n          required: \"OTP is required\",\n          minLength: {\n            value: 4,\n            message: \"Please enter a valid OTP\",\n          },\n        }}\n      />\n      <Button className=\"max-w-fit\" type=\"submit\" variant=\"flat\">\n        Verify OTP\n      </Button>\n    </form>\n  );\n}\n`;var H=`import {InputOtp} from \"@heroui/react\";\nimport {useForm, Controller, SubmitHandler} from \"react-hook-form\";\nimport {Button} from \"@heroui/react\";\n\ninterface FormValues {\n  otp: string;\n}\n\nexport default function App() {\n  const {\n    handleSubmit,\n    control,\n    formState: {errors},\n  } = useForm<FormValues>({\n    defaultValues: {\n      otp: \"\",\n    },\n  });\n\n  const onSubmit: SubmitHandler<FormValues> = (data) => {\n    alert(JSON.stringify(data));\n  };\n\n  return (\n    <form className=\"flex flex-col gap-4 w-full max-w-[300px]\" onSubmit={handleSubmit(onSubmit)}>\n      <Controller\n        control={control}\n        name=\"otp\"\n        render={({field}) => (\n          <InputOtp\n            {...field}\n            errorMessage={errors.otp?.message}\n            isInvalid={!!errors.otp}\n            length={4}\n          />\n        )}\n        rules={{\n          required: \"OTP is required\",\n          minLength: {\n            value: 4,\n            message: \"Please enter a valid OTP\",\n          },\n        }}\n      />\n      <Button className=\"max-w-fit\" type=\"submit\" variant=\"flat\">\n        Verify OTP\n      </Button>\n    </form>\n  );\n}\n`;var Ve={\"/App.jsx\":K},je={\"/App.tsx\":H},_={...Ve,...je};var L=`import {InputOtp} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <div className=\"flex w-full flex-wrap md:flex-nowrap gap-4\">\n      <InputOtp\n        classNames={{\n          segmentWrapper: \"gap-x-0\",\n          segment: [\n            \"relative\",\n            \"h-10\",\n            \"w-10\",\n            \"border-y\",\n            \"border-r\",\n            \"first:rounded-l-md\",\n            \"first:border-l\",\n            \"last:rounded-r-md\",\n            \"border-default-200\",\n            \"data-[active=true]:border\",\n            \"data-[active=true]:z-20\",\n            \"data-[active=true]:ring-2\",\n            \"data-[active=true]:ring-offset-2\",\n            \"data-[active=true]:ring-offset-background\",\n            \"data-[active=true]:ring-foreground\",\n          ],\n        }}\n        description=\"Enter the 4 digit code sent to your email\"\n        length={4}\n        radius=\"none\"\n      />\n    </div>\n  );\n}\n`;var qe={\"/App.jsx\":L},Y={...qe};var $=`import {InputOtp} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <div className=\"flex flex-col gap-4 w-full\">\n      <div>\n        <p className=\"text-default-500 text-small mb-2\">Basic length (4 digits)</p>\n        <InputOtp length={4} />\n      </div>\n\n      <div>\n        <p className=\"text-default-500 text-small mb-2\">6 digits OTP</p>\n        <InputOtp length={6} />\n      </div>\n    </div>\n  );\n}\n`;var Be={\"/App.jsx\":$},J={...Be};var i={usage:v,disabled:x,readonly:w,required:I,sizes:T,colors:S,variants:R,radius:k,description:W,errorMessage:j,allowedKeys:q,controlled:B,password:E,form:_,customStyles:Y,lengths:J};var Fe={title:\"Input OTP\",description:\"InputOtp is a component that allows users to enter OTP.\"};function U(r){let t={a:\"a\",code:\"code\",h1:\"h1\",h2:\"h2\",h3:\"h3\",hr:\"hr\",li:\"li\",p:\"p\",strong:\"strong\",ul:\"ul\",...r.components},{APITable:o,CarbonAd:l,CodeDemo:n,ComponentLinks:d,ImportTabs:c,PackageManagers:u,Spacer:s}=t;return o||a(\"APITable\",!0),l||a(\"CarbonAd\",!0),n||a(\"CodeDemo\",!0),d||a(\"ComponentLinks\",!0),c||a(\"ImportTabs\",!0),u||a(\"PackageManagers\",!0),s||a(\"Spacer\",!0),(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(t.h1,{id:\"input-otp\",children:\"Input OTP\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"The InputOtp component enables users to enter one-time passwords (OTP). It is built on top of the \",(0,e.jsx)(t.a,{href:\"https://github.com/guilhermerodz/input-otp\",children:\"input-otp\"}),\" library by \",(0,e.jsx)(t.a,{href:\"https://twitter.com/guilherme_rodz\",children:\"@guilherme_rodz\"}),\".\"]}),`\n`,(0,e.jsx)(d,{component:\"input-otp\"}),`\n`,(0,e.jsx)(t.hr,{}),`\n`,(0,e.jsx)(l,{}),`\n`,(0,e.jsx)(t.h2,{id:\"installation\",children:\"Installation\"}),`\n`,(0,e.jsx)(u,{showGlobalInstallWarning:!0,commands:{cli:\"npx heroui-cli@latest add input-otp\",npm:\"npm install @heroui/input-otp\",yarn:\"yarn add @heroui/input-otp\",pnpm:\"pnpm add @heroui/input-otp\",bun:\"bun add @heroui/input-otp\"}}),`\n`,(0,e.jsx)(t.h2,{id:\"import\",children:\"Import\"}),`\n`,(0,e.jsx)(c,{commands:{main:'import {InputOtp} from \"@heroui/react\";',individual:'import {InputOtp} from \"@heroui/input-otp\";'}}),`\n`,(0,e.jsx)(t.h2,{id:\"usage\",children:\"Usage\"}),`\n`,(0,e.jsx)(n,{title:\"Usage\",files:i.usage}),`\n`,(0,e.jsx)(t.h2,{id:\"disabled\",children:\"Disabled\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"The \",(0,e.jsx)(t.code,{children:\"isDisabled\"}),\" prop disables user interaction with the \",(0,e.jsx)(t.code,{children:\"InputOtp\"}),\" component.\"]}),`\n`,(0,e.jsx)(n,{title:\"Disabled\",files:i.disabled}),`\n`,(0,e.jsx)(t.h2,{id:\"read-only\",children:\"Read Only\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"The \",(0,e.jsx)(t.code,{children:\"isReadOnly\"}),\" prop makes the \",(0,e.jsx)(t.code,{children:\"InputOtp\"}),\" component read-only while maintaining its visual appearance.\"]}),`\n`,(0,e.jsx)(n,{title:\"Read Only\",files:i.readonly}),`\n`,(0,e.jsx)(t.h2,{id:\"required\",children:\"Required\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"The \",(0,e.jsx)(t.code,{children:\"isRequired\"}),\" prop marks the \",(0,e.jsx)(t.code,{children:\"InputOtp\"}),\" as a required field.\"]}),`\n`,(0,e.jsx)(n,{title:\"Required\",files:i.required}),`\n`,(0,e.jsx)(t.h2,{id:\"sizes\",children:\"Sizes\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"The size of the \",(0,e.jsx)(t.code,{children:\"InputOtp\"}),\" can be customized using the \",(0,e.jsx)(t.code,{children:\"size\"}),\" prop. The default value is \",(0,e.jsx)(t.code,{children:\"md\"}),\".\"]}),`\n`,(0,e.jsx)(n,{title:\"Sizes\",files:i.sizes}),`\n`,(0,e.jsx)(t.h2,{id:\"colors\",children:\"Colors\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"Color of the \",(0,e.jsx)(t.code,{children:\"InputOtp\"}),\" can be changed by \",(0,e.jsx)(t.code,{children:\"color\"}),\" property.\"]}),`\n`,(0,e.jsx)(n,{title:\"Colors\",files:i.colors}),`\n`,(0,e.jsx)(t.h2,{id:\"variants\",children:\"Variants\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"Styling/Variant of the \",(0,e.jsx)(t.code,{children:\"InputOtp\"}),\" can be changed by \",(0,e.jsx)(t.code,{children:\"variant\"}),\" property. By default, \",(0,e.jsx)(t.code,{children:\"variant\"}),\" property is set to \",(0,e.jsx)(t.code,{children:\"flat\"}),\".\"]}),`\n`,(0,e.jsx)(n,{title:\"Variants\",files:i.variants}),`\n`,(0,e.jsx)(t.h2,{id:\"radius\",children:\"Radius\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"Radius of the \",(0,e.jsx)(t.code,{children:\"InputOtp\"}),\" can be changed by \",(0,e.jsx)(t.code,{children:\"radius\"}),\" property. By default, \",(0,e.jsx)(t.code,{children:\"radius\"}),\" property is set to \",(0,e.jsx)(t.code,{children:\"md\"}),\".\"]}),`\n`,(0,e.jsx)(n,{title:\"Radius\",files:i.radius}),`\n`,(0,e.jsx)(t.h2,{id:\"password\",children:\"Password\"}),`\n`,(0,e.jsxs)(t.p,{children:[(0,e.jsx)(t.code,{children:\"InputOtp\"}),\" can be used as password/secured-pin input by setting \",(0,e.jsx)(t.code,{children:\"type\"}),\" as \",(0,e.jsx)(t.code,{children:\"password\"}),\".\"]}),`\n`,(0,e.jsx)(n,{title:\"Password\",files:i.password}),`\n`,(0,e.jsx)(t.h2,{id:\"description\",children:\"Description\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"Description of the \",(0,e.jsx)(t.code,{children:\"InputOtp\"}),\" can be set by \",(0,e.jsx)(t.code,{children:\"description\"}),\" property.\"]}),`\n`,(0,e.jsx)(n,{title:\"Description\",files:i.description}),`\n`,(0,e.jsx)(t.h2,{id:\"error-message\",children:\"Error Message\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"Custom error message of the \",(0,e.jsx)(t.code,{children:\"InputOtp\"}),\" can be set by \",(0,e.jsx)(t.code,{children:\"errorMessage\"}),\" property.\"]}),`\n`,(0,e.jsx)(n,{title:\"Error Message\",files:i.errorMessage}),`\n`,(0,e.jsx)(t.h2,{id:\"allowed-keys\",children:\"Allowed Keys\"}),`\n`,(0,e.jsxs)(t.ul,{children:[`\n`,(0,e.jsxs)(t.li,{children:[\"The \",(0,e.jsx)(t.code,{children:\"InputOtp\"}),\" component only accepts specified input keys. Any other input is ignored.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[\"You can customize the allowed keys using the \",(0,e.jsx)(t.code,{children:\"allowedKeys\"}),\" prop, which accepts a regex pattern.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[\"By default, \",(0,e.jsx)(t.code,{children:\"allowedKeys\"}),\" is set to \",(0,e.jsx)(t.code,{children:\"^[0-9]*$\"}),\" (only numerical digits).\"]}),`\n`]}),`\n`,(0,e.jsx)(n,{title:\"Allowed Keys\",files:i.allowedKeys}),`\n`,(0,e.jsx)(t.h2,{id:\"controlled\",children:\"Controlled\"}),`\n`,(0,e.jsx)(n,{title:\"Controlled\",files:i.controlled}),`\n`,(0,e.jsx)(t.h2,{id:\"react-hook-form\",children:\"React Hook Form\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"You can use \",(0,e.jsx)(t.code,{children:\"InputOtp\"}),\" with React Hook Form for form validation and submission handling.\"]}),`\n`,(0,e.jsx)(n,{title:\"React Hook Form\",files:i.form}),`\n`,(0,e.jsx)(t.h2,{id:\"different-lengths--validation\",children:\"Different Lengths & Validation\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"The \",(0,e.jsx)(t.code,{children:\"InputOtp\"}),\" component supports different lengths through the \",(0,e.jsx)(t.code,{children:\"length\"}),\" property. You can set the number of input segments by passing a number value to the \",(0,e.jsx)(t.code,{children:\"length\"}),\" prop. Common use cases include 4-digit PINs and 6-digit authentication codes.\"]}),`\n`,(0,e.jsx)(n,{title:\"Lengths\",files:i.lengths}),`\n`,(0,e.jsx)(t.h2,{id:\"custom-styles\",children:\"Custom Styles\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"You can customize the styles of the \",(0,e.jsx)(t.code,{children:\"InputOtp\"}),\" component using the \",(0,e.jsx)(t.code,{children:\"classNames\"}),\" prop.\"]}),`\n`,(0,e.jsx)(n,{title:\"Custom Styles\",files:i.customStyles}),`\n`,(0,e.jsx)(t.h2,{id:\"slots\",children:\"Slots\"}),`\n`,(0,e.jsxs)(t.ul,{children:[`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"base\"}),\": InputOtp wrapper, it handles alignment, placement, and general appearance.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"wrapper\"}),\": Wraps the underlying input-otp component. Sent as \",(0,e.jsx)(t.code,{children:\"containerClassName\"}),\" prop to underlying input-otp component.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"input\"}),\": The input element.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"segmentWrapper\"}),\": Wraps all the segment elements.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"segment\"}),\": The segment element.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"caret\"}),\": The caret represents the typing indicator of the input-otp component.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"passwordChar\"}),\": The passwordChar represents the text styling when input-type is password.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"helperWrapper\"}),\": Wraps the \",(0,e.jsx)(t.code,{children:\"description\"}),\" and the \",(0,e.jsx)(t.code,{children:\"errorMessage\"}),\".\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"description\"}),\": The description of the input-otp.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"errorMessage\"}),\": The error message of the input-otp.\"]}),`\n`]}),`\n`,(0,e.jsx)(s,{y:4}),`\n`,(0,e.jsx)(t.h2,{id:\"data-attributes\",children:\"Data Attributes\"}),`\n`,(0,e.jsxs)(t.p,{children:[(0,e.jsx)(t.code,{children:\"InputOtp\"}),\" has the following attributes on the \",(0,e.jsx)(t.code,{children:\"base\"}),\" element:\"]}),`\n`,(0,e.jsxs)(t.ul,{children:[`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-invalid\"}),`:\nWhen the input-otp is invalid. Based on `,(0,e.jsx)(t.code,{children:\"isInvalid\"}),\" prop.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-required\"}),`:\nWhen the input-otp is required. Based on `,(0,e.jsx)(t.code,{children:\"isRequired\"}),\" prop.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-readonly\"}),`:\nWhen the input-otp is readonly. Based on `,(0,e.jsx)(t.code,{children:\"isReadOnly\"}),\" prop.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-filled\"}),`:\nWhen the input-otp is completely filled.`]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-disabled\"}),`:\nWhen the input-otp is disabled. Based on `,(0,e.jsx)(t.code,{children:\"isDisabled\"}),\" prop.\"]}),`\n`]}),`\n`,(0,e.jsxs)(t.p,{children:[(0,e.jsx)(t.code,{children:\"InputOtp\"}),\" also has the following attributes on the \",(0,e.jsx)(t.code,{children:\"segment\"}),\" element:\"]}),`\n`,(0,e.jsxs)(t.ul,{children:[`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-active\"}),`:\nWhen the segment is active.`]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-focus\"}),`:\nWhen the segment is focused.`]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-focus-visible\"}),`:\nWhen the segment is focused visible.`]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-has-value\"}),`:\nWhen the segment has value.`]}),`\n`]}),`\n`,(0,e.jsx)(s,{y:4}),`\n`,(0,e.jsx)(t.h2,{id:\"accessibility\",children:\"Accessibility\"}),`\n`,(0,e.jsxs)(t.ul,{children:[`\n`,(0,e.jsxs)(t.li,{children:[\"Built on top of \",(0,e.jsx)(t.a,{href:\"https://github.com/guilhermerodz/input-otp\",children:\"input-otp\"}),\".\"]}),`\n`,(0,e.jsx)(t.li,{children:\"Required and invalid states exposed to assistive technology via ARIA.\"}),`\n`,(0,e.jsx)(t.li,{children:\"Support for description and error message help text linked to the input-otp via ARIA.\"}),`\n`,(0,e.jsxs)(t.li,{children:[\"Keyboard navigation:\",`\n`,(0,e.jsxs)(t.ul,{children:[`\n`,(0,e.jsx)(t.li,{children:\"Tab: Moves focus between input segments\"}),`\n`,(0,e.jsx)(t.li,{children:\"Arrow keys: Navigate between segments\"}),`\n`,(0,e.jsx)(t.li,{children:\"Backspace: Clears current segment and moves focus to previous segment\"}),`\n`]}),`\n`]}),`\n`,(0,e.jsxs)(t.li,{children:[\"ARIA attributes:\",`\n`,(0,e.jsxs)(t.ul,{children:[`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.code,{children:\"aria-invalid\"}),\": Indicates validation state\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.code,{children:\"aria-required\"}),\": Indicates if the input is required\"]}),`\n`]}),`\n`]}),`\n`]}),`\n`,(0,e.jsx)(s,{y:4}),`\n`,(0,e.jsx)(t.h2,{id:\"api\",children:\"API\"}),`\n`,(0,e.jsx)(t.h3,{id:\"inputotp-props\",children:\"InputOtp Props\"}),`\n`,(0,e.jsx)(o,{data:[{attribute:\"length\",type:\"number\",description:\"The length of the input-otp.\",default:\"4\"},{attribute:\"allowedKeys\",type:\"regEx string\",description:\"The allowed keys for the input-otp.\",default:\"^[0-9]*$\"},{attribute:\"variant\",type:\"flat | bordered | faded | underlined\",description:\"The variant of the input-otp.\",default:\"flat\"},{attribute:\"color\",type:\"default | primary | secondary | success | warning | danger\",description:\"The color of the input-otp.\",default:\"default\"},{attribute:\"size\",type:\"sm | md | lg\",description:\"The size of the input-otp.\",default:\"md\"},{attribute:\"radius\",type:\"none | sm | md | lg | full\",description:\"The radius of the input-otp.\",default:\"-\"},{attribute:\"value\",type:\"string\",description:\"The current value of the input-otp (controlled).\",default:\"-\"},{attribute:\"defaultValue\",type:\"string\",description:\"The default value of the input-otp (uncontrolled).\",default:\"-\"},{attribute:\"description\",type:\"ReactNode\",description:\"Provides additional information or hints about the input requirements.\",default:\"-\"},{attribute:\"errorMessage\",type:\"ReactNode | ((v: ValidationResult) => ReactNode)\",description:\"An error message for the input-otp. It is only shown when isInvalid is set to true\",default:\"-\"},{attribute:\"fullWidth\",type:\"boolean\",description:\"When true, the InputOtp expands to fill its parent container width.\",default:\"false\"},{attribute:\"isRequired\",type:\"boolean\",description:\"Marks the input as required for form submission.\",default:\"false\"},{attribute:\"isReadOnly\",type:\"boolean\",description:\"When true, allows selection but prevents user modification.\",default:\"false\"},{attribute:\"isDisabled\",type:\"boolean\",description:\"Whether the input-otp is disabled.\",default:\"false\"},{attribute:\"isInvalid\",type:\"boolean\",description:\"Whether the input-otp is invalid.\",default:\"false\"},{attribute:\"baseRef\",type:\"RefObject<HTMLDivElement>\",description:\"The ref to the base element.\",default:\"-\"},{attribute:\"disableAnimation\",type:\"boolean\",description:\"Whether the input-otp should be animated.\",default:\"false\"},{attribute:\"classNames\",type:\"Partial<Record<'base' | 'inputWrapper' | 'input' | 'segmentWrapper' | 'segment' | 'caret' | 'passwordChar' | 'helperWrapper' | 'description' | 'errorMessage', string>>\",description:\"Allows to set custom class names for the Input slots.\",default:\"-\"},{attribute:\"autoFocus\",type:\"boolean\",description:\"Whether the element should receive focus on render.\",default:\"false\"},{attribute:\"textAlign\",type:\"left | center | right\",description:\"The text alignment of the input segments\",default:\"center\"},{attribute:\"pushPasswordManagerStrategy\",type:\"'none' | 'hidden' | 'input'\",description:\"Strategy for password manager support\",default:\"-\"},{attribute:\"pasteTransformer\",type:\"(text: string) => string\",description:\"A function to transform pasted text before it's inserted into the input.\",default:\"-\"},{attribute:\"containerClassName\",type:\"string\",description:\"Class name for the input container\",default:\"-\"},{attribute:\"noScriptCSSFallback\",type:\"string\",description:\"CSS fallback for when JavaScript is disabled\",default:\"-\"}]}),`\n`,(0,e.jsx)(t.h3,{id:\"inputotp-events\",children:\"InputOtp Events\"}),`\n`,(0,e.jsx)(o,{data:[{attribute:\"onChange\",type:\"React.ChangeEvent<HTMLInputElement>\",description:\"Handler that is called when the element's value changes. You can pull out the new value by accessing event.target.value (string).\",default:\"-\"},{attribute:\"onValueChange\",type:\"(value: string) => void\",description:\"Handler that is called when the element's value changes.\",default:\"-\"},{attribute:\"onComplete\",type:\"(value: string) => void\",description:\"Handler that is called when the element's value is completely filled.\",default:\"-\"}]})]})}function X(r={}){let{wrapper:t}=r.components||{};return t?(0,e.jsx)(t,{...r,children:(0,e.jsx)(U,{...r})}):U(r)}function a(r,t){throw new Error(\"Expected \"+(t?\"component\":\"object\")+\" `\"+r+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return oe(Ee);})();\n;return Component;"
  },
  "_id": "docs/components/input-otp.mdx",
  "_raw": {
    "sourceFilePath": "docs/components/input-otp.mdx",
    "sourceFileName": "input-otp.mdx",
    "sourceFileDir": "docs/components",
    "contentType": "mdx",
    "flattenedPath": "docs/components/input-otp"
  },
  "type": "Doc",
  "slug": "/docs/components/input-otp",
  "slugAsParams": "components/input-otp",
  "url": "/docs/components/input-otp"
}