{
  "title": "Form",
  "description": "A form is a group of inputs that allows users to submit data to a server, with support for providing field validation errors.",
  "body": {
    "raw": "\nimport {formContent} from \"@/content/components/form\";\n\n# Form\n\nA form is a group of inputs that allows users to submit data to a server, with support for providing field validation errors.\n\n<ComponentLinks component=\"form\" />\n\n---\n\n<CarbonAd />\n\n## Installation\n\n<PackageManagers\n  showGlobalInstallWarning\n  commands={{\n    cli: \"npx heroui-cli@latest add form\",\n    npm: \"npm install @heroui/form\",\n    yarn: \"yarn add @heroui/form\",\n    pnpm: \"pnpm add @heroui/form\",\n    bun: \"bun add @heroui/form\",\n  }}\n/>\n\n## Import\n\n<ImportTabs\n  commands={{\n    main: 'import {Form} from \"@heroui/react\";',\n    individual: 'import {Form} from \"@heroui/form\";',\n  }}\n/>\n\n## Usage\n\n<CodeDemo title=\"Usage\" files={formContent.usage} />\n\n## Anatomy\n\nA `Form` is a container for input elements and submit/reset buttons, with support for validation messages. When labeled with `aria-label` or `aria-labelledby`, it becomes a navigable [form landmark](https://www.w3.org/WAI/ARIA/apg/patterns/landmarks/examples/form.html) for assistive technology.\n\n```tsx\nimport {Form, Button} from '@heroui/react';\n\n<Form>\n  {/* ... */}\n  <Button type=\"submit\" />\n  <Button type=\"reset\" />\n</Form>\n```\n\n## Events\n\nThe `onSubmit` event will be triggered when a user submits the form with the `Enter` key or by pressing a submit button. The onReset event will be triggered when a user presses a reset button.\n\n<CodeDemo title=\"Events\" files={formContent.events} highlightedLines={[39, 41, 42, 44]} />\n\n## Validation\n\n`Form` supports native HTML constraint validation with customizable UI, custom validation functions, and server-side validation. Server-side validation errors can be provided via the `validationErrors` prop as an object mapping field names to error messages, which are cleared when the user modifies the field.\n\n<CodeDemo title=\"Validation\" files={formContent.serverValidation} />\n\nSee the [Forms](/docs/guide/forms) guide to learn more about form validation, including client-side validation, and integration with other frameworks and libraries.\n\n\n### Validation Behavior\n\n`Form` validation uses native validation behavior by default, but can be switched to ARIA validation by setting `validationBehavior=\"aria\"`. ARIA validation shows realtime errors without blocking submission. This can be set at the form or field level.\nTo set the default behavior at the app level, you can change the form defaults for your entire app using [HeroUI Provider](/docs/api-references/heroui-provider).\n\n\n```tsx\n<Form validationBehavior=\"aria\">\n  <Input\n    isRequired\n    name=\"username\"\n    label=\"Username\"\n    labelPlacement=\"outside\"\n    placeholder=\"Enter your username\"\n    validate={(value) => {\n      if (value.length < 3) {\n        return \"Username must be at least 3 characters long\";\n      }\n\n      return value === \"admin\" ? \"Nice try!\" : null;\n    }}\n  />\n  <Button type=\"submit\">Submit</Button>\n</Form>\n```\n\n<CodeDemo title=\"Validation Behavior\" files={formContent.customValidationAria} />\n\n## Accessibility\n\n- Built with a native HTML `<form>` element, with support for ARIA labelling to create a [form landmark](https://www.w3.org/WAI/ARIA/apg/patterns/landmarks/examples/form.html).\n- Full support for browser features like form autofill.\n- Support for native HTML constraint validation with customizable UI, custom validation functions, realtime validation, and server-side validation errors.\n\n\n<Spacer y={4} />\n\n## API\n\n### Form Props\n\n<APITable\n  data={[\n    {\n      attribute: \"children\",\n      type: \"ReactNode\",\n      description: \"The wrapped component.\",\n      default: \"-\",\n    },\n    {\n      attribute: \"validationBehavior\",\n      type: \"'native' | 'aria'\",\n      description:\n        \"Whether to use native HTML form validation to prevent form submission when a field value is missing or invalid, or mark fields as required or invalid via ARIA.\",\n      default: \"native\",\n    },\n    {\n      attribute: \"validationErrors\",\n      type: \"Record<string, string | string[]>\",\n      description: \"Validation errors for the form, typically returned by a server. This should be set to an object mapping from input names to errors.\",\n      default: \"-\",\n    },\n    {\n      attribute: \"action\",\n      type: \"string | FormHTMLAttributes<HTMLFormElement>['action']\",\n      description: \"Where to send the form-data when the form is submitted. See MDN.\",\n      default: \"-\",\n    },\n    {\n      attribute: \"encType\",\n      type: \"'application/x-www-form-urlencoded' | 'multipart/form-data' | 'text/plain'\",\n      description: \"The enctype attribute specifies how the form-data should be encoded when submitting it to the server. See MDN.\",\n      default: \"-\",\n    },\n    {\n      attribute: \"method\",\n      type: \"'get' | 'post' | 'dialog'\",\n      description: \"The HTTP method to submit the form with. See MDN.\",\n      default: \"-\",\n    },\n    {\n      attribute: \"target\",\n      type: \"'_blank' | '_self' | '_parent' | '_top'\",\n      description: \"The target attribute specifies a name or a keyword that indicates where to display the response that is received after submitting the form. See MDN.\",\n      default: \"-\",\n    },\n    {\n      attribute: \"autoComplete\",\n      type: \"'off' | 'on'\",\n      description: \"Indicates whether input elements can by default have their values automatically completed by the browser. See MDN.\",\n      default: \"-\",\n    },\n    {\n      attribute: \"autoCapitalize\",\n      type: \"'off' | 'none' | 'on' | 'sentences' | 'words' | 'characters'\",\n      description: \"Controls whether inputted text is automatically capitalized and, if so, in what manner. See MDN.\",\n      default: \"-\",\n    },\n    {\n      attribute: \"className\",\n      type: \"string\",\n      description: \"The CSS className for the element.\",\n      default: \"-\",\n    },\n    {\n      attribute: \"style\",\n      type: \"CSSProperties\",\n      description: \"The inline style for the element.\",\n      default: \"-\",\n    },\n  ]}\n/>\n",
    "code": "var Component=(()=>{var q=Object.create;var l=Object.defineProperty;var V=Object.getOwnPropertyDescriptor;var _=Object.getOwnPropertyNames;var L=Object.getPrototypeOf,O=Object.prototype.hasOwnProperty;var H=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),z=(r,e)=>{for(var a in e)l(r,a,{get:e[a],enumerable:!0})},p=(r,e,a,n)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of _(e))!O.call(r,o)&&o!==a&&l(r,o,{get:()=>e[o],enumerable:!(n=V(e,o))||n.enumerable});return r};var W=(r,e,a)=>(a=r!=null?q(L(r)):{},p(e||!r||!r.__esModule?l(a,\"default\",{value:r,enumerable:!0}):a,r)),J=r=>p(l({},\"__esModule\",{value:!0}),r);var h=H((be,f)=>{f.exports=_jsx_runtime});var fe={};z(fe,{default:()=>U,frontmatter:()=>pe});var t=W(h());var b=`import {Form, Input, Select, SelectItem, Checkbox, Button} from \"@heroui/react\";\n\nexport default function App() {\n  const [password, setPassword] = React.useState(\"\");\n  const [submitted, setSubmitted] = React.useState(null);\n  const [errors, setErrors] = React.useState({});\n\n  // Real-time password validation\n  const getPasswordError = (value) => {\n    if (value.length < 4) {\n      return \"Password must be 4 characters or more\";\n    }\n    if ((value.match(/[A-Z]/g) || []).length < 1) {\n      return \"Password needs at least 1 uppercase letter\";\n    }\n    if ((value.match(/[^a-z]/gi) || []).length < 1) {\n      return \"Password needs at least 1 symbol\";\n    }\n\n    return null;\n  };\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    const data = Object.fromEntries(new FormData(e.currentTarget));\n\n    // Custom validation checks\n    const newErrors = {};\n\n    // Password validation\n    const passwordError = getPasswordError(data.password);\n\n    if (passwordError) {\n      newErrors.password = passwordError;\n    }\n\n    // Username validation\n    if (data.name === \"admin\") {\n      newErrors.name = \"Nice try! Choose a different username\";\n    }\n\n    if (Object.keys(newErrors).length > 0) {\n      setErrors(newErrors);\n\n      return;\n    }\n\n    if (data.terms !== \"true\") {\n      setErrors({terms: \"Please accept the terms\"});\n\n      return;\n    }\n\n    // Clear errors and submit\n    setErrors({});\n    setSubmitted(data);\n  };\n\n  return (\n    <Form\n      className=\"w-full justify-center items-center space-y-4\"\n      validationErrors={errors}\n      onReset={() => setSubmitted(null)}\n      onSubmit={onSubmit}\n    >\n      <div className=\"flex flex-col gap-4 max-w-md\">\n        <Input\n          isRequired\n          errorMessage={({validationDetails}) => {\n            if (validationDetails.valueMissing) {\n              return \"Please enter your name\";\n            }\n\n            return errors.name;\n          }}\n          label=\"Name\"\n          labelPlacement=\"outside\"\n          name=\"name\"\n          placeholder=\"Enter your name\"\n        />\n\n        <Input\n          isRequired\n          errorMessage={({validationDetails}) => {\n            if (validationDetails.valueMissing) {\n              return \"Please enter your email\";\n            }\n            if (validationDetails.typeMismatch) {\n              return \"Please enter a valid email address\";\n            }\n          }}\n          label=\"Email\"\n          labelPlacement=\"outside\"\n          name=\"email\"\n          placeholder=\"Enter your email\"\n          type=\"email\"\n        />\n\n        <Input\n          isRequired\n          errorMessage={getPasswordError(password)}\n          isInvalid={getPasswordError(password) !== null}\n          label=\"Password\"\n          labelPlacement=\"outside\"\n          name=\"password\"\n          placeholder=\"Enter your password\"\n          type=\"password\"\n          value={password}\n          onValueChange={setPassword}\n        />\n\n        <Select\n          isRequired\n          label=\"Country\"\n          labelPlacement=\"outside\"\n          name=\"country\"\n          placeholder=\"Select country\"\n        >\n          <SelectItem key=\"ar\">Argentina</SelectItem>\n          <SelectItem key=\"us\">United States</SelectItem>\n          <SelectItem key=\"ca\">Canada</SelectItem>\n          <SelectItem key=\"uk\">United Kingdom</SelectItem>\n          <SelectItem key=\"au\">Australia</SelectItem>\n        </Select>\n\n        <Checkbox\n          isRequired\n          classNames={{\n            label: \"text-small\",\n          }}\n          isInvalid={!!errors.terms}\n          name=\"terms\"\n          validationBehavior=\"aria\"\n          value=\"true\"\n          onValueChange={() => setErrors((prev) => ({...prev, terms: undefined}))}\n        >\n          I agree to the terms and conditions\n        </Checkbox>\n\n        {errors.terms && <span className=\"text-danger text-small\">{errors.terms}</span>}\n\n        <div className=\"flex gap-4\">\n          <Button className=\"w-full\" color=\"primary\" type=\"submit\">\n            Submit\n          </Button>\n          <Button type=\"reset\" variant=\"bordered\">\n            Reset\n          </Button>\n        </div>\n      </div>\n\n      {submitted && (\n        <div className=\"text-small text-default-500 mt-4\">\n          Submitted data: <pre>{JSON.stringify(submitted, null, 2)}</pre>\n        </div>\n      )}\n    </Form>\n  );\n}\n`;var Y={\"/App.jsx\":b},v={...Y};var g=`import {Form, Input, Button} from \"@heroui/react\";\n\nexport default function App() {\n  const [submitted, setSubmitted] = React.useState(null);\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n\n    const data = Object.fromEntries(new FormData(e.currentTarget));\n\n    setSubmitted(data);\n  };\n\n  return (\n    <Form className=\"w-full max-w-xs\" onSubmit={onSubmit}>\n      <Input\n        isRequired\n        errorMessage=\"Please enter a valid email\"\n        label=\"Email\"\n        labelPlacement=\"outside\"\n        name=\"email\"\n        placeholder=\"Enter your email\"\n        type=\"email\"\n      />\n      <Button type=\"submit\" variant=\"bordered\">\n        Submit\n      </Button>\n      {submitted && (\n        <div className=\"text-small text-default-500\">\n          You submitted: <code>{JSON.stringify(submitted)}</code>\n        </div>\n      )}\n    </Form>\n  );\n}\n`;var G={\"/App.jsx\":g},w={...G};var y=`import {Form, Input, Button} from \"@heroui/react\";\n\nexport default function App() {\n  const [email, setEmail] = React.useState(\"\");\n  const [submitted, setSubmitted] = React.useState(null);\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n\n    const data = Object.fromEntries(new FormData(e.currentTarget));\n\n    setSubmitted(data);\n  };\n\n  return (\n    <Form className=\"w-full max-w-xs\" onSubmit={onSubmit}>\n      <Input\n        isRequired\n        errorMessage=\"Please enter a valid email\"\n        label=\"Email\"\n        labelPlacement=\"outside\"\n        name=\"email\"\n        placeholder=\"Enter your email\"\n        type=\"email\"\n        value={email}\n        onValueChange={setEmail}\n      />\n      <Button type=\"submit\" variant=\"bordered\">\n        Submit\n      </Button>\n      {submitted && (\n        <div className=\"text-small text-default-500\">\n          You submitted: <code>{JSON.stringify(submitted)}</code>\n        </div>\n      )}\n    </Form>\n  );\n}\n`;var $={\"/App.jsx\":y},x={...$};var S=`import {Form, Input, Button} from \"@heroui/react\";\n\nexport default function App() {\n  const onSubmit = (e) => {\n    e.preventDefault();\n  };\n\n  return (\n    <Form className=\"w-full max-w-xs\" onSubmit={onSubmit}>\n      <Input\n        isRequired\n        errorMessage=\"Please enter a valid email\"\n        label=\"Email\"\n        labelPlacement=\"outside\"\n        name=\"email\"\n        placeholder=\"Enter your email\"\n        type=\"email\"\n      />\n      <Button type=\"submit\" variant=\"bordered\">\n        Submit\n      </Button>\n    </Form>\n  );\n}\n`;var ee={\"/App.jsx\":S},A={...ee};var I=`import {Form, Input, Button} from \"@heroui/react\";\n\nexport default function App() {\n  const onSubmit = (e) => {\n    e.preventDefault();\n  };\n\n  return (\n    <Form className=\"w-full max-w-xs\" onSubmit={onSubmit}>\n      <Input\n        isRequired\n        errorMessage={({validationDetails}) => {\n          if (validationDetails.valueMissing) {\n            return \"Please enter a valid name\";\n          }\n        }}\n        label=\"Name\"\n        labelPlacement=\"outside\"\n        name=\"name\"\n        placeholder=\"Enter your name\"\n        type=\"text\"\n      />\n      <Button type=\"submit\" variant=\"bordered\">\n        Submit\n      </Button>\n    </Form>\n  );\n}\n`;var re={\"/App.jsx\":I},E={...re};var F=`import {Form, Input, Button} from \"@heroui/react\";\n\nexport default function App() {\n  const onSubmit = (e) => {\n    e.preventDefault();\n  };\n\n  return (\n    <Form className=\"w-full max-w-xs\" onSubmit={onSubmit}>\n      <Input\n        isRequired\n        label=\"Username\"\n        labelPlacement=\"outside\"\n        name=\"username\"\n        placeholder=\"Enter your username\"\n        type=\"text\"\n        validate={(value) => {\n          if (value.length < 3) {\n            return \"Username must be at least 3 characters long\";\n          }\n\n          return value === \"admin\" ? \"Nice try!\" : null;\n        }}\n      />\n      <Button type=\"submit\" variant=\"bordered\">\n        Submit\n      </Button>\n    </Form>\n  );\n}\n`;var oe={\"/App.jsx\":F},P={...oe};var B=`import {Form, Input, Button} from \"@heroui-org/react\";\n\nexport default function App() {\n  const onSubmit = (e) => {\n    e.preventDefault();\n  };\n\n  return (\n    <Form className=\"w-full max-w-xs\" validationBehavior=\"aria\" onSubmit={onSubmit}>\n      <Input\n        isRequired\n        label=\"Username\"\n        labelPlacement=\"outside\"\n        name=\"username\"\n        placeholder=\"Enter your username\"\n        type=\"text\"\n        validate={(value) => {\n          if (value.length < 3) {\n            return \"Username must be at least 3 characters long\";\n          }\n\n          return value === \"admin\" ? \"Nice try!\" : null;\n        }}\n      />\n      <Button type=\"submit\" variant=\"bordered\">\n        Submit\n      </Button>\n    </Form>\n  );\n}\n`;var ne={\"/App.jsx\":B},N={...ne};var R=`import {Input} from \"@heroui/react\";\n\nexport default function App() {\n  const [password, setPassword] = React.useState(\"\");\n  const errors = [];\n\n  if (password.length < 4) {\n    errors.push(\"Password must be 4 characters or more.\");\n  }\n  if ((password.match(/[A-Z]/g) || []).length < 1) {\n    errors.push(\"Password must include at least 1 upper case letter\");\n  }\n  if ((password.match(/[^a-z]/gi) || []).length < 1) {\n    errors.push(\"Password must include at least 1 symbol.\");\n  }\n\n  return (\n    <Input\n      className=\"max-w-xs\"\n      errorMessage={() => (\n        <ul>\n          {errors.map((error, i) => (\n            <li key={i}>{error}</li>\n          ))}\n        </ul>\n      )}\n      isInvalid={errors.length > 0}\n      label=\"Password\"\n      labelPlacement=\"outside\"\n      placeholder=\"Enter your password\"\n      value={password}\n      variant=\"bordered\"\n      onValueChange={setPassword}\n    />\n  );\n}\n`;var le={\"/App.jsx\":R},M={...le};var D=`import {Form, Input, Button} from \"@heroui/react\";\n\nexport default function App() {\n  const [errors, setErrors] = React.useState({});\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n\n    const data = Object.fromEntries(new FormData(e.currentTarget));\n\n    if (!data.username) {\n      setErrors({username: \"Username is required\"});\n\n      return;\n    }\n\n    const result = callServer(data);\n\n    setErrors(result.errors);\n  };\n\n  return (\n    <Form\n      className=\"w-full max-w-xs flex flex-col gap-3\"\n      validationErrors={errors}\n      onSubmit={onSubmit}\n    >\n      <Input\n        label=\"Username\"\n        labelPlacement=\"outside\"\n        name=\"username\"\n        placeholder=\"Enter your username\"\n      />\n      <Button type=\"submit\" variant=\"flat\">\n        Submit\n      </Button>\n    </Form>\n  );\n}\n\n// Fake server used in this example.\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nfunction callServer(data) {\n  return {\n    errors: {\n      username: \"Sorry, this username is taken.\",\n    },\n  };\n}\n`;var me={\"/App.jsx\":D},k={...me};var T=`import {Form, Input, Button} from \"@heroui/react\";\n\nexport default function App() {\n  const [action, setAction] = React.useState(null);\n\n  return (\n    <Form\n      className=\"w-full max-w-xs flex flex-col gap-4\"\n      onReset={() => setAction(\"reset\")}\n      onSubmit={(e) => {\n        e.preventDefault();\n        let data = Object.fromEntries(new FormData(e.currentTarget));\n\n        setAction(\\`submit \\${JSON.stringify(data)}\\`);\n      }}\n    >\n      <Input\n        isRequired\n        errorMessage=\"Please enter a valid username\"\n        label=\"Username\"\n        labelPlacement=\"outside\"\n        name=\"username\"\n        placeholder=\"Enter your username\"\n        type=\"text\"\n      />\n\n      <Input\n        isRequired\n        errorMessage=\"Please enter a valid email\"\n        label=\"Email\"\n        labelPlacement=\"outside\"\n        name=\"email\"\n        placeholder=\"Enter your email\"\n        type=\"email\"\n      />\n      <div className=\"flex gap-2\">\n        <Button color=\"primary\" type=\"submit\">\n          Submit\n        </Button>\n        <Button type=\"reset\" variant=\"flat\">\n          Reset\n        </Button>\n      </div>\n      {action && (\n        <div className=\"text-small text-default-500\">\n          Action: <code>{action}</code>\n        </div>\n      )}\n    </Form>\n  );\n}\n`;var ce={\"/App.jsx\":T},C={...ce};var s={demo:v,usage:w,controlled:x,nativeValidation:A,customErrorMessages:E,customValidation:P,customValidationAria:N,realTimeValidation:M,serverValidation:k,events:C};var pe={title:\"Form\",description:\"A form is a group of inputs that allows users to submit data to a server, with support for providing field validation errors.\"};function j(r){let e={a:\"a\",code:\"code\",h1:\"h1\",h2:\"h2\",h3:\"h3\",hr:\"hr\",li:\"li\",p:\"p\",pre:\"pre\",ul:\"ul\",...r.components},{APITable:a,CarbonAd:n,CodeDemo:o,ComponentLinks:u,ImportTabs:m,PackageManagers:d,Spacer:c}=e;return a||i(\"APITable\",!0),n||i(\"CarbonAd\",!0),o||i(\"CodeDemo\",!0),u||i(\"ComponentLinks\",!0),m||i(\"ImportTabs\",!0),d||i(\"PackageManagers\",!0),c||i(\"Spacer\",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h1,{id:\"form\",children:\"Form\"}),`\n`,(0,t.jsx)(e.p,{children:\"A form is a group of inputs that allows users to submit data to a server, with support for providing field validation errors.\"}),`\n`,(0,t.jsx)(u,{component:\"form\"}),`\n`,(0,t.jsx)(e.hr,{}),`\n`,(0,t.jsx)(n,{}),`\n`,(0,t.jsx)(e.h2,{id:\"installation\",children:\"Installation\"}),`\n`,(0,t.jsx)(d,{showGlobalInstallWarning:!0,commands:{cli:\"npx heroui-cli@latest add form\",npm:\"npm install @heroui/form\",yarn:\"yarn add @heroui/form\",pnpm:\"pnpm add @heroui/form\",bun:\"bun add @heroui/form\"}}),`\n`,(0,t.jsx)(e.h2,{id:\"import\",children:\"Import\"}),`\n`,(0,t.jsx)(m,{commands:{main:'import {Form} from \"@heroui/react\";',individual:'import {Form} from \"@heroui/form\";'}}),`\n`,(0,t.jsx)(e.h2,{id:\"usage\",children:\"Usage\"}),`\n`,(0,t.jsx)(o,{title:\"Usage\",files:s.usage}),`\n`,(0,t.jsx)(e.h2,{id:\"anatomy\",children:\"Anatomy\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"A \",(0,t.jsx)(e.code,{children:\"Form\"}),\" is a container for input elements and submit/reset buttons, with support for validation messages. When labeled with \",(0,t.jsx)(e.code,{children:\"aria-label\"}),\" or \",(0,t.jsx)(e.code,{children:\"aria-labelledby\"}),\", it becomes a navigable \",(0,t.jsx)(e.a,{href:\"https://www.w3.org/WAI/ARIA/apg/patterns/landmarks/examples/form.html\",children:\"form landmark\"}),\" for assistive technology.\"]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-tsx\",children:`import {Form, Button} from '@heroui/react';\n\n<Form>\n  {/* ... */}\n  <Button type=\"submit\" />\n  <Button type=\"reset\" />\n</Form>\n`})}),`\n`,(0,t.jsx)(e.h2,{id:\"events\",children:\"Events\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"The \",(0,t.jsx)(e.code,{children:\"onSubmit\"}),\" event will be triggered when a user submits the form with the \",(0,t.jsx)(e.code,{children:\"Enter\"}),\" key or by pressing a submit button. The onReset event will be triggered when a user presses a reset button.\"]}),`\n`,(0,t.jsx)(o,{title:\"Events\",files:s.events,highlightedLines:[39,41,42,44]}),`\n`,(0,t.jsx)(e.h2,{id:\"validation\",children:\"Validation\"}),`\n`,(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.code,{children:\"Form\"}),\" supports native HTML constraint validation with customizable UI, custom validation functions, and server-side validation. Server-side validation errors can be provided via the \",(0,t.jsx)(e.code,{children:\"validationErrors\"}),\" prop as an object mapping field names to error messages, which are cleared when the user modifies the field.\"]}),`\n`,(0,t.jsx)(o,{title:\"Validation\",files:s.serverValidation}),`\n`,(0,t.jsxs)(e.p,{children:[\"See the \",(0,t.jsx)(e.a,{href:\"/docs/guide/forms\",children:\"Forms\"}),\" guide to learn more about form validation, including client-side validation, and integration with other frameworks and libraries.\"]}),`\n`,(0,t.jsx)(e.h3,{id:\"validation-behavior\",children:\"Validation Behavior\"}),`\n`,(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.code,{children:\"Form\"}),\" validation uses native validation behavior by default, but can be switched to ARIA validation by setting \",(0,t.jsx)(e.code,{children:'validationBehavior=\"aria\"'}),`. ARIA validation shows realtime errors without blocking submission. This can be set at the form or field level.\nTo set the default behavior at the app level, you can change the form defaults for your entire app using `,(0,t.jsx)(e.a,{href:\"/docs/api-references/heroui-provider\",children:\"HeroUI Provider\"}),\".\"]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-tsx\",children:`<Form validationBehavior=\"aria\">\n  <Input\n    isRequired\n    name=\"username\"\n    label=\"Username\"\n    labelPlacement=\"outside\"\n    placeholder=\"Enter your username\"\n    validate={(value) => {\n      if (value.length < 3) {\n        return \"Username must be at least 3 characters long\";\n      }\n\n      return value === \"admin\" ? \"Nice try!\" : null;\n    }}\n  />\n  <Button type=\"submit\">Submit</Button>\n</Form>\n`})}),`\n`,(0,t.jsx)(o,{title:\"Validation Behavior\",files:s.customValidationAria}),`\n`,(0,t.jsx)(e.h2,{id:\"accessibility\",children:\"Accessibility\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[\"Built with a native HTML \",(0,t.jsx)(e.code,{children:\"<form>\"}),\" element, with support for ARIA labelling to create a \",(0,t.jsx)(e.a,{href:\"https://www.w3.org/WAI/ARIA/apg/patterns/landmarks/examples/form.html\",children:\"form landmark\"}),\".\"]}),`\n`,(0,t.jsx)(e.li,{children:\"Full support for browser features like form autofill.\"}),`\n`,(0,t.jsx)(e.li,{children:\"Support for native HTML constraint validation with customizable UI, custom validation functions, realtime validation, and server-side validation errors.\"}),`\n`]}),`\n`,(0,t.jsx)(c,{y:4}),`\n`,(0,t.jsx)(e.h2,{id:\"api\",children:\"API\"}),`\n`,(0,t.jsx)(e.h3,{id:\"form-props\",children:\"Form Props\"}),`\n`,(0,t.jsx)(a,{data:[{attribute:\"children\",type:\"ReactNode\",description:\"The wrapped component.\",default:\"-\"},{attribute:\"validationBehavior\",type:\"'native' | 'aria'\",description:\"Whether to use native HTML form validation to prevent form submission when a field value is missing or invalid, or mark fields as required or invalid via ARIA.\",default:\"native\"},{attribute:\"validationErrors\",type:\"Record<string, string | string[]>\",description:\"Validation errors for the form, typically returned by a server. This should be set to an object mapping from input names to errors.\",default:\"-\"},{attribute:\"action\",type:\"string | FormHTMLAttributes<HTMLFormElement>['action']\",description:\"Where to send the form-data when the form is submitted. See MDN.\",default:\"-\"},{attribute:\"encType\",type:\"'application/x-www-form-urlencoded' | 'multipart/form-data' | 'text/plain'\",description:\"The enctype attribute specifies how the form-data should be encoded when submitting it to the server. See MDN.\",default:\"-\"},{attribute:\"method\",type:\"'get' | 'post' | 'dialog'\",description:\"The HTTP method to submit the form with. See MDN.\",default:\"-\"},{attribute:\"target\",type:\"'_blank' | '_self' | '_parent' | '_top'\",description:\"The target attribute specifies a name or a keyword that indicates where to display the response that is received after submitting the form. See MDN.\",default:\"-\"},{attribute:\"autoComplete\",type:\"'off' | 'on'\",description:\"Indicates whether input elements can by default have their values automatically completed by the browser. See MDN.\",default:\"-\"},{attribute:\"autoCapitalize\",type:\"'off' | 'none' | 'on' | 'sentences' | 'words' | 'characters'\",description:\"Controls whether inputted text is automatically capitalized and, if so, in what manner. See MDN.\",default:\"-\"},{attribute:\"className\",type:\"string\",description:\"The CSS className for the element.\",default:\"-\"},{attribute:\"style\",type:\"CSSProperties\",description:\"The inline style for the element.\",default:\"-\"}]})]})}function U(r={}){let{wrapper:e}=r.components||{};return e?(0,t.jsx)(e,{...r,children:(0,t.jsx)(j,{...r})}):j(r)}function i(r,e){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+r+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return J(fe);})();\n;return Component;"
  },
  "_id": "docs/components/form.mdx",
  "_raw": {
    "sourceFilePath": "docs/components/form.mdx",
    "sourceFileName": "form.mdx",
    "sourceFileDir": "docs/components",
    "contentType": "mdx",
    "flattenedPath": "docs/components/form"
  },
  "type": "Doc",
  "slug": "/docs/components/form",
  "slugAsParams": "components/form",
  "url": "/docs/components/form"
}