{
  "title": "Number Input",
  "description": "The numeric input component is designed for users to enter a number, and increase or decrease the value using stepper buttons",
  "body": {
    "raw": "\nimport {numberInputContent} from \"@/content/components/number-input\";\n\n# Number Input\n\nThe numeric input component is designed for users to enter a number, and increase or decrease the value using stepper buttons\n\n<ComponentLinks component=\"number-input\" reactAriaHook=\"useNumberField\" />\n\n---\n\n<CarbonAd/>\n\n## Installation\n\n<PackageManagers\n  showGlobalInstallWarning\n  commands={{\n    cli: \"npx heroui-cli@latest add number-input\",\n    npm: \"npm install @heroui/number-input\",\n    yarn: \"yarn add @heroui/number-input\",\n    pnpm: \"pnpm add @heroui/number-input\",\n    bun: \"bun add @heroui/number-input\"\n  }}\n/>\n\n## Usage\n\n<CodeDemo title=\"Usage\" files={numberInputContent.usage} />\n\n### Disabled\n\n<CodeDemo title=\"Disabled\" files={numberInputContent.disabled} />\n\n### Read Only\n\n<CodeDemo title=\"Read Only\" files={numberInputContent.readOnly} />\n\n### Required\n\nIf you pass the `isRequired` property to the input, it will have a `danger` asterisk at\nthe end of the label and the input will be required.\n\n<CodeDemo title=\"Required\" files={numberInputContent.required} />\n\n### Sizes\n\n<CodeDemo title=\"Sizes\" files={numberInputContent.sizes} />\n\n### Colors\n\n<CodeDemo title=\"Colors\" files={numberInputContent.colors} />\n\n### Variants\n\n<CodeDemo title=\"Variants\" files={numberInputContent.variants} />\n\n### Radius\n\n<CodeDemo title=\"Radius\" files={numberInputContent.radius} />\n\n### Label Placements\n\nYou can change the position of the label by setting the `labelPlacement` property to `inside`, `outside` or `outside-left`.\n\n<CodeDemo title=\"Label Placements\" files={numberInputContent.labelPlacements} />\n\n> **Note**: If the `label` is not passed, the `labelPlacement` property will be `outside` by default.\n\n### Clear Button\n\nIf you pass the `isClearable` property to the input, it will have a clear button at the\nend of input, it will be visible when input has a value.\n\n<CodeDemo title=\"Clear Button\" files={numberInputContent.clearButton} />\n\n### Hide Stepper\n\nYou can hide the stepper buttons by passing the `hideStepper` property.\n\n<CodeDemo title=\"Hide Stepper\" files={numberInputContent.hideStepper} />\n\n### Start & End Content\n\nYou can use the `startContent` and `endContent` properties to add content to the start and end of NumberInput.\n\n<CodeDemo title=\"Start and End Content\" files={numberInputContent.startEndContent} />\n\n### With Label\n\nYou can add a label to the input by passing the `label` property.\n\n<CodeDemo title=\"With Label\" files={numberInputContent.label} />\n\n### With Description\n\nYou can add a description to the input by passing the `description` property.\n\n<CodeDemo title=\"With Description\" files={numberInputContent.description} />\n\n### With Min Value\n\nYou can set the minimum value of the input by passing the `minValue` property.\n\n<CodeDemo title=\"With Min Value\" files={numberInputContent.minValue} />\n\n### With Max Value\n\nYou can set the maximum value of the input by passing the `maxValue` property.\n\n<CodeDemo title=\"With Max Value\" files={numberInputContent.maxValue} />\n\n### With Wheel Disabled\n\nBy default, you can increase or decrease the value with scroll wheel. You can disable changing the vaule with scroll in NumberInput by passing the `isWheelDisabled` property.\n\n<CodeDemo title=\"With Wheel Disabled\" files={numberInputContent.isWheelDisabled} />\n\n### With Format Options\n\nYou can format the value of the input by passing the `formatOptions` property.\n\n<CodeDemo title=\"With Format Options\" files={numberInputContent.formatOptions} />\n\n### With Error Message\n\nYou can combine the `isInvalid` and `errorMessage` properties to show an invalid input. `errorMessage` is only shown when `isInvalid` is set to `true`.\n\n<CodeDemo title=\"With Error Message\" files={numberInputContent.errorMessage} />\n\n### Controlled\n\nYou can use the `value` and `onValueChange` properties to control the input value.\n\n<CodeDemo title=\"Controlled\" files={numberInputContent.controlled} />\n\n> **Note**: HeroUI `NumberInput` also supports native events like `onChange`, useful for form libraries\n> such as [Formik](https://formik.org/) and [React Hook Form](https://react-hook-form.com/).\n\n### With Form\n\n`NumberInput` can be used with a `Form` component to leverage form state management. For more on form and validation behaviors, see the [Forms](/docs/guide/forms) guide.\n\n#### Custom Validation\n\nIn addition to built-in constraints, you can provide a function to the `validate` property for custom validation.\n\n<CodeDemo title=\"Custom Validation\" files={numberInputContent.customValidation} />\n\n#### Realtime Validation\n\nIf you want to display validation errors while the user is typing, you can control the field value and use the `isInvalid` prop along with the `errorMessage` prop.\n\n<CodeDemo title=\"Realtime Validation\" files={numberInputContent.realTimeValidation} />\n\n#### Server Validation\n\nClient-side validation provides immediate feedback, but you should also validate data on the server to ensure accuracy and security.\nHeroUI allows you to display server-side validation errors by using the `validationErrors` prop in the `Form` component.\nThis prop should be an object where each key is the field `name` and the value is the error message.\n\n<CodeDemo title=\"Server Validation\" files={numberInputContent.serverValidation} />\n\n## Slots\n\n- **base**: Input wrapper, it handles alignment, placement, and general appearance.\n- **label**: Label of the input, it is the one that is displayed above, inside or left of the input.\n- **mainWrapper**: Wraps the `inputWrapper`\n- **inputWrapper**: Wraps the `label` (when it is inside) and the `innerWrapper`.\n- **innerWrapper**: Wraps the `input`, the `startContent` and the `endContent`.\n- **input**: The input element.\n- **clearButton**: The clear button, it is at the end of the input.\n- **stepperButton**: The stepper button to increase or decrease the value.\n- **stepperWrapper**: The wrapper for the stepper.\n- **description**: The description of NumberInput.\n- **errorMessage**: The error message of NumberInput.\n\n### Custom Styles\n\nYou can customize the `NumberInput` component by passing custom Tailwind CSS classes to the component slots.\n\n<CodeDemo title=\"Custom Styles\" files={numberInputContent.customStyles} />\n\n<Spacer y={4} />\n\n## Data Attributes\n\n`NumberInput` has the following attributes on the `base` element:\n\n- **data-invalid**:\n  When the input is invalid. Based on `isInvalid` prop.\n- **data-required**:\n  When the input is required. Based on `isRequired` prop.\n- **data-readonly**:\n  When the input is readonly. Based on `isReadOnly` prop.\n- **data-hover**:\n  When the input is being hovered. Based on [useHover](https://react-spectrum.adobe.com/react-aria/useHover.html)\n- **data-focus**:\n  When the input is being focused. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).\n- **data-focus-within**:\n  When the input is being focused or any of its children. Based on [useFocusWithin](https://react-spectrum.adobe.com/react-aria/useFocusWithin.html).\n- **data-focus-visible**:\n  When the input is being focused with the keyboard. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).\n- **data-disabled**:\n  When the input is disabled. Based on `isDisabled` prop.\n- **data-filled**:\n  When the input has content, placeholder, start content or the placeholder is shown.\n- **data-has-elements**:\n  When the input has any element (label, helper text, description, error message).\n- **data-has-helper**:\n  When the input has helper text.\n- **data-has-description**: \n  When the input has a description.\n- **data-has-label**:\n  When the input has a label.\n- **data-has-value**:\n  When the input has a value (placeholder is not shown).\n\n\n<Spacer y={4} />\n\n## Accessibility\n\n- Built with a native `<input>` element with `type=\"number\"`.\n- Visual and ARIA labeling support.\n- Change, clipboard, composition, selection, and input event support.\n- Required and invalid states exposed to assistive technology via ARIA.\n- Support for description, helper text, and error message linked to the input via ARIA.\n\n<Spacer y={4} />\n\n## API\n\n### NumberInput Props\n\n<APITable\n  data={[\n    {\n      attribute: \"children\",\n      type: \"ReactNode\",\n      description: \"The content of the input.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"variant\",\n      type: \"flat | bordered | faded | underlined\",\n      description: \"The variant of the input.\",\n      default: \"flat\"\n    },\n    {\n      attribute: \"color\",\n      type: \"default | primary | secondary | success | warning | danger\",\n      description: \"The color of the input.\",\n      default: \"default\"\n    },\n    {\n      attribute: \"size\",\n      type: \"sm | md | lg\",\n      description: \"The size of the input.\",\n      default: \"md\"\n    },\n    {\n      attribute: \"radius\",\n      type: \"none | sm | md | lg | full\",\n      description: \"The radius of the input.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"name\",\n      type: \"string\",\n      description: \"The name of the input element, used when submitting an HTML form.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"label\",\n      type: \"ReactNode\",\n      description: \"The content to display as the label.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"description\",\n      type: \"ReactNode\",\n      description: \"A description for the input. Provides a description for the input.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"value\",\n      type: \"string\",\n      description: \"The current value of the input (controlled).\",\n      default: \"-\"\n    },\n    {\n      attribute: \"defaultValue\",\n      type: \"string\",\n      description: \"The default value of the input (uncontrolled).\",\n      default: \"-\"\n    },\n    {\n      attribute: \"placeholder\",\n      type: \"string\",\n      description: \"The placeholder of the input.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"errorMessage\",\n      type: \"ReactNode | ((v: ValidationResult) => ReactNode)\",\n      description: \"An error message for the input. It is only shown when isInvalid is set to true\",\n      default: \"-\"\n    },\n    {\n      attribute: \"validate\",\n      type: \"(value: string) => ValidationError | true | null | undefined\",\n      description: \"Validate input values when committing (e.g. on blur), returning error messages for invalid values.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"validationBehavior\",\n      type: \"native | aria\",\n      description: \"Whether to use native HTML form validation or ARIA validation. When wrapped in a Form component, the default is `aria`. Otherwise, the default is `native`.\",\n      default: \"native\"\n    },\n    {\n      attribute: \"minValue\",\n      type: \"number\",\n      description: \"The minimum value of the input.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"maxValue\",\n      type: \"number\",\n      description: \"The maximum value of the input.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"formatOptions\",\n      type: \"Intl.NumberFormatOptions\",\n      description: \"The format options for the input.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"step\",\n      type: \"number\",\n      description: \"The amount that the input value changes with each increment or decrement tick.\",\n      default: \"1\"\n    },\n    {\n      attribute: \"hideStepper\",\n      type: \"boolean\",\n      description: \"Whether the stepper buttons should be hidden.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"isWheelDisabled\",\n      type: \"boolean\",\n      description: \"Whether the wheel should be disabled.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"startContent\",\n      type: \"ReactNode\",\n      description: \"Element to be rendered in the left side of the input.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"endContent\",\n      type: \"ReactNode\",\n      description: \"Element to be rendered in the right side of the input.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"labelPlacement\",\n      type: \"inside | outside | outside-left\",\n      description: \"The position of the label.\",\n      default: \"inside\"\n    },\n    {\n      attribute: \"fullWidth\",\n      type: \"boolean\",\n      description: \"Whether the input should take up the width of its parent.\",\n      default: \"true\"\n    },\n    {\n      attribute: \"isClearable\",\n      type: \"boolean\",\n      description: \"Whether the input should have a clear button.\",\n      default: \"false\"\n    },\n    {\n      attribute: \"isRequired\",\n      type: \"boolean\",\n      description: \"Whether user input is required on the input before form submission.\",\n      default: \"false\"\n    },\n    {\n      attribute: \"isReadOnly\",\n      type: \"boolean\",\n      description: \"Whether the input can be selected but not changed by the user.\",\n      default: \"false\"\n    },\n    {\n      attribute: \"isDisabled\",\n      type: \"boolean\",\n      description: \"Whether the input is disabled.\",\n      default: \"false\"\n    },\n    {\n      attribute: \"isInvalid\",\n      type: \"boolean\",\n      description: \"Whether the input is invalid.\",\n      default: \"false\"\n    },\n    {\n      attribute: \"incrementAriaLabel\",\n      type: \"string\",\n      description: \"A custom aria-label for the increment button. If not provided, the localized string `Increment` is used.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"decrementAriaLabel\",\n      type: \"string\",\n      description: \"A custom aria-label for the decrement button. If not provided, the localized string `Decrement` is used.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"baseRef\",\n      type: \"RefObject<HTMLDivElement>\",\n      description: \"The ref to the base element.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"disableAnimation\",\n      type: \"boolean\",\n      description: \"Whether the input should be animated.\",\n      default: \"false\"\n    },\n    {\n      attribute: \"classNames\",\n      type: \"Partial<Record<'base' | 'label' | 'inputWrapper' | 'innerWrapper' | 'mainWrapper' | 'input' | 'clearButton' | 'stepperButton' | 'helperWrapper' | 'stepperWrapper' | 'description' | 'errorMessage', string>>\",\n      description: \"Allows to set custom class names for the Input slots.\",\n      default: \"-\"\n    }\n  ]}\n/>\n\n### NumberInput Events\n\n<APITable\n  data={[\n    {\n      attribute: \"onChange\",\n      type: \"React.ChangeEvent<HTMLInputElement>\",\n      description: \"Handler that is called when the element's value changes. You can pull out the new value by accessing event.target.value (string).\",\n      default: \"-\"\n    },\n    {\n      attribute: \"onValueChange\",\n      type: \"(value: number) => void\",\n      description: \"Handler that is called when the element's value changes.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"onClear\",\n      type: \"() => void\",\n      description: \"Handler that is called when the clear button is clicked.\",\n      default: \"-\"\n    }\n  ]}\n/>\n\n",
    "code": "var Component=(()=>{var pe=Object.create;var u=Object.defineProperty;var ce=Object.getOwnPropertyDescriptor;var me=Object.getOwnPropertyNames;var he=Object.getPrototypeOf,fe=Object.prototype.hasOwnProperty;var be=(n,t)=>()=>(t||n((t={exports:{}}).exports,t),t.exports),xe=(n,t)=>{for(var i in t)u(n,i,{get:t[i],enumerable:!0})},c=(n,t,i,o)=>{if(t&&typeof t==\"object\"||typeof t==\"function\")for(let r of me(t))!fe.call(n,r)&&r!==i&&u(n,r,{get:()=>t[r],enumerable:!(o=ce(t,r))||o.enumerable});return n};var ve=(n,t,i)=>(i=n!=null?pe(he(n)):{},c(t||!n||!n.__esModule?u(i,\"default\",{value:n,enumerable:!0}):i,n)),ge=n=>c(u({},\"__esModule\",{value:!0}),n);var h=be((xt,m)=>{m.exports=_jsx_runtime});var ft={};xe(ft,{default:()=>de,frontmatter:()=>ht});var e=ve(h());var f=`import {NumberInput} from \"@heroui/react\";\n\nexport default function App() {\n  return <NumberInput className=\"max-w-xs\" placeholder=\"Enter the amount\" />;\n}\n`;var Ne={\"/App.jsx\":f},b={...Ne};var x=`import {NumberInput} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <NumberInput\n      isDisabled\n      aria-label=\"Amount\"\n      className=\"max-w-xs\"\n      defaultValue={1024}\n      placeholder=\"Enter the amount\"\n    />\n  );\n}\n`;var Ae={\"/App.jsx\":x},v={...Ae};var g=`import {NumberInput} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <NumberInput\n      isReadOnly\n      aria-label=\"Amount\"\n      className=\"max-w-xs\"\n      defaultValue={1024}\n      placeholder=\"Enter the amount\"\n      variant=\"bordered\"\n    />\n  );\n}\n`;var We={\"/App.jsx\":g},y={...We};var N=`import {NumberInput} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <NumberInput\n      isRequired\n      className=\"max-w-xs\"\n      defaultValue={1024}\n      label=\"Amount\"\n      placeholder=\"Enter the amount\"\n    />\n  );\n}\n`;var Ve={\"/App.jsx\":N},w={...Ve};var A=`import {NumberInput} from \"@heroui/react\";\n\nexport default function App() {\n  const sizes = [\"sm\", \"md\", \"lg\"];\n\n  return (\n    <div className=\"w-full flex flex-col gap-4\">\n      {sizes.map((size) => (\n        <div key={size} className=\"flex w-full flex-wrap md:flex-nowrap mb-6 md:mb-0 gap-4\">\n          <NumberInput label=\"Amount\" placeholder=\"Enter the amount\" size={size} />\n        </div>\n      ))}\n    </div>\n  );\n}\n`;var Ce={\"/App.jsx\":A},I={...Ce};var W=`import {NumberInput} from \"@heroui/react\";\n\nexport default function App() {\n  const colors = [\"default\", \"primary\", \"secondary\", \"success\", \"warning\", \"danger\"];\n\n  return (\n    <div className=\"w-full flex flex-row flex-wrap gap-4\">\n      {colors.map((color) => (\n        <NumberInput\n          key={color}\n          className=\"max-w-[220px]\"\n          color={color}\n          defaultValue={1024}\n          label=\"Amount\"\n          placeholder=\"Enter the amount\"\n        />\n      ))}\n    </div>\n  );\n}\n`;var Te={\"/App.jsx\":W},S={...Te};var V=`import {NumberInput} from \"@heroui/react\";\n\nexport default function App() {\n  const variants = [\"flat\", \"bordered\", \"underlined\", \"faded\"];\n\n  return (\n    <div className=\"w-full flex flex-col gap-4\">\n      {variants.map((variant) => (\n        <div key={variant} className=\"flex w-full flex-wrap md:flex-nowrap mb-6 md:mb-0 gap-4\">\n          <NumberInput label=\"Amount\" variant={variant} />\n          <NumberInput label=\"Amount\" placeholder=\"Enter the amount\" variant={variant} />\n        </div>\n      ))}\n    </div>\n  );\n}\n`;var De={\"/App.jsx\":V},R={...De};var C=`import {NumberInput} from \"@heroui/react\";\n\nexport default function App() {\n  const radius = [\"full\", \"lg\", \"md\", \"sm\", \"none\"];\n\n  return (\n    <div className=\"w-full flex flex-row flex-wrap gap-4\">\n      {radius.map((r) => (\n        <NumberInput\n          key={r}\n          aria-label={\\`\\${r} radius\\`}\n          className=\"max-w-[220px]\"\n          defaultValue={1024}\n          label=\"Amount\"\n          placeholder=\"Enter the amount\"\n          radius={r}\n        />\n      ))}\n    </div>\n  );\n}\n`;var Fe={\"/App.jsx\":C},E={...Fe};var T=`import {NumberInput} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <NumberInput\n      className=\"max-w-xs\"\n      defaultValue={1024}\n      description=\"Enter the amount\"\n      label=\"Amount\"\n    />\n  );\n}\n`;var Me={\"/App.jsx\":T},k={...Me};var D=`import {NumberInput} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <NumberInput\n      isWheelDisabled\n      className=\"max-w-xs\"\n      defaultValue={1024}\n      label=\"Amount\"\n      placeholder=\"Enter the amount\"\n    />\n  );\n}\n`;var qe={\"/App.jsx\":D},j={...qe};var F=`import {NumberInput} from \"@heroui/react\";\n\nexport default function App() {\n  return <NumberInput className=\"max-w-xs\" defaultValue={1024} label=\"Amount\" />;\n}\n`;var Le={\"/App.jsx\":F},B={...Le};var M=`import {NumberInput} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <NumberInput\n      hideStepper\n      aria-label=\"Amount\"\n      className=\"max-w-xs\"\n      description=\"The value should be greater than or equal to 100\"\n      minValue={100}\n      placeholder=\"Enter the amount\"\n    />\n  );\n}\n`;var He={\"/App.jsx\":M},O={...He};var q=`import {NumberInput} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <NumberInput\n      hideStepper\n      aria-label=\"Amount\"\n      className=\"max-w-xs\"\n      description=\"The value should be less than or equal to 100\"\n      maxValue={100}\n      placeholder=\"Enter the amount\"\n    />\n  );\n}\n`;var Ue={\"/App.jsx\":q},P={...Ue};var L=`import {NumberInput} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <NumberInput\n      hideStepper\n      className=\"max-w-xs\"\n      defaultValue={1024}\n      label=\"Amount\"\n      placeholder=\"Enter the amount\"\n    />\n  );\n}\n`;var Je={\"/App.jsx\":L},z={...Je};var H=`import {NumberInput} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <NumberInput\n      isClearable\n      className=\"max-w-xs\"\n      defaultValue={1024}\n      label=\"Amount\"\n      placeholder=\"Enter the amount\"\n      variant=\"bordered\"\n      // eslint-disable-next-line no-console\n      onClear={() => console.log(\"number input cleared\")}\n    />\n  );\n}\n`;var $e={\"/App.jsx\":H},Y={...$e};var U=`import {NumberInput} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <div className=\"flex flex-col gap-4\">\n      <div className=\"flex w-full flex-wrap md:flex-nowrap mb-6 md:mb-0 gap-4\">\n        <NumberInput\n          label=\"Price\"\n          placeholder=\"0.00\"\n          startContent={\n            <div className=\"pointer-events-none flex items-center\">\n              <span className=\"text-default-400 text-small\">$</span>\n            </div>\n          }\n        />\n        <NumberInput\n          endContent={\n            <div className=\"flex items-center\">\n              <label className=\"sr-only\" htmlFor=\"currency\">\n                Currency\n              </label>\n              <select\n                aria-label=\"Select currency\"\n                className=\"outline-none border-0 bg-transparent text-default-400 text-small\"\n                defaultValue=\"USD\"\n                id=\"currency\"\n                name=\"currency\"\n              >\n                <option aria-label=\"US Dollar\" value=\"USD\">\n                  USD\n                </option>\n                <option aria-label=\"Argentine Peso\" value=\"ARS\">\n                  ARS\n                </option>\n                <option aria-label=\"Euro\" value=\"EUR\">\n                  EUR\n                </option>\n              </select>\n            </div>\n          }\n          label=\"Price\"\n          placeholder=\"0.00\"\n        />\n      </div>\n    </div>\n  );\n}\n`;var Ze={\"/App.jsx\":U},_={...Ze};var J=`import {NumberInput} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <NumberInput\n      className=\"max-w-xs\"\n      defaultValue={1024}\n      errorMessage=\"Please enter a valid number\"\n      isInvalid={true}\n      label=\"Amount\"\n      placeholder=\"Enter the amount\"\n      variant=\"bordered\"\n    />\n  );\n}\n`;var Qe={\"/App.jsx\":J},X={...Qe};var $=`import React from \"react\";\nimport {NumberInput} from \"@heroui/react\";\n\nexport default function App() {\n  const [value, setValue] = React.useState();\n\n  return (\n    <div className=\"w-full flex flex-col gap-2 max-w-[240px]\">\n      <NumberInput\n        label=\"Amount\"\n        placeholder=\"Enter the amount\"\n        value={value}\n        onValueChange={setValue}\n      />\n      <p className=\"text-default-500 text-small\">NumberInput value: {value}</p>\n    </div>\n  );\n}\n`;var tt={\"/App.jsx\":$},G={...tt};var Z=`import React from \"react\";\nimport {Button, Form, NumberInput} from \"@heroui/react\";\n\nexport default function App() {\n  const [submitted, setSubmitted] = React.useState(null);\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    const data = Object.fromEntries(new FormData(e.currentTarget));\n\n    setSubmitted(data);\n  };\n\n  return (\n    <Form className=\"w-full max-w-xs\" onSubmit={onSubmit}>\n      <NumberInput\n        isRequired\n        label=\"Amount\"\n        name=\"amount\"\n        placeholder=\"Enter a number\"\n        validate={(value) => {\n          if (value < 100) {\n            return \"Number must be greater than 100\";\n          }\n\n          if (value > 1000) {\n            return \"Number must be less than 1000\";\n          }\n\n          return value === 777 ? \"Nice try!\" : null;\n        }}\n      />\n      <Button color=\"primary\" type=\"submit\">\n        Submit\n      </Button>\n      {submitted && (\n        <div className=\"text-small text-default-500\">\n          You submitted: <code>{JSON.stringify(submitted)}</code>\n        </div>\n      )}\n    </Form>\n  );\n}\n`;var nt={\"/App.jsx\":Z},K={...nt};var Q=`import {Button, Form, NumberInput} from \"@heroui/react\";\n\nexport default function App() {\n  const [submitted, setSubmitted] = React.useState(null);\n  const [amount, setAmount] = React.useState(null);\n  const errors = [];\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    const data = Object.fromEntries(new FormData(e.currentTarget));\n\n    setSubmitted(data);\n  };\n\n  if (!amount) {\n    errors.push(\"The value must not be empty\");\n  }\n\n  if (amount < 100) {\n    errors.push(\"The value must be greater than 100\");\n  }\n\n  if (amount > 1000) {\n    errors.push(\"The value must be less than 1000\");\n  }\n\n  return (\n    <Form className=\"w-full max-w-xs\" onSubmit={onSubmit}>\n      <NumberInput\n        errorMessage={() => (\n          <ul>\n            {errors.map((error, i) => (\n              <li key={i}>{error}</li>\n            ))}\n          </ul>\n        )}\n        isInvalid={errors.length > 0}\n        label=\"Amount\"\n        name=\"amount\"\n        placeholder=\"Enter a number\"\n        value={amount}\n        onValueChange={setAmount}\n      />\n      <Button color=\"primary\" type=\"submit\">\n        Submit\n      </Button>\n      {submitted && (\n        <div className=\"text-small text-default-500\">\n          You submitted: <code>{JSON.stringify(submitted)}</code>\n        </div>\n      )}\n    </Form>\n  );\n}\n`;var it={\"/App.jsx\":Q},ee={...it};var te=`import {Button, Form, NumberInput} from \"@heroui/react\";\n\nexport default function App() {\n  const [isLoading, setIsLoading] = React.useState(false);\n  const [errors, setErrors] = React.useState({});\n\n  const onSubmit = async (e) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    const data = Object.fromEntries(new FormData(e.currentTarget));\n    const result = await callServer(data);\n\n    setErrors(result.errors);\n    setIsLoading(false);\n  };\n\n  return (\n    <Form className=\"w-full max-w-xs\" validationErrors={errors} onSubmit={onSubmit}>\n      <NumberInput\n        isRequired\n        isDisabled={isLoading}\n        label=\"Amount\"\n        name=\"amount\"\n        placeholder=\"Enter a number\"\n      />\n      <Button color=\"primary\" isLoading={isLoading} type=\"submit\">\n        Submit\n      </Button>\n    </Form>\n  );\n}\n\n// Fake server used in this example.\nasync function callServer(_) {\n  await new Promise((resolve) => setTimeout(resolve, 500));\n\n  return {\n    errors: {\n      amount: \"Sorry, this amount is not valid.\",\n    },\n  };\n}\n`;var ot={\"/App.jsx\":te},re={...ot};var ne=`import {NumberInput} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <div className=\"w-[340px] h-[240px] px-8 rounded-2xl flex justify-center items-center bg-gradient-to-tr from-pink-500 to-yellow-500 text-white shadow-lg\">\n      <NumberInput\n        isClearable\n        classNames={{\n          label: \"text-black/50 dark:text-white/90\",\n          input: [\n            \"bg-transparent\",\n            \"text-black/90 dark:text-white/90\",\n            \"placeholder:text-default-700/50 dark:placeholder:text-white/60\",\n          ],\n          innerWrapper: \"bg-transparent\",\n          inputWrapper: [\n            \"shadow-xl\",\n            \"bg-default-200/50\",\n            \"dark:bg-default/60\",\n            \"backdrop-blur-xl\",\n            \"backdrop-saturate-200\",\n            \"hover:bg-default-200/70\",\n            \"dark:hover:bg-default/70\",\n            \"group-data-[focus=true]:bg-default-200/50\",\n            \"dark:group-data-[focus=true]:bg-default/60\",\n            \"!cursor-text\",\n          ],\n          helperText: \"text-black/50 dark:text-white/90\",\n        }}\n        description=\"The number of apples that Marcus bought\"\n        helperText=\"Must be equal or greater than 1\"\n        label=\"Number of apples\"\n        minValue={1}\n        placeholder=\"Enter a number...\"\n        radius=\"lg\"\n      />\n    </div>\n  );\n}\n`;var ut={\"/App.jsx\":ne},ae={...ut};var ie=`import {NumberInput} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <div className=\"flex flex-col gap-4\">\n      <div className=\"flex w-full flex-wrap md:flex-nowrap mb-6 md:mb-0 gap-4\">\n        <NumberInput\n          className=\"max-w-xs\"\n          defaultValue={6}\n          formatOptions={{\n            style: \"currency\",\n            currency: \"USD\",\n          }}\n          label=\"With Currency\"\n        />\n        <NumberInput\n          className=\"max-w-xs\"\n          defaultValue={6}\n          formatOptions={{\n            signDisplay: \"exceptZero\",\n            minimumFractionDigits: 1,\n            maximumFractionDigits: 2,\n          }}\n          label=\"With Sign\"\n        />\n        <NumberInput\n          className=\"max-w-xs\"\n          defaultValue={6}\n          formatOptions={{\n            style: \"percent\",\n          }}\n          label=\"With Percent\"\n        />\n      </div>\n      <div className=\"flex w-full flex-wrap md:flex-nowrap mb-6 md:mb-0 gap-4\">\n        <NumberInput\n          className=\"max-w-xs\"\n          defaultValue={6}\n          formatOptions={{\n            style: \"currency\",\n            currency: \"EUR\",\n            currencyDisplay: \"code\",\n            currencySign: \"accounting\",\n          }}\n          label=\"With Currency Vaule\"\n        />\n        <NumberInput\n          className=\"max-w-xs\"\n          defaultValue={6}\n          formatOptions={{\n            style: \"unit\",\n            unit: \"inch\",\n            unitDisplay: \"long\",\n          }}\n          label=\"With Unit\"\n        />\n      </div>\n    </div>\n  );\n}\n`;var pt={\"/App.jsx\":ie},le={...pt};var oe=`import {NumberInput} from \"@heroui/react\";\n\nexport default function App() {\n  const placements = [\"inside\", \"outside\", \"outside-left\"];\n\n  return (\n    <div className=\"flex flex-col gap-4\">\n      <div className=\"flex flex-col gap-2\">\n        <h3 className=\"text-default-500 text-small\">Without placeholder</h3>\n        <div className=\"flex w-full flex-wrap items-end md:flex-nowrap mb-6 md:mb-0 gap-4\">\n          {placements.map((placement) => (\n            <NumberInput\n              key={placement}\n              description={placement}\n              label=\"Amount\"\n              labelPlacement={placement}\n            />\n          ))}\n        </div>\n      </div>\n      <div className=\"flex flex-col gap-2\">\n        <h3 className=\"text-default-500 text-small\">With placeholder</h3>\n        <div className=\"flex w-full flex-wrap items-end md:flex-nowrap mb-6 md:mb-0 gap-4\">\n          {placements.map((placement) => (\n            <NumberInput\n              key={placement}\n              description={placement}\n              label=\"Amount\"\n              labelPlacement={placement}\n              placeholder=\"Enter a number\"\n            />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n`;var mt={\"/App.jsx\":oe},se={...mt};var a={usage:b,disabled:v,readOnly:y,required:w,sizes:I,colors:S,variants:R,radius:E,description:k,label:B,isWheelDisabled:j,minValue:O,maxValue:P,clearButton:Y,hideStepper:z,startEndContent:_,errorMessage:X,controlled:G,customValidation:K,realTimeValidation:ee,serverValidation:re,customStyles:ae,formatOptions:le,labelPlacements:se};var ht={title:\"Number Input\",description:\"The numeric input component is designed for users to enter a number, and increase or decrease the value using stepper buttons\"};function ue(n){let t={a:\"a\",blockquote:\"blockquote\",code:\"code\",h1:\"h1\",h2:\"h2\",h3:\"h3\",h4:\"h4\",hr:\"hr\",li:\"li\",p:\"p\",strong:\"strong\",ul:\"ul\",...n.components},{APITable:i,CarbonAd:o,CodeDemo:r,ComponentLinks:d,PackageManagers:p,Spacer:s}=t;return i||l(\"APITable\",!0),o||l(\"CarbonAd\",!0),r||l(\"CodeDemo\",!0),d||l(\"ComponentLinks\",!0),p||l(\"PackageManagers\",!0),s||l(\"Spacer\",!0),(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(t.h1,{id:\"number-input\",children:\"Number Input\"}),`\n`,(0,e.jsx)(t.p,{children:\"The numeric input component is designed for users to enter a number, and increase or decrease the value using stepper buttons\"}),`\n`,(0,e.jsx)(d,{component:\"number-input\",reactAriaHook:\"useNumberField\"}),`\n`,(0,e.jsx)(t.hr,{}),`\n`,(0,e.jsx)(o,{}),`\n`,(0,e.jsx)(t.h2,{id:\"installation\",children:\"Installation\"}),`\n`,(0,e.jsx)(p,{showGlobalInstallWarning:!0,commands:{cli:\"npx heroui-cli@latest add number-input\",npm:\"npm install @heroui/number-input\",yarn:\"yarn add @heroui/number-input\",pnpm:\"pnpm add @heroui/number-input\",bun:\"bun add @heroui/number-input\"}}),`\n`,(0,e.jsx)(t.h2,{id:\"usage\",children:\"Usage\"}),`\n`,(0,e.jsx)(r,{title:\"Usage\",files:a.usage}),`\n`,(0,e.jsx)(t.h3,{id:\"disabled\",children:\"Disabled\"}),`\n`,(0,e.jsx)(r,{title:\"Disabled\",files:a.disabled}),`\n`,(0,e.jsx)(t.h3,{id:\"read-only\",children:\"Read Only\"}),`\n`,(0,e.jsx)(r,{title:\"Read Only\",files:a.readOnly}),`\n`,(0,e.jsx)(t.h3,{id:\"required\",children:\"Required\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"If you pass the \",(0,e.jsx)(t.code,{children:\"isRequired\"}),\" property to the input, it will have a \",(0,e.jsx)(t.code,{children:\"danger\"}),` asterisk at\nthe end of the label and the input will be required.`]}),`\n`,(0,e.jsx)(r,{title:\"Required\",files:a.required}),`\n`,(0,e.jsx)(t.h3,{id:\"sizes\",children:\"Sizes\"}),`\n`,(0,e.jsx)(r,{title:\"Sizes\",files:a.sizes}),`\n`,(0,e.jsx)(t.h3,{id:\"colors\",children:\"Colors\"}),`\n`,(0,e.jsx)(r,{title:\"Colors\",files:a.colors}),`\n`,(0,e.jsx)(t.h3,{id:\"variants\",children:\"Variants\"}),`\n`,(0,e.jsx)(r,{title:\"Variants\",files:a.variants}),`\n`,(0,e.jsx)(t.h3,{id:\"radius\",children:\"Radius\"}),`\n`,(0,e.jsx)(r,{title:\"Radius\",files:a.radius}),`\n`,(0,e.jsx)(t.h3,{id:\"label-placements\",children:\"Label Placements\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"You can change the position of the label by setting the \",(0,e.jsx)(t.code,{children:\"labelPlacement\"}),\" property to \",(0,e.jsx)(t.code,{children:\"inside\"}),\", \",(0,e.jsx)(t.code,{children:\"outside\"}),\" or \",(0,e.jsx)(t.code,{children:\"outside-left\"}),\".\"]}),`\n`,(0,e.jsx)(r,{title:\"Label Placements\",files:a.labelPlacements}),`\n`,(0,e.jsxs)(t.blockquote,{children:[`\n`,(0,e.jsxs)(t.p,{children:[(0,e.jsx)(t.strong,{children:\"Note\"}),\": If the \",(0,e.jsx)(t.code,{children:\"label\"}),\" is not passed, the \",(0,e.jsx)(t.code,{children:\"labelPlacement\"}),\" property will be \",(0,e.jsx)(t.code,{children:\"outside\"}),\" by default.\"]}),`\n`]}),`\n`,(0,e.jsx)(t.h3,{id:\"clear-button\",children:\"Clear Button\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"If you pass the \",(0,e.jsx)(t.code,{children:\"isClearable\"}),` property to the input, it will have a clear button at the\nend of input, it will be visible when input has a value.`]}),`\n`,(0,e.jsx)(r,{title:\"Clear Button\",files:a.clearButton}),`\n`,(0,e.jsx)(t.h3,{id:\"hide-stepper\",children:\"Hide Stepper\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"You can hide the stepper buttons by passing the \",(0,e.jsx)(t.code,{children:\"hideStepper\"}),\" property.\"]}),`\n`,(0,e.jsx)(r,{title:\"Hide Stepper\",files:a.hideStepper}),`\n`,(0,e.jsx)(t.h3,{id:\"start--end-content\",children:\"Start & End Content\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"You can use the \",(0,e.jsx)(t.code,{children:\"startContent\"}),\" and \",(0,e.jsx)(t.code,{children:\"endContent\"}),\" properties to add content to the start and end of NumberInput.\"]}),`\n`,(0,e.jsx)(r,{title:\"Start and End Content\",files:a.startEndContent}),`\n`,(0,e.jsx)(t.h3,{id:\"with-label\",children:\"With Label\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"You can add a label to the input by passing the \",(0,e.jsx)(t.code,{children:\"label\"}),\" property.\"]}),`\n`,(0,e.jsx)(r,{title:\"With Label\",files:a.label}),`\n`,(0,e.jsx)(t.h3,{id:\"with-description\",children:\"With Description\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"You can add a description to the input by passing the \",(0,e.jsx)(t.code,{children:\"description\"}),\" property.\"]}),`\n`,(0,e.jsx)(r,{title:\"With Description\",files:a.description}),`\n`,(0,e.jsx)(t.h3,{id:\"with-min-value\",children:\"With Min Value\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"You can set the minimum value of the input by passing the \",(0,e.jsx)(t.code,{children:\"minValue\"}),\" property.\"]}),`\n`,(0,e.jsx)(r,{title:\"With Min Value\",files:a.minValue}),`\n`,(0,e.jsx)(t.h3,{id:\"with-max-value\",children:\"With Max Value\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"You can set the maximum value of the input by passing the \",(0,e.jsx)(t.code,{children:\"maxValue\"}),\" property.\"]}),`\n`,(0,e.jsx)(r,{title:\"With Max Value\",files:a.maxValue}),`\n`,(0,e.jsx)(t.h3,{id:\"with-wheel-disabled\",children:\"With Wheel Disabled\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"By default, you can increase or decrease the value with scroll wheel. You can disable changing the vaule with scroll in NumberInput by passing the \",(0,e.jsx)(t.code,{children:\"isWheelDisabled\"}),\" property.\"]}),`\n`,(0,e.jsx)(r,{title:\"With Wheel Disabled\",files:a.isWheelDisabled}),`\n`,(0,e.jsx)(t.h3,{id:\"with-format-options\",children:\"With Format Options\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"You can format the value of the input by passing the \",(0,e.jsx)(t.code,{children:\"formatOptions\"}),\" property.\"]}),`\n`,(0,e.jsx)(r,{title:\"With Format Options\",files:a.formatOptions}),`\n`,(0,e.jsx)(t.h3,{id:\"with-error-message\",children:\"With Error Message\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"You can combine the \",(0,e.jsx)(t.code,{children:\"isInvalid\"}),\" and \",(0,e.jsx)(t.code,{children:\"errorMessage\"}),\" properties to show an invalid input. \",(0,e.jsx)(t.code,{children:\"errorMessage\"}),\" is only shown when \",(0,e.jsx)(t.code,{children:\"isInvalid\"}),\" is set to \",(0,e.jsx)(t.code,{children:\"true\"}),\".\"]}),`\n`,(0,e.jsx)(r,{title:\"With Error Message\",files:a.errorMessage}),`\n`,(0,e.jsx)(t.h3,{id:\"controlled\",children:\"Controlled\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"You can use the \",(0,e.jsx)(t.code,{children:\"value\"}),\" and \",(0,e.jsx)(t.code,{children:\"onValueChange\"}),\" properties to control the input value.\"]}),`\n`,(0,e.jsx)(r,{title:\"Controlled\",files:a.controlled}),`\n`,(0,e.jsxs)(t.blockquote,{children:[`\n`,(0,e.jsxs)(t.p,{children:[(0,e.jsx)(t.strong,{children:\"Note\"}),\": HeroUI \",(0,e.jsx)(t.code,{children:\"NumberInput\"}),\" also supports native events like \",(0,e.jsx)(t.code,{children:\"onChange\"}),`, useful for form libraries\nsuch as `,(0,e.jsx)(t.a,{href:\"https://formik.org/\",children:\"Formik\"}),\" and \",(0,e.jsx)(t.a,{href:\"https://react-hook-form.com/\",children:\"React Hook Form\"}),\".\"]}),`\n`]}),`\n`,(0,e.jsx)(t.h3,{id:\"with-form\",children:\"With Form\"}),`\n`,(0,e.jsxs)(t.p,{children:[(0,e.jsx)(t.code,{children:\"NumberInput\"}),\" can be used with a \",(0,e.jsx)(t.code,{children:\"Form\"}),\" component to leverage form state management. For more on form and validation behaviors, see the \",(0,e.jsx)(t.a,{href:\"/docs/guide/forms\",children:\"Forms\"}),\" guide.\"]}),`\n`,(0,e.jsx)(t.h4,{id:\"custom-validation\",children:\"Custom Validation\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"In addition to built-in constraints, you can provide a function to the \",(0,e.jsx)(t.code,{children:\"validate\"}),\" property for custom validation.\"]}),`\n`,(0,e.jsx)(r,{title:\"Custom Validation\",files:a.customValidation}),`\n`,(0,e.jsx)(t.h4,{id:\"realtime-validation\",children:\"Realtime Validation\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"If you want to display validation errors while the user is typing, you can control the field value and use the \",(0,e.jsx)(t.code,{children:\"isInvalid\"}),\" prop along with the \",(0,e.jsx)(t.code,{children:\"errorMessage\"}),\" prop.\"]}),`\n`,(0,e.jsx)(r,{title:\"Realtime Validation\",files:a.realTimeValidation}),`\n`,(0,e.jsx)(t.h4,{id:\"server-validation\",children:\"Server Validation\"}),`\n`,(0,e.jsxs)(t.p,{children:[`Client-side validation provides immediate feedback, but you should also validate data on the server to ensure accuracy and security.\nHeroUI allows you to display server-side validation errors by using the `,(0,e.jsx)(t.code,{children:\"validationErrors\"}),\" prop in the \",(0,e.jsx)(t.code,{children:\"Form\"}),` component.\nThis prop should be an object where each key is the field `,(0,e.jsx)(t.code,{children:\"name\"}),\" and the value is the error message.\"]}),`\n`,(0,e.jsx)(r,{title:\"Server Validation\",files:a.serverValidation}),`\n`,(0,e.jsx)(t.h2,{id:\"slots\",children:\"Slots\"}),`\n`,(0,e.jsxs)(t.ul,{children:[`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"base\"}),\": Input wrapper, it handles alignment, placement, and general appearance.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"label\"}),\": Label of the input, it is the one that is displayed above, inside or left of the input.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"mainWrapper\"}),\": Wraps the \",(0,e.jsx)(t.code,{children:\"inputWrapper\"})]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"inputWrapper\"}),\": Wraps the \",(0,e.jsx)(t.code,{children:\"label\"}),\" (when it is inside) and the \",(0,e.jsx)(t.code,{children:\"innerWrapper\"}),\".\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"innerWrapper\"}),\": Wraps the \",(0,e.jsx)(t.code,{children:\"input\"}),\", the \",(0,e.jsx)(t.code,{children:\"startContent\"}),\" and the \",(0,e.jsx)(t.code,{children:\"endContent\"}),\".\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"input\"}),\": The input element.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"clearButton\"}),\": The clear button, it is at the end of the input.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"stepperButton\"}),\": The stepper button to increase or decrease the value.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"stepperWrapper\"}),\": The wrapper for the stepper.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"description\"}),\": The description of NumberInput.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"errorMessage\"}),\": The error message of NumberInput.\"]}),`\n`]}),`\n`,(0,e.jsx)(t.h3,{id:\"custom-styles\",children:\"Custom Styles\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"You can customize the \",(0,e.jsx)(t.code,{children:\"NumberInput\"}),\" component by passing custom Tailwind CSS classes to the component slots.\"]}),`\n`,(0,e.jsx)(r,{title:\"Custom Styles\",files:a.customStyles}),`\n`,(0,e.jsx)(s,{y:4}),`\n`,(0,e.jsx)(t.h2,{id:\"data-attributes\",children:\"Data Attributes\"}),`\n`,(0,e.jsxs)(t.p,{children:[(0,e.jsx)(t.code,{children:\"NumberInput\"}),\" has the following attributes on the \",(0,e.jsx)(t.code,{children:\"base\"}),\" element:\"]}),`\n`,(0,e.jsxs)(t.ul,{children:[`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-invalid\"}),`:\nWhen the input is invalid. Based on `,(0,e.jsx)(t.code,{children:\"isInvalid\"}),\" prop.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-required\"}),`:\nWhen the input is required. Based on `,(0,e.jsx)(t.code,{children:\"isRequired\"}),\" prop.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-readonly\"}),`:\nWhen the input is readonly. Based on `,(0,e.jsx)(t.code,{children:\"isReadOnly\"}),\" prop.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-hover\"}),`:\nWhen the input is being hovered. Based on `,(0,e.jsx)(t.a,{href:\"https://react-spectrum.adobe.com/react-aria/useHover.html\",children:\"useHover\"})]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-focus\"}),`:\nWhen the input is being focused. Based on `,(0,e.jsx)(t.a,{href:\"https://react-spectrum.adobe.com/react-aria/useFocusRing.html\",children:\"useFocusRing\"}),\".\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-focus-within\"}),`:\nWhen the input is being focused or any of its children. Based on `,(0,e.jsx)(t.a,{href:\"https://react-spectrum.adobe.com/react-aria/useFocusWithin.html\",children:\"useFocusWithin\"}),\".\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-focus-visible\"}),`:\nWhen the input is being focused with the keyboard. Based on `,(0,e.jsx)(t.a,{href:\"https://react-spectrum.adobe.com/react-aria/useFocusRing.html\",children:\"useFocusRing\"}),\".\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-disabled\"}),`:\nWhen the input is disabled. Based on `,(0,e.jsx)(t.code,{children:\"isDisabled\"}),\" prop.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-filled\"}),`:\nWhen the input has content, placeholder, start content or the placeholder is shown.`]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-has-elements\"}),`:\nWhen the input has any element (label, helper text, description, error message).`]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-has-helper\"}),`:\nWhen the input has helper text.`]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-has-description\"}),`:\nWhen the input has a description.`]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-has-label\"}),`:\nWhen the input has a label.`]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-has-value\"}),`:\nWhen the input has a value (placeholder is not shown).`]}),`\n`]}),`\n`,(0,e.jsx)(s,{y:4}),`\n`,(0,e.jsx)(t.h2,{id:\"accessibility\",children:\"Accessibility\"}),`\n`,(0,e.jsxs)(t.ul,{children:[`\n`,(0,e.jsxs)(t.li,{children:[\"Built with a native \",(0,e.jsx)(t.code,{children:\"<input>\"}),\" element with \",(0,e.jsx)(t.code,{children:'type=\"number\"'}),\".\"]}),`\n`,(0,e.jsx)(t.li,{children:\"Visual and ARIA labeling support.\"}),`\n`,(0,e.jsx)(t.li,{children:\"Change, clipboard, composition, selection, and input event support.\"}),`\n`,(0,e.jsx)(t.li,{children:\"Required and invalid states exposed to assistive technology via ARIA.\"}),`\n`,(0,e.jsx)(t.li,{children:\"Support for description, helper text, and error message linked to the input via ARIA.\"}),`\n`]}),`\n`,(0,e.jsx)(s,{y:4}),`\n`,(0,e.jsx)(t.h2,{id:\"api\",children:\"API\"}),`\n`,(0,e.jsx)(t.h3,{id:\"numberinput-props\",children:\"NumberInput Props\"}),`\n`,(0,e.jsx)(i,{data:[{attribute:\"children\",type:\"ReactNode\",description:\"The content of the input.\",default:\"-\"},{attribute:\"variant\",type:\"flat | bordered | faded | underlined\",description:\"The variant of the input.\",default:\"flat\"},{attribute:\"color\",type:\"default | primary | secondary | success | warning | danger\",description:\"The color of the input.\",default:\"default\"},{attribute:\"size\",type:\"sm | md | lg\",description:\"The size of the input.\",default:\"md\"},{attribute:\"radius\",type:\"none | sm | md | lg | full\",description:\"The radius of the input.\",default:\"-\"},{attribute:\"name\",type:\"string\",description:\"The name of the input element, used when submitting an HTML form.\",default:\"-\"},{attribute:\"label\",type:\"ReactNode\",description:\"The content to display as the label.\",default:\"-\"},{attribute:\"description\",type:\"ReactNode\",description:\"A description for the input. Provides a description for the input.\",default:\"-\"},{attribute:\"value\",type:\"string\",description:\"The current value of the input (controlled).\",default:\"-\"},{attribute:\"defaultValue\",type:\"string\",description:\"The default value of the input (uncontrolled).\",default:\"-\"},{attribute:\"placeholder\",type:\"string\",description:\"The placeholder of the input.\",default:\"-\"},{attribute:\"errorMessage\",type:\"ReactNode | ((v: ValidationResult) => ReactNode)\",description:\"An error message for the input. It is only shown when isInvalid is set to true\",default:\"-\"},{attribute:\"validate\",type:\"(value: string) => ValidationError | true | null | undefined\",description:\"Validate input values when committing (e.g. on blur), returning error messages for invalid values.\",default:\"-\"},{attribute:\"validationBehavior\",type:\"native | aria\",description:\"Whether to use native HTML form validation or ARIA validation. When wrapped in a Form component, the default is `aria`. Otherwise, the default is `native`.\",default:\"native\"},{attribute:\"minValue\",type:\"number\",description:\"The minimum value of the input.\",default:\"-\"},{attribute:\"maxValue\",type:\"number\",description:\"The maximum value of the input.\",default:\"-\"},{attribute:\"formatOptions\",type:\"Intl.NumberFormatOptions\",description:\"The format options for the input.\",default:\"-\"},{attribute:\"step\",type:\"number\",description:\"The amount that the input value changes with each increment or decrement tick.\",default:\"1\"},{attribute:\"hideStepper\",type:\"boolean\",description:\"Whether the stepper buttons should be hidden.\",default:\"-\"},{attribute:\"isWheelDisabled\",type:\"boolean\",description:\"Whether the wheel should be disabled.\",default:\"-\"},{attribute:\"startContent\",type:\"ReactNode\",description:\"Element to be rendered in the left side of the input.\",default:\"-\"},{attribute:\"endContent\",type:\"ReactNode\",description:\"Element to be rendered in the right side of the input.\",default:\"-\"},{attribute:\"labelPlacement\",type:\"inside | outside | outside-left\",description:\"The position of the label.\",default:\"inside\"},{attribute:\"fullWidth\",type:\"boolean\",description:\"Whether the input should take up the width of its parent.\",default:\"true\"},{attribute:\"isClearable\",type:\"boolean\",description:\"Whether the input should have a clear button.\",default:\"false\"},{attribute:\"isRequired\",type:\"boolean\",description:\"Whether user input is required on the input before form submission.\",default:\"false\"},{attribute:\"isReadOnly\",type:\"boolean\",description:\"Whether the input can be selected but not changed by the user.\",default:\"false\"},{attribute:\"isDisabled\",type:\"boolean\",description:\"Whether the input is disabled.\",default:\"false\"},{attribute:\"isInvalid\",type:\"boolean\",description:\"Whether the input is invalid.\",default:\"false\"},{attribute:\"incrementAriaLabel\",type:\"string\",description:\"A custom aria-label for the increment button. If not provided, the localized string `Increment` is used.\",default:\"-\"},{attribute:\"decrementAriaLabel\",type:\"string\",description:\"A custom aria-label for the decrement button. If not provided, the localized string `Decrement` is used.\",default:\"-\"},{attribute:\"baseRef\",type:\"RefObject<HTMLDivElement>\",description:\"The ref to the base element.\",default:\"-\"},{attribute:\"disableAnimation\",type:\"boolean\",description:\"Whether the input should be animated.\",default:\"false\"},{attribute:\"classNames\",type:\"Partial<Record<'base' | 'label' | 'inputWrapper' | 'innerWrapper' | 'mainWrapper' | 'input' | 'clearButton' | 'stepperButton' | 'helperWrapper' | 'stepperWrapper' | 'description' | 'errorMessage', string>>\",description:\"Allows to set custom class names for the Input slots.\",default:\"-\"}]}),`\n`,(0,e.jsx)(t.h3,{id:\"numberinput-events\",children:\"NumberInput Events\"}),`\n`,(0,e.jsx)(i,{data:[{attribute:\"onChange\",type:\"React.ChangeEvent<HTMLInputElement>\",description:\"Handler that is called when the element's value changes. You can pull out the new value by accessing event.target.value (string).\",default:\"-\"},{attribute:\"onValueChange\",type:\"(value: number) => void\",description:\"Handler that is called when the element's value changes.\",default:\"-\"},{attribute:\"onClear\",type:\"() => void\",description:\"Handler that is called when the clear button is clicked.\",default:\"-\"}]})]})}function de(n={}){let{wrapper:t}=n.components||{};return t?(0,e.jsx)(t,{...n,children:(0,e.jsx)(ue,{...n})}):ue(n)}function l(n,t){throw new Error(\"Expected \"+(t?\"component\":\"object\")+\" `\"+n+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return ge(ft);})();\n;return Component;"
  },
  "_id": "docs/components/number-input.mdx",
  "_raw": {
    "sourceFilePath": "docs/components/number-input.mdx",
    "sourceFileName": "number-input.mdx",
    "sourceFileDir": "docs/components",
    "contentType": "mdx",
    "flattenedPath": "docs/components/number-input"
  },
  "type": "Doc",
  "slug": "/docs/components/number-input",
  "slugAsParams": "components/number-input",
  "url": "/docs/components/number-input"
}