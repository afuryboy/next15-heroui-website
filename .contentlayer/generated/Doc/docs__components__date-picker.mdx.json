{
  "title": "DatePicker",
  "description": "DatePickers combine a DateInput and a Calendar popover to allow users to enter or select a date and time value.",
  "body": {
    "raw": "\nimport {datePickerContent} from \"@/content/components/date-picker\";\n\n# DatePicker\n\nDatePickers combine a DateInput and a Calendar popover to allow users to enter or select a date and time value.\n\n<ComponentLinks component=\"date-picker\" storybook=\"datepicker\" />\n\n---\n\n<CarbonAd/>\n\n## Installation\n\n<PackageManagers\n  showGlobalInstallWarning\n  commands={{\n    cli: \"npx heroui-cli@latest add date-picker\",\n    npm: \"npm install @heroui/date-picker\",\n    yarn: \"yarn add @heroui/date-picker\",\n    pnpm: \"pnpm add @heroui/date-picker\",\n    bun: \"bun add @heroui/date-picker\",\n  }}\n/>\n\n## Import\n\n<ImportTabs\n  commands={{\n    main: 'import {DatePicker} from \"@heroui/react\";',\n    individual: 'import {DatePicker} from \"@heroui/date-picker\";',\n  }}\n/>\n\n## Usage\n\n<CodeDemo title=\"Usage\" files={datePickerContent.usage} />\n\n### Disabled\n\n<CodeDemo title=\"Disabled\" files={datePickerContent.disabled} />\n\n### Read Only\n\n<CodeDemo title=\"Read Only\" files={datePickerContent.readOnly} />\n\n### Required\n\n<CodeDemo title=\"Required\" files={datePickerContent.required} />\n\n### Variants\n\n<CodeDemo title=\"Variants\" files={datePickerContent.variants} />\n\n### Label Placements\n\nYou can change the position of the label by setting the `labelPlacement` property to `inside`, `outside` or `outside-left`.\n\n<CodeDemo title=\"Label Placements\" files={datePickerContent.labelPlacements} />\n\n> **Note**: If the `label` is not passed, the `labelPlacement` property will be `outside` by default.\n\n### With Description\n\nYou can add a description to the date-picker by passing the `description` property.\n\n<CodeDemo title=\"With Description\" files={datePickerContent.description} />\n\n### With Error Message\n\nYou can combine the `isInvalid` and `errorMessage` properties to show an invalid input.\n\n<CodeDemo title=\"With Error Message\" files={datePickerContent.errorMessage} />\n\nYou can also pass an error message as a function. This allows for dynamic error message handling based on the [ValidationResult](https://github.com/adobe/react-spectrum/blob/1cacbf1d438675feb3859fee54b17e620b458d9c/packages/%40react-types/shared/src/inputs.d.ts#L44-L51).\n\n<CodeDemo title=\"With Error Message Function\" files={datePickerContent.errorMessageFunction} />\n\n### With Month and Year Pickers\n\nYou can show month and year pickers in the calendar popover by setting the `showMonthAndYearPickers` property to `true`. However, passing a number greater than 1 to the `visibleMonths` prop will disable this feature.\n\n<CodeDemo title=\"With Month and Year Pickers\" files={datePickerContent.withMonthAndYearPickers} />\n\n### With Time Fields\n\n<CodeDemo title=\"With Time Fields\" files={datePickerContent.withTimeField} />\n\n### Selector Icon\n\nYou can use the `selectorIcon` to add content to the start and end of the date-picker.\n\n<CodeDemo title=\"Selector Icon\" files={datePickerContent.selectorIcon} />\n\n### Selector Button Placement\n\nYou can change the position of the selector button by setting the `selectorButtonPlacement` property to `start` or `end`.\n\n<CodeDemo title=\"Selector Button Placement\" files={datePickerContent.selectorButtonPlacement} />\n\n### Controlled\n\nYou can use the `value` and `onChange` properties to control the input value.\n\n<CodeDemo title=\"Controlled\" files={datePickerContent.controlled} />\n\n### Time Zones\n\nDatePicker is time zone aware when a `ZonedDateTime` object is provided as the value. In this case, the time zone abbreviation is displayed,\nand time zone concerns such as daylight saving time are taken into account when the value is manipulated.\n\n[@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/) includes functions for parsing strings\nin multiple formats into `ZonedDateTime` objects.\n\n<PackageManagers\n  commands={{\n    npm: \"npm install @internationalized/date@3.8.0\",\n    yarn: \"yarn add @internationalized/date@3.8.0\",\n    pnpm: \"pnpm add @internationalized/date@3.8.0\",\n  }}\n/>\n\n```jsx\nimport {parseZonedDateTime} from \"@internationalized/date\";\n```\n\n<Spacer y={2} />\n\n<CodeDemo title=\"Time Zones\" files={datePickerContent.timeZones} />\n\n### Granularity\n\nThe granularity prop allows you to control the smallest unit that is displayed by DatePicker By default,\nthe value is displayed with \"day\" granularity (year, month, and day),\nand `CalendarDateTime` and `ZonedDateTime` values are displayed with \"minute\" granularity.\n\n[@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/) includes functions for parsing strings\nin multiple formats into `ZonedDateTime` objects.\n\n<PackageManagers\n  commands={{\n    npm: \"npm install @internationalized/date@3.8.0 @react-aria/i18n@3.12.8\",\n    yarn: \"yarn add @internationalized/date@3.8.0 @react-aria/i18n@3.12.8\",\n    pnpm: \"pnpm add @internationalized/date@3.8.0 @react-aria/i18n@3.12.8\",\n  }}\n/>\n\n```jsx\nimport {DateValue, now, parseAbsoluteToLocal} from \"@internationalized/date\";\nimport {useDateFormatter} from \"@react-aria/i18n\";\n```\n\n<Spacer y={2} />\n\n<CodeDemo title=\"Time Zones\" files={datePickerContent.granularity} />\n\n### Min Date And Max Date\n\nThe minValue and maxValue props can also be used to ensure the value is within a specific range.\n\n[@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/) includes functions for parsing strings\nin multiple formats into `ZonedDateTime` objects.\n\n<PackageManagers\n  commands={{\n    npm: \"npm install @internationalized/date@3.8.0\",\n    yarn: \"yarn add @internationalized/date@3.8.0\",\n    pnpm: \"pnpm add @internationalized/date@3.8.0\",\n  }}\n/>\n\n```jsx\nimport {getLocalTimeZone, parseDate, today} from \"@internationalized/date\";\n```\n\n<CodeDemo title=\"Min Date And Max Date\" files={datePickerContent.minAndMaxDate} />\n\n### International Calendar\n\nDatePicker supports selecting dates in many calendar systems used around the world, including Gregorian, Hebrew, Indian, Islamic, Buddhist, and more.\nDates are automatically displayed in the appropriate calendar system for the user's locale.\nThe calendar system can be overridden using the [Unicode calendar locale extension](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/calendar#adding_a_calendar_in_the_locale_string),\npassed to the [I18nProvider](https://react-spectrum.adobe.com/react-aria/I18nProvider.html) component.\n\n[@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/) includes functions for parsing strings\nin multiple formats into `ZonedDateTime` objects.\n\n<PackageManagers\n  commands={{\n    npm: \"npm install @internationalized/date@3.8.0 @react-aria/i18n@3.12.8\",\n    yarn: \"yarn add @internationalized/date@3.8.0 @react-aria/i18n@3.12.8\",\n    pnpm: \"pnpm add @internationalized/date@3.8.0 @react-aria/i18n@3.12.8\",\n  }}\n/>\n\n```jsx\nimport {DateValue, now, parseAbsoluteToLocal} from \"@internationalized/date\";\nimport {I18nProvider} from \"@react-aria/i18n\";\n```\n\n<CodeDemo title=\"International Calendar\" files={datePickerContent.internationalCalendar} />\n\n### Unavailable Dates\n\nDatePicker supports marking certain dates as unavailable. These dates cannot be selected by the user and are displayed with a crossed out appearance in the calendar. In the date field, an invalid state is displayed if a user enters an unavailable date.\n\n[@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/) includes functions for parsing strings\nin multiple formats into `ZonedDateTime` objects.\n\n<PackageManagers\n  commands={{\n    npm: \"npm install @internationalized/date@3.8.0 @react-aria/i18n@3.12.8\",\n    yarn: \"yarn add @internationalized/date@3.8.0 @react-aria/i18n@3.12.8\",\n    pnpm: \"pnpm add @internationalized/date@3.8.0 @react-aria/i18n@3.12.8\",\n  }}\n/>\n\n```jsx\nimport {today, isWeekend, getLocalTimeZone} from \"@internationalized/date\";\nimport {useLocale} from \"@react-aria/i18n\";\n```\n\n<CodeDemo title=\"Unavailable Dates\" files={datePickerContent.unavailableDates} />\n\n### Visible Months\n\nBy default, the calendar popover displays a single month. The `visibleMonths` prop allows displaying up to 3 months at a time, if screen space permits.\n\n<CodeDemo title=\"Visible Months\" files={datePickerContent.visibleMonth} />\n\n### Custom first day of week\n\nBy default, the first day of the week is automatically set based on the current locale. This can be changed by setting the `firstDayOfWeek` prop to `'sun'`, `'mon'`, `'tue'`, `'wed'`, `'thu'`, `'fri'`, or `'sat'`.\n\n<CodeDemo title=\"Custom first day of week\" files={datePickerContent.firstDayOfWeek} />\n\n### Page Behavior\n\nBy default, when pressing the next or previous buttons, pagination will advance by the `visibleMonths` value. This behavior can be changed to page by single months instead, by setting `pageBehavior` to `single`.\n\n<CodeDemo title=\"Page Behavior\" files={datePickerContent.pageBehavior} />\n\n### Preset\n\n[@internationalized/date](https://react-spectrum.adobe.com/internationalized/date/) includes functions for parsing strings\nin multiple formats into `ZonedDateTime` objects.\n\n<PackageManagers\n  commands={{\n    npm: \"npm install @internationalized/date@3.8.0 @react-aria/i18n@3.12.8\",\n    yarn: \"yarn add @internationalized/date@3.8.0 @react-aria/i18n@3.12.8\",\n    pnpm: \"pnpm add @internationalized/date@3.8.0 @react-aria/i18n@3.12.8\",\n  }}\n/>\n\n```jsx\nimport {\n  DateValue,\n  now,\n  useLocale,\n  startOfWeek,\n  startOfMonth,\n  useDateFormatter,\n  getLocalTimeZone,\n} from \"@internationalized/date\";\nimport {I18nProvider} from \"@react-aria/i18n\";\n```\n\n<CodeDemo title=\"Preset\" files={datePickerContent.preset} />\n\n## Slots\n\n- **base**: Input wrapper, it handles alignment, placement, and general appearance.\n- **selectorButton**: Selector button element.\n- **selectorIcon**: Selector icon element.\n- **popoverContent**: The calendar popover element.\n- **calendar**: The calendar element.\n- **calendarContent**: The calendar's content element.\n- **timeInputLabel**: The time-input component's label element.\n- **timeInput**: The time-input component element.\n\n<Spacer y={4} />\n\n## Data Attributes\n\n`DatePicker` has the following attributes on the `base` element:\n\n- **data-slot**:\n  All slots have this prop. which slot the element represents(e.g. `calendar`).\n- **data-open**:\n  Indicates if the calendar popover is open.\n- **data-invalid**:\n  When the date-picker is invalid. Based on `isInvalid` prop.\n- **data-required**:\n  When the date-picker is required. Based on `isRequired` prop.\n- **data-readonly**:\n  When the date-picker is readonly. Based on `isReadOnly` prop.\n- **data-disabled**:\n  When the date-picker is disabled. Based on `isDisabled` prop.\n\n<Spacer y={4} />\n\n## Accessibility\n\n- Each date and time unit is displayed as an individually focusable and editable segment, which allows users an easy way to edit dates using the keyboard, in any date format and locale.\n- Users can also open a calendar popover to select dates in a standard month grid.\n- Localized screen reader messages are included to announce when the selection and visible date range change.\n- Date segments are editable using an easy to use numeric keypad, and all interactions are accessible using touch-based screen readers.\n- Integrates with HTML forms, supporting required, minimum and maximum values, unavailable dates, custom validation functions, realtime validation, and server-side validation errors\n\n<Spacer y={4} />\n\n## API\n\n### DatePicker Props\n\n<APITable\n  data={[\n    {\n      attribute: \"label\",\n      type: \"ReactNode\",\n      description: \"The content to display as the label.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"value\",\n      type: \"ZonedDateTime | CalendarDate | CalendarDateTime | undefined | null\",\n      description: \"The current value of the date-picker (controlled).\",\n      default: \"-\"\n    },\n    {\n      attribute: \"variant\",\n      type: \"flat | bordered | faded | underlined\",\n      description: \"The variant of the date input.\",\n      default: \"flat\"\n    },\n    {\n      attribute: \"color\",\n      type: \"default | primary | secondary | success | warning | danger\",\n      description: \"The color of the date input.\",\n      default: \"default\"\n    },\n    {\n      attribute: \"size\",\n      type: \"sm | md | lg\",\n      description: \"The size of the date input.\",\n      default: \"md\"\n    },\n    {\n      attribute: \"radius\",\n      type: \"none | sm | md | lg | full\",\n      description: \"The radius of the date input.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"defaultValue\",\n      type: \"string\",\n      description: \"The default value of the date-picker (uncontrolled).\",\n      default: \"-\"\n    },\n    {\n      attribute: \"placeholderValue\",\n      type: \"ZonedDateTime | CalendarDate | CalendarDateTime | undefined | null\",\n      description: \"The placeholder of the date-picker.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"description\",\n      type: \"ReactNode\",\n      description: \"A description for the date-picker. Provides a hint such as specific requirements for what to choose.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"errorMessage\",\n      type: \"ReactNode | (v: ValidationResult) => ReactNode\",\n      description: \"An error message for the date input.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"validate\",\n      type: \"(value: MappedDateValue<DateValue>) => ValidationError | true | null | undefined\",\n      description: \"Validate input values when committing (e.g. on blur), returning error messages for invalid values.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"validationBehavior\",\n      type: \"native | aria\",\n      description: \"Whether to use native HTML form validation or ARIA validation. When wrapped in a Form component, the default is `aria`. Otherwise, the default is `native`.\",\n      default: \"native\"\n    },\n    {\n      attribute: \"startContent\",\n      type: \"ReactNode\",\n      description: \"Element to be rendered in the left side of the date-picker.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"endContent\",\n      type: \"ReactNode\",\n      description: \"Element to be rendered in the right side of the date-picker.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"labelPlacement\",\n      type: \"inside | outside | outside-left\",\n      description: \"The position of the label.\",\n      default: \"inside\"\n    },\n    {\n      attribute: \"isRequired\",\n      type: \"boolean\",\n      description: \"Whether user input is required on the date-picker before form submission.\",\n      default: \"false\"\n    },\n    {\n      attribute: \"isReadOnly\",\n      type: \"boolean\",\n      description: \"Whether the date-picker can be selected but not changed by the user.\",\n      default: \"false\"\n    },\n    {\n      attribute: \"isDisabled\",\n      type: \"boolean\",\n      description: \"Whether the date-picker is disabled.\",\n      default: \"false\"\n    },\n    {\n      attribute: \"isInvalid\",\n      type: \"boolean\",\n      description: \"Whether the date-picker is invalid.\",\n      default: \"false\"\n    },\n    {\n      attribute: \"visibleMonths\",\n      type: \"number\",\n      description: \"The number of months to display at once. Up to 3 months are supported.\",\n      default: \"1\"\n    },\n    {\n      attribute: \"firstDayOfWeek\",\n      type: \"sun | mon | tue | wed | thu | fri | sat\",\n      description: \"The day that starts the week.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"selectorIcon\",\n      type: \"ReactNode\",\n      description: \"The icon to toggle the date picker popover. Usually a calendar icon.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"pageBehavior\",\n      type: \"PageBehavior\",\n      description: \"Controls the behavior of paging.\",\n      default: \"visible\"\n    },\n    {\n      attribute: \"calendarWidth\",\n      type: \"number\",\n      description: \"The width to be applied to the calendar component.\",\n      default: \"256\"\n    },\n    {\n      attribute: \"isDateUnavailable\",\n      type: \"(date: DateValue) => boolean\",\n      description: \"Callback that is called for each date of the calendar. If it returns true, then the date is unavailable.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"autoFocus\",\n      type: \"boolean\",\n      description: \"Whether the element should receive focus on render.\",\n      default: \"false\"\n    },\n    {\n      attribute: \"hourCycle\",\n      type: \"12 | 24\",\n      description: \"Whether to display the time in 12 or 24 hour format.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"granularity\",\n      type: \"day | hour | minute | second\",\n      description: \"Determines the smallest unit that is displayed in the date picker.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"hideTimeZone\",\n      type: \"boolean\",\n      description: \"Whether to hide the time zone abbreviation.\",\n      default: \"false\"\n    },\n    {\n      attribute: \"shouldForceLeadingZeros\",\n      type: \"boolean\",\n      description: \"Whether to always show leading zeros in the month, day, and hour fields.\",\n      default: \"true\"\n    },\n    {\n      attribute: \"CalendarBottomContent\",\n      type: \"ReactNode\",\n      description: \"Bottom content to be rendered in the calendar component.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"showMonthAndYearPickers\",\n      type: \"boolean | undefined\",\n      description: \"Whether the calendar should show month and year pickers.\",\n      default: \"false\"\n    },\n    {\n      attribute: \"popoverProps\",\n      type: \"PopoverProps | undefined\",\n      description: \"Props to be passed to the popover component.\",\n      default: `{ placement: \"bottom\", triggerScaleOnOpen: false, offset: 13 }`\n    },\n    {\n      attribute: \"selectorButtonProps\",\n      type: \"ButtonProps | undefined\",\n      description: \"Props to be passed to the selector button component.\",\n      default: `{ size: \"sm\", variant: \"light\", radius: \"full\", isIconOnly: true }`\n    },\n    {\n      attribute: \"calendarProps\",\n      type: \"CalendarProps | undefined\",\n      description: \"Props to be passed to the calendar component.\",\n      default: `{ size: \"sm\", variant: \"light\", radius: \"full\", isIconOnly: true }`\n    },\n    {\n      attribute: \"timeInputProps\",\n      type: \"TimeInputProps | undefined\",\n      description: \"Props to be passed to the time input component.\",\n      default: `{ size: \"sm\", variant: \"light\", radius: \"full\", isIconOnly: true }`\n    },\n    {\n      attribute: \"disableAnimation\",\n      type: \"boolean\",\n      description: \"Whether to disable all animations in the date picker. Including the DateInput, Button, Calendar, and Popover.\",\n      default: \"false\"\n    },\n    {\n      attribute: \"classNames\",\n      type: `Partial<Record<\"base\" | \"selectorButton\" | \"selectorIcon\" | \"popoverContent\" | \"calendar\" | \"calendarContent\" | \"timeInputLabel\" | \"timeInput\", string>>`,\n      description: \"Allows to set custom class names for the date-picker slots. You can also pass Date Input classNames here.\",\n      default: \"-\"\n    },\n  ]}\n/>\n\n### DatePicker Events\n\n<APITable\n  data={[\n    {\n      attribute: \"onChange\",\n      type: \"(value: ZonedDateTime | CalendarDate | CalendarDateTime) => void\",\n      description: \"Handler that is called when the date-picker's value changes.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"onFocus\",\n      type: \"(e: FocusEvent<HTMLInputElement>) => void\",\n      description: \"Handler that is called when the element receives focus.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"onBlur\",\n      type: \"(e: FocusEvent<HTMLInputElement>) => void\",\n      description: \"Handler that is called when the element loses focus.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"onFocusChange\",\n      type: \"(isFocused: boolean) => void\",\n      description: \"Handler that is called when the element's focus status changes.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"onKeyDown\",\n      type: \"(e: KeyboardEvent) => void\",\n      description: \"Handler that is called when a key is pressed.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"onKeyUp\",\n      type: \"(e: KeyboardEvent) => void\",\n      description: \"Handler that is called when a key is released.\",\n      default: \"-\"\n    }\n  ]}\n/>\n",
    "code": "var Component=(()=>{var ue=Object.create;var c=Object.defineProperty;var me=Object.getOwnPropertyDescriptor;var he=Object.getOwnPropertyNames;var fe=Object.getPrototypeOf,be=Object.prototype.hasOwnProperty;var xe=(r,t)=>()=>(t||r((t={exports:{}}).exports,t),t.exports),ve=(r,t)=>{for(var i in t)c(r,i,{get:t[i],enumerable:!0})},m=(r,t,i,s)=>{if(t&&typeof t==\"object\"||typeof t==\"function\")for(let a of he(t))!be.call(r,a)&&a!==i&&c(r,a,{get:()=>t[a],enumerable:!(s=me(t,a))||s.enumerable});return r};var ge=(r,t,i)=>(i=r!=null?ue(fe(r)):{},m(t||!r||!r.__esModule?c(i,\"default\",{value:r,enumerable:!0}):i,r)),ye=r=>m(c({},\"__esModule\",{value:!0}),r);var f=xe((kt,h)=>{h.exports=_jsx_runtime});var wt={};ve(wt,{default:()=>pe,frontmatter:()=>yt});var e=ge(f());var b=`import {DatePicker} from \"@heroui/react\";\n\nexport default function App() {\n  return <DatePicker className=\"max-w-[284px]\" label=\"Birth date\" />;\n}\n`;var De={\"/App.jsx\":b},x={...De};var v=`import {DatePicker} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <div className=\"flex w-full flex-wrap md:flex-nowrap gap-4\">\n      <DatePicker isDisabled className=\"max-w-[284px]\" label=\"Birth date\" />\n    </div>\n  );\n}\n`;var Pe={\"/App.jsx\":v},g={...Pe};var y=`import {DatePicker} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <div className=\"flex w-full flex-wrap md:flex-nowrap gap-4\">\n      <DatePicker isReadOnly className=\"max-w-[284px]\" label=\"Birth date\" />\n    </div>\n  );\n}\n`;var Te={\"/App.jsx\":y},w={...Te};var D=`import {DatePicker} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <div className=\"flex w-full flex-wrap md:flex-nowrap gap-4\">\n      <DatePicker isRequired className=\"max-w-[284px]\" label=\"Birth date\" />\n    </div>\n  );\n}\n`;var Ce={\"/App.jsx\":D},k={...Ce};var P=`import {DatePicker} from \"@heroui/react\";\n\nexport default function App() {\n  const variants = [\"flat\", \"bordered\", \"underlined\", \"faded\"];\n\n  return (\n    <div className=\"w-full flex flex-col gap-4\">\n      {variants.map((variant) => (\n        <div key={variant} className=\"flex w-full flex-wrap md:flex-nowrap mb-6 md:mb-0 gap-4\">\n          <DatePicker label={\"Birth date\"} variant={variant} />\n        </div>\n      ))}\n    </div>\n  );\n}\n`;var Be={\"/App.jsx\":P},A={...Be};var T=`import {DatePicker} from \"@heroui/react\";\n\nexport default function App() {\n  const placements = [\"inside\", \"outside\", \"outside-left\"];\n\n  return (\n    <div className=\"flex flex-col gap-4\">\n      <div className=\"flex flex-col gap-2\">\n        <div className=\"flex w-full flex-wrap items-end md:flex-nowrap mb-6 md:mb-0 gap-4\">\n          {placements.map((placement) => (\n            <DatePicker\n              key={placement}\n              className=\"max-w-[284px]\"\n              description={placement}\n              label={\"Birth date\"}\n              labelPlacement={placement}\n            />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n`;var Ie={\"/App.jsx\":T},N={...Ie};var C=`import {DatePicker} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <div className=\"flex w-full flex-wrap md:flex-nowrap gap-4\">\n      <DatePicker\n        className=\"max-w-[284px]\"\n        description={\"This is my birth date.\"}\n        label=\"Birth date\"\n      />\n    </div>\n  );\n}\n`;var Le={\"/App.jsx\":C},R={...Le};var B=`import {DatePicker} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <div className=\"flex w-full flex-wrap md:flex-nowrap gap-4\">\n      <DatePicker\n        isInvalid\n        className=\"max-w-[284px]\"\n        errorMessage=\"Please enter a valid date.\"\n        label=\"Birth date\"\n      />\n    </div>\n  );\n}\n`;var Ze={\"/App.jsx\":B},M={...Ze};var I=`import {DatePicker} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <div className=\"flex w-full flex-wrap md:flex-nowrap gap-4\">\n      <DatePicker\n        isInvalid\n        className=\"max-w-[284px]\"\n        errorMessage={(value) => {\n          if (value.isInvalid) {\n            return \"Please enter a valid date.\";\n          }\n        }}\n        label=\"Birth date\"\n      />\n    </div>\n  );\n}\n`;var je={\"/App.jsx\":I},z={...je};var L=`import {DatePicker} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <div className=\"w-full max-w-xl flex flex-row gap-4\">\n      <DatePicker showMonthAndYearPickers label=\"Birth Date\" variant=\"bordered\" />\n    </div>\n  );\n}\n`;var Se={\"/App.jsx\":L},V={...Se};var Z=`import {DatePicker} from \"@heroui/react\";\nimport {now, getLocalTimeZone} from \"@internationalized/date\";\n\nexport default function App() {\n  return (\n    <div className=\"w-full max-w-xl flex flex-row gap-4\">\n      <DatePicker\n        hideTimeZone\n        showMonthAndYearPickers\n        defaultValue={now(getLocalTimeZone())}\n        label=\"Event Date\"\n        variant=\"bordered\"\n      />\n    </div>\n  );\n}\n`;var Oe={\"/App.jsx\":Z},W={...Oe};var j=`import {DatePicker} from \"@heroui/react\";\n\nexport const SelectorIcon = () => {\n  return (\n    <svg height=\"1em\" viewBox=\"0 0 24 24\" width=\"1em\">\n      <g\n        fill=\"none\"\n        stroke=\"currentColor\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth=\"2\"\n      >\n        <path d=\"M8 2v4m8-4v4\" />\n        <rect height=\"18\" rx=\"2\" width=\"18\" x=\"3\" y=\"4\" />\n        <path d=\"M3 10h18M8 14h.01M12 14h.01M16 14h.01M8 18h.01M12 18h.01M16 18h.01\" />\n      </g>\n    </svg>\n  );\n};\n\nexport default function App() {\n  return (\n    <div className=\"flex w-full flex-wrap md:flex-nowrap gap-4\">\n      <DatePicker label=\"Birth date\" selectorIcon={<SelectorIcon />} />\n    </div>\n  );\n}\n`;var Ye={\"/App.jsx\":j},_={...Ye};var S=`import {DatePicker} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <div className=\"flex w-full flex-wrap md:flex-nowrap gap-4\">\n      <DatePicker label=\"Placement start\" selectorButtonPlacement=\"start\" />\n      <DatePicker label=\"Placement end (default)\" selectorButtonPlacement=\"end\" />\n    </div>\n  );\n}\n`;var Ge={\"/App.jsx\":S},F={...Ge};var O=`import {DatePicker} from \"@heroui/react\";\nimport {parseDate, getLocalTimeZone} from \"@internationalized/date\";\nimport {useDateFormatter} from \"@react-aria/i18n\";\n\nexport default function App() {\n  const [value, setValue] = React.useState(parseDate(\"2024-04-04\"));\n\n  let formatter = useDateFormatter({dateStyle: \"full\"});\n\n  return (\n    <div className=\"flex flex-row gap-2\">\n      <div className=\"w-full flex flex-col gap-y-2\">\n        <DatePicker\n          className=\"max-w-[284px]\"\n          label=\"Date (controlled)\"\n          value={value}\n          onChange={setValue}\n        />\n        <p className=\"text-default-500 text-sm\">\n          Selected date: {value ? formatter.format(value.toDate(getLocalTimeZone())) : \"--\"}\n        </p>\n      </div>\n      <DatePicker\n        className=\"max-w-[284px]\"\n        defaultValue={parseDate(\"2024-04-04\")}\n        label=\"Date (uncontrolled)\"\n      />\n    </div>\n  );\n}\n`;var E=`import React from \"react\";\nimport {DatePicker} from \"@heroui/react\";\nimport {DateValue, parseDate, getLocalTimeZone} from \"@internationalized/date\";\nimport {useDateFormatter} from \"@react-aria/i18n\";\n\nexport default function App() {\n  const [value, setValue] = React.useState<DateValue | null>(parseDate(\"2024-04-04\"));\n\n  let formatter = useDateFormatter({dateStyle: \"full\"});\n\n  return (\n    <div className=\"flex flex-row gap-2\">\n      <div className=\"w-full flex flex-col gap-y-2\">\n        <DatePicker\n          className=\"max-w-[284px]\"\n          label=\"Date (controlled)\"\n          value={value}\n          onChange={setValue}\n        />\n        <p className=\"text-default-500 text-sm\">\n          Selected date: {value ? formatter.format(value.toDate(getLocalTimeZone())) : \"--\"}\n        </p>\n      </div>\n      <DatePicker\n        className=\"max-w-[284px]\"\n        defaultValue={parseDate(\"2024-04-04\")}\n        label=\"Date (uncontrolled)\"\n      />\n    </div>\n  );\n}\n`;var Ke={\"/App.jsx\":O},Xe={\"/App.tsx\":E},Y={...Ke,...Xe};var q=`import {DatePicker} from \"@heroui/react\";\nimport {parseZonedDateTime, parseAbsoluteToLocal} from \"@internationalized/date\";\n\nexport default function App() {\n  return (\n    <div className=\"w-full max-w-xl flex flex-col items-start gap-4\">\n      <DatePicker\n        className=\"max-w-xs\"\n        defaultValue={parseZonedDateTime(\"2022-11-07T00:45[America/Los_Angeles]\")}\n        label=\"Zoned Date Time\"\n        labelPlacement=\"outside\"\n      />\n      <DatePicker\n        className=\"max-w-xs\"\n        defaultValue={parseAbsoluteToLocal(\"2021-11-07T07:45:00Z\")}\n        label=\"Zoned Date Time\"\n        labelPlacement=\"outside\"\n      />\n    </div>\n  );\n}\n`;var Qe={\"/App.jsx\":q},G={...Qe};var $e=`import {DatePicker} from \"@heroui/react\";\nimport {now, parseAbsoluteToLocal} from \"@internationalized/date\";\n\nexport default function App() {\n  let [date, setDate] = React.useState(parseAbsoluteToLocal(\"2021-04-07T18:45:22Z\"));\n\n  return (\n    <div className=\"w-full max-w-xl flex flex-col items-start gap-4\">\n      <DatePicker\n        className=\"max-w-md\"\n        granularity=\"second\"\n        label=\"Date and time\"\n        value={date}\n        onChange={setDate}\n      />\n      <DatePicker\n        className=\"max-w-md\"\n        granularity=\"day\"\n        label=\"Date\"\n        value={date}\n        onChange={setDate}\n      />\n      <DatePicker className=\"max-w-md\" granularity=\"second\" label=\"Event date\" />\n      <DatePicker\n        className=\"max-w-md\"\n        granularity=\"second\"\n        label=\"Event date\"\n        placeholderValue={now(\"America/New_York\")}\n      />\n    </div>\n  );\n}`,et=`import {DatePicker} from \"@heroui/react\";\nimport {DateValue, now, parseAbsoluteToLocal} from \"@internationalized/date\";\n\nexport default function App() {\n  let [date, setDate] = React.useState<DateValue | null>(parseAbsoluteToLocal(\"2021-04-07T18:45:22Z\"));\n\n  return (\n    <div className=\"w-full max-w-xl flex flex-col items-start gap-4\">\n      <DatePicker\n        className=\"max-w-md\"\n        granularity=\"second\"\n        label=\"Date and time\"\n        value={date}\n        onChange={setDate}\n      />\n      <DatePicker\n        className=\"max-w-md\"\n        granularity=\"day\"\n        label=\"Date\"\n        value={date}\n        onChange={setDate}\n      />\n      <DatePicker className=\"max-w-md\" granularity=\"second\" label=\"Event date\" />\n      <DatePicker\n        className=\"max-w-md\"\n        granularity=\"second\"\n        label=\"Event date\"\n        placeholderValue={now(\"America/New_York\")}\n      />\n    </div>\n  );\n}`,tt={\"/App.jsx\":$e,\"/App.tsx\":et},U={...tt};var H=`import {DatePicker} from \"@heroui/react\";\nimport {getLocalTimeZone, today} from \"@internationalized/date\";\n\nexport default function App() {\n  return (\n    <div className=\"w-full max-w-xl flex flex-row gap-4\">\n      <div className=\"w-full flex flex-col gap-1\">\n        <h3>Min date</h3>\n        <DatePicker\n          defaultValue={today(getLocalTimeZone()).subtract({days: 1})}\n          label=\"Date\"\n          minValue={today(getLocalTimeZone())}\n        />\n      </div>\n      <div className=\"w-full flex flex-col gap-1\">\n        <h3>Max date</h3>\n        <DatePicker\n          defaultValue={today(getLocalTimeZone()).add({days: 1})}\n          label=\"Date\"\n          maxValue={today(getLocalTimeZone())}\n        />\n      </div>\n    </div>\n  );\n}\n`;var rt={\"/App.jsx\":H},K={...rt};var X=`import {DatePicker} from \"@heroui/react\";\nimport {parseAbsoluteToLocal} from \"@internationalized/date\";\nimport {I18nProvider} from \"@react-aria/i18n\";\n\nexport default function App() {\n  let [date, setDate] = React.useState(parseAbsoluteToLocal(\"2021-04-07T18:45:22Z\"));\n\n  return (\n    <div className=\"flex flex-col gap-4\">\n      <I18nProvider locale=\"hi-IN-u-ca-indian\">\n        <DatePicker\n          showMonthAndYearPickers\n          className=\"max-w-md\"\n          label=\"Appointment date\"\n          value={date}\n          variant=\"bordered\"\n          onChange={setDate}\n        />\n      </I18nProvider>\n    </div>\n  );\n}\n`;var J=`import React from \"react\";\nimport {DatePicker} from \"@heroui/react\";\nimport {DateValue, parseAbsoluteToLocal} from \"@internationalized/date\";\nimport {I18nProvider} from \"@react-aria/i18n\";\n\nexport default function App() {\n  let [date, setDate] = React.useState<DateValue | null>(\n    parseAbsoluteToLocal(\"2021-04-07T18:45:22Z\"),\n  );\n\n  return (\n    <div className=\"flex flex-col gap-4\">\n      <I18nProvider locale=\"hi-IN-u-ca-indian\">\n        <DatePicker\n          showMonthAndYearPickers\n          className=\"max-w-md\"\n          label=\"Appointment date\"\n          value={date}\n          variant=\"bordered\"\n          onChange={setDate}\n        />\n      </I18nProvider>\n    </div>\n  );\n}\n`;var ot={\"/App.jsx\":X},lt={\"/App.tsx\":J},Q={...ot,...lt};var $=`import {DatePicker} from \"@heroui/react\";\nimport {today, isWeekend, getLocalTimeZone} from \"@internationalized/date\";\nimport {useLocale} from \"@react-aria/i18n\";\n\nexport default function App() {\n  let now = today(getLocalTimeZone());\n\n  let disabledRanges = [\n    [now, now.add({days: 5})],\n    [now.add({days: 14}), now.add({days: 16})],\n    [now.add({days: 23}), now.add({days: 24})],\n  ];\n\n  let {locale} = useLocale();\n\n  let isDateUnavailable = (date) =>\n    isWeekend(date, locale) ||\n    disabledRanges.some(\n      (interval) => date.compare(interval[0]) >= 0 && date.compare(interval[1]) <= 0,\n    );\n\n  return (\n    <DatePicker\n      aria-label=\"Appointment date\"\n      isDateUnavailable={isDateUnavailable}\n      label=\"Appointment date\"\n      minValue={today(getLocalTimeZone())}\n    />\n  );\n}\n`;var st={\"/App.jsx\":$},ee={...st};var te=`import {DatePicker} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <div className=\"flex w-full flex-wrap md:flex-nowrap gap-4\">\n      <DatePicker label=\"Birth date\" visibleMonths={2} />\n    </div>\n  );\n}\n`;var pt={\"/App.jsx\":te},ae={...pt};var re=`import {DatePicker} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <div className=\"flex w-full flex-wrap md:flex-nowrap gap-4\">\n      <DatePicker\n        className=\"max-w-[284px]\"\n        description={\"This is my birth date.\"}\n        firstDayOfWeek=\"mon\"\n        label=\"Birth date\"\n      />\n    </div>\n  );\n}\n`;var mt={\"/App.jsx\":re},ne={...mt};var ie=`import {DatePicker} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <div className=\"flex w-full flex-wrap md:flex-nowrap gap-4\">\n      <DatePicker label=\"Birth date\" pageBehavior=\"single\" visibleMonths={2} />\n    </div>\n  );\n}\n`;var ft={\"/App.jsx\":ie},oe={...ft};var le=`import {DatePicker, RadioGroup, Radio, ButtonGroup, Button, cn} from \"@heroui/react\";\nimport {startOfWeek, startOfMonth, getLocalTimeZone, today} from \"@internationalized/date\";\nimport {useLocale, useDateFormatter} from \"@react-aria/i18n\";\n\nexport default function App() {\n  let defaultDate = today(getLocalTimeZone());\n\n  const [value, setValue] = React.useState(defaultDate);\n\n  let {locale} = useLocale();\n  let formatter = useDateFormatter({dateStyle: \"full\"});\n\n  let now = today(getLocalTimeZone());\n  let nextWeek = startOfWeek(now.add({weeks: 1}), locale);\n  let nextMonth = startOfMonth(now.add({months: 1}));\n\n  const CustomRadio = (props) => {\n    const {children, ...otherProps} = props;\n\n    return (\n      <Radio\n        {...otherProps}\n        classNames={{\n          base: cn(\n            \"flex-none m-0 h-8 bg-content1 hover:bg-content2 items-center justify-between\",\n            \"cursor-pointer rounded-full border-2 border-default-200/60\",\n            \"data-[selected=true]:border-primary\",\n          ),\n          label: \"text-tiny text-default-500\",\n          labelWrapper: \"px-1 m-0\",\n          wrapper: \"hidden\",\n        }}\n      >\n        {children}\n      </Radio>\n    );\n  };\n\n  return (\n    <div className=\"flex flex-col gap-4 w-full max-w-sm\">\n      <DatePicker\n        CalendarBottomContent={\n          <RadioGroup\n            aria-label=\"Date precision\"\n            classNames={{\n              base: \"w-full pb-2\",\n              wrapper: \"-my-2.5 py-2.5 px-3 gap-1 flex-nowrap max-w-[380px] overflow-x-scroll\",\n            }}\n            defaultValue=\"exact_dates\"\n            orientation=\"horizontal\"\n          >\n            <CustomRadio value=\"exact_dates\">Exact dates</CustomRadio>\n            <CustomRadio value=\"1_day\">1 day</CustomRadio>\n            <CustomRadio value=\"2_days\">2 days</CustomRadio>\n            <CustomRadio value=\"3_days\">3 days</CustomRadio>\n            <CustomRadio value=\"7_days\">7 days</CustomRadio>\n            <CustomRadio value=\"14_days\">14 days</CustomRadio>\n          </RadioGroup>\n        }\n        CalendarTopContent={\n          <ButtonGroup\n            fullWidth\n            className=\"px-3 pb-2 pt-3 bg-content1 [&>button]:text-default-500 [&>button]:border-default-200/60\"\n            radius=\"full\"\n            size=\"sm\"\n            variant=\"bordered\"\n          >\n            <Button onPress={() => setValue(now)}>Today</Button>\n            <Button onPress={() => setValue(nextWeek)}>Next week</Button>\n            <Button onPress={() => setValue(nextMonth)}>Next month</Button>\n          </ButtonGroup>\n        }\n        calendarProps={{\n          focusedValue: value,\n          onFocusChange: setValue,\n          nextButtonProps: {\n            variant: \"bordered\",\n          },\n          prevButtonProps: {\n            variant: \"bordered\",\n          },\n        }}\n        label=\"Event date\"\n        value={value}\n        onChange={setValue}\n      />\n      <p className=\"text-default-500 text-sm\">\n        Selected date: {value ? formatter.format(value.toDate(getLocalTimeZone())) : \"--\"}\n      </p>\n    </div>\n  );\n}\n`;var de=`import React from \"react\";\nimport {DatePicker, RadioGroup, Radio, ButtonGroup, Button, cn} from \"@heroui/react\";\nimport {\n  DateValue,\n  startOfWeek,\n  startOfMonth,\n  getLocalTimeZone,\n  today,\n} from \"@internationalized/date\";\nimport {useLocale, useDateFormatter} from \"@react-aria/i18n\";\n\nexport default function App() {\n  let defaultDate = today(getLocalTimeZone());\n\n  const [value, setValue] = React.useState<DateValue | null>(defaultDate);\n\n  let {locale} = useLocale();\n  let formatter = useDateFormatter({dateStyle: \"full\"});\n\n  let now = today(getLocalTimeZone());\n  let nextWeek = startOfWeek(now.add({weeks: 1}), locale);\n  let nextMonth = startOfMonth(now.add({months: 1}));\n\n  const CustomRadio = (props) => {\n    const {children, ...otherProps} = props;\n\n    return (\n      <Radio\n        {...otherProps}\n        classNames={{\n          base: cn(\n            \"flex-none m-0 h-8 bg-content1 hover:bg-content2 items-center justify-between\",\n            \"cursor-pointer rounded-full border-2 border-default-200/60\",\n            \"data-[selected=true]:border-primary\",\n          ),\n          label: \"text-tiny text-default-500\",\n          labelWrapper: \"px-1 m-0\",\n          wrapper: \"hidden\",\n        }}\n      >\n        {children}\n      </Radio>\n    );\n  };\n\n  return (\n    <div className=\"flex flex-col gap-4 w-full max-w-sm\">\n      <DatePicker\n        CalendarBottomContent={\n          <RadioGroup\n            aria-label=\"Date precision\"\n            classNames={{\n              base: \"w-full pb-2\",\n              wrapper: \"-my-2.5 py-2.5 px-3 gap-1 flex-nowrap max-w-[380px] overflow-x-scroll\",\n            }}\n            defaultValue=\"exact_dates\"\n            orientation=\"horizontal\"\n          >\n            <CustomRadio value=\"exact_dates\">Exact dates</CustomRadio>\n            <CustomRadio value=\"1_day\">1 day</CustomRadio>\n            <CustomRadio value=\"2_days\">2 days</CustomRadio>\n            <CustomRadio value=\"3_days\">3 days</CustomRadio>\n            <CustomRadio value=\"7_days\">7 days</CustomRadio>\n            <CustomRadio value=\"14_days\">14 days</CustomRadio>\n          </RadioGroup>\n        }\n        CalendarTopContent={\n          <ButtonGroup\n            fullWidth\n            className=\"px-3 pb-2 pt-3 bg-content1 [&>button]:text-default-500 [&>button]:border-default-200/60\"\n            radius=\"full\"\n            size=\"sm\"\n            variant=\"bordered\"\n          >\n            <Button onPress={() => setValue(now)}>Today</Button>\n            <Button onPress={() => setValue(nextWeek)}>Next week</Button>\n            <Button onPress={() => setValue(nextMonth)}>Next month</Button>\n          </ButtonGroup>\n        }\n        calendarProps={{\n          focusedValue: value,\n          onFocusChange: setValue,\n          nextButtonProps: {\n            variant: \"bordered\",\n          },\n          prevButtonProps: {\n            variant: \"bordered\",\n          },\n        }}\n        label=\"Event date\"\n        value={value}\n        onChange={setValue}\n      />\n      <p className=\"text-default-500 text-sm\">\n        Selected date: {value ? formatter.format(value.toDate(getLocalTimeZone())) : \"--\"}\n      </p>\n    </div>\n  );\n}\n`;var vt={\"/App.jsx\":le},gt={\"/App.tsx\":de},se={...vt,...gt};var n={usage:x,disabled:g,readOnly:w,required:k,variants:A,labelPlacements:N,description:R,errorMessage:M,errorMessageFunction:z,withMonthAndYearPickers:V,withTimeField:W,selectorIcon:_,selectorButtonPlacement:F,controlled:Y,timeZones:G,granularity:U,minAndMaxDate:K,internationalCalendar:Q,unavailableDates:ee,visibleMonth:ae,firstDayOfWeek:ne,pageBehavior:oe,preset:se};var yt={title:\"DatePicker\",description:\"DatePickers combine a DateInput and a Calendar popover to allow users to enter or select a date and time value.\"};function ce(r){let t={a:\"a\",blockquote:\"blockquote\",code:\"code\",h1:\"h1\",h2:\"h2\",h3:\"h3\",hr:\"hr\",li:\"li\",p:\"p\",pre:\"pre\",strong:\"strong\",ul:\"ul\",...r.components},{APITable:i,CarbonAd:s,CodeDemo:a,ComponentLinks:p,ImportTabs:u,PackageManagers:o,Spacer:d}=t;return i||l(\"APITable\",!0),s||l(\"CarbonAd\",!0),a||l(\"CodeDemo\",!0),p||l(\"ComponentLinks\",!0),u||l(\"ImportTabs\",!0),o||l(\"PackageManagers\",!0),d||l(\"Spacer\",!0),(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(t.h1,{id:\"datepicker\",children:\"DatePicker\"}),`\n`,(0,e.jsx)(t.p,{children:\"DatePickers combine a DateInput and a Calendar popover to allow users to enter or select a date and time value.\"}),`\n`,(0,e.jsx)(p,{component:\"date-picker\",storybook:\"datepicker\"}),`\n`,(0,e.jsx)(t.hr,{}),`\n`,(0,e.jsx)(s,{}),`\n`,(0,e.jsx)(t.h2,{id:\"installation\",children:\"Installation\"}),`\n`,(0,e.jsx)(o,{showGlobalInstallWarning:!0,commands:{cli:\"npx heroui-cli@latest add date-picker\",npm:\"npm install @heroui/date-picker\",yarn:\"yarn add @heroui/date-picker\",pnpm:\"pnpm add @heroui/date-picker\",bun:\"bun add @heroui/date-picker\"}}),`\n`,(0,e.jsx)(t.h2,{id:\"import\",children:\"Import\"}),`\n`,(0,e.jsx)(u,{commands:{main:'import {DatePicker} from \"@heroui/react\";',individual:'import {DatePicker} from \"@heroui/date-picker\";'}}),`\n`,(0,e.jsx)(t.h2,{id:\"usage\",children:\"Usage\"}),`\n`,(0,e.jsx)(a,{title:\"Usage\",files:n.usage}),`\n`,(0,e.jsx)(t.h3,{id:\"disabled\",children:\"Disabled\"}),`\n`,(0,e.jsx)(a,{title:\"Disabled\",files:n.disabled}),`\n`,(0,e.jsx)(t.h3,{id:\"read-only\",children:\"Read Only\"}),`\n`,(0,e.jsx)(a,{title:\"Read Only\",files:n.readOnly}),`\n`,(0,e.jsx)(t.h3,{id:\"required\",children:\"Required\"}),`\n`,(0,e.jsx)(a,{title:\"Required\",files:n.required}),`\n`,(0,e.jsx)(t.h3,{id:\"variants\",children:\"Variants\"}),`\n`,(0,e.jsx)(a,{title:\"Variants\",files:n.variants}),`\n`,(0,e.jsx)(t.h3,{id:\"label-placements\",children:\"Label Placements\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"You can change the position of the label by setting the \",(0,e.jsx)(t.code,{children:\"labelPlacement\"}),\" property to \",(0,e.jsx)(t.code,{children:\"inside\"}),\", \",(0,e.jsx)(t.code,{children:\"outside\"}),\" or \",(0,e.jsx)(t.code,{children:\"outside-left\"}),\".\"]}),`\n`,(0,e.jsx)(a,{title:\"Label Placements\",files:n.labelPlacements}),`\n`,(0,e.jsxs)(t.blockquote,{children:[`\n`,(0,e.jsxs)(t.p,{children:[(0,e.jsx)(t.strong,{children:\"Note\"}),\": If the \",(0,e.jsx)(t.code,{children:\"label\"}),\" is not passed, the \",(0,e.jsx)(t.code,{children:\"labelPlacement\"}),\" property will be \",(0,e.jsx)(t.code,{children:\"outside\"}),\" by default.\"]}),`\n`]}),`\n`,(0,e.jsx)(t.h3,{id:\"with-description\",children:\"With Description\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"You can add a description to the date-picker by passing the \",(0,e.jsx)(t.code,{children:\"description\"}),\" property.\"]}),`\n`,(0,e.jsx)(a,{title:\"With Description\",files:n.description}),`\n`,(0,e.jsx)(t.h3,{id:\"with-error-message\",children:\"With Error Message\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"You can combine the \",(0,e.jsx)(t.code,{children:\"isInvalid\"}),\" and \",(0,e.jsx)(t.code,{children:\"errorMessage\"}),\" properties to show an invalid input.\"]}),`\n`,(0,e.jsx)(a,{title:\"With Error Message\",files:n.errorMessage}),`\n`,(0,e.jsxs)(t.p,{children:[\"You can also pass an error message as a function. This allows for dynamic error message handling based on the \",(0,e.jsx)(t.a,{href:\"https://github.com/adobe/react-spectrum/blob/1cacbf1d438675feb3859fee54b17e620b458d9c/packages/%40react-types/shared/src/inputs.d.ts#L44-L51\",children:\"ValidationResult\"}),\".\"]}),`\n`,(0,e.jsx)(a,{title:\"With Error Message Function\",files:n.errorMessageFunction}),`\n`,(0,e.jsx)(t.h3,{id:\"with-month-and-year-pickers\",children:\"With Month and Year Pickers\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"You can show month and year pickers in the calendar popover by setting the \",(0,e.jsx)(t.code,{children:\"showMonthAndYearPickers\"}),\" property to \",(0,e.jsx)(t.code,{children:\"true\"}),\". However, passing a number greater than 1 to the \",(0,e.jsx)(t.code,{children:\"visibleMonths\"}),\" prop will disable this feature.\"]}),`\n`,(0,e.jsx)(a,{title:\"With Month and Year Pickers\",files:n.withMonthAndYearPickers}),`\n`,(0,e.jsx)(t.h3,{id:\"with-time-fields\",children:\"With Time Fields\"}),`\n`,(0,e.jsx)(a,{title:\"With Time Fields\",files:n.withTimeField}),`\n`,(0,e.jsx)(t.h3,{id:\"selector-icon\",children:\"Selector Icon\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"You can use the \",(0,e.jsx)(t.code,{children:\"selectorIcon\"}),\" to add content to the start and end of the date-picker.\"]}),`\n`,(0,e.jsx)(a,{title:\"Selector Icon\",files:n.selectorIcon}),`\n`,(0,e.jsx)(t.h3,{id:\"selector-button-placement\",children:\"Selector Button Placement\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"You can change the position of the selector button by setting the \",(0,e.jsx)(t.code,{children:\"selectorButtonPlacement\"}),\" property to \",(0,e.jsx)(t.code,{children:\"start\"}),\" or \",(0,e.jsx)(t.code,{children:\"end\"}),\".\"]}),`\n`,(0,e.jsx)(a,{title:\"Selector Button Placement\",files:n.selectorButtonPlacement}),`\n`,(0,e.jsx)(t.h3,{id:\"controlled\",children:\"Controlled\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"You can use the \",(0,e.jsx)(t.code,{children:\"value\"}),\" and \",(0,e.jsx)(t.code,{children:\"onChange\"}),\" properties to control the input value.\"]}),`\n`,(0,e.jsx)(a,{title:\"Controlled\",files:n.controlled}),`\n`,(0,e.jsx)(t.h3,{id:\"time-zones\",children:\"Time Zones\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"DatePicker is time zone aware when a \",(0,e.jsx)(t.code,{children:\"ZonedDateTime\"}),` object is provided as the value. In this case, the time zone abbreviation is displayed,\nand time zone concerns such as daylight saving time are taken into account when the value is manipulated.`]}),`\n`,(0,e.jsxs)(t.p,{children:[(0,e.jsx)(t.a,{href:\"https://react-spectrum.adobe.com/internationalized/date/\",children:\"@internationalized/date\"}),` includes functions for parsing strings\nin multiple formats into `,(0,e.jsx)(t.code,{children:\"ZonedDateTime\"}),\" objects.\"]}),`\n`,(0,e.jsx)(o,{commands:{npm:\"npm install @internationalized/date@3.8.0\",yarn:\"yarn add @internationalized/date@3.8.0\",pnpm:\"pnpm add @internationalized/date@3.8.0\"}}),`\n`,(0,e.jsx)(t.pre,{children:(0,e.jsx)(t.code,{className:\"language-jsx\",children:`import {parseZonedDateTime} from \"@internationalized/date\";\n`})}),`\n`,(0,e.jsx)(d,{y:2}),`\n`,(0,e.jsx)(a,{title:\"Time Zones\",files:n.timeZones}),`\n`,(0,e.jsx)(t.h3,{id:\"granularity\",children:\"Granularity\"}),`\n`,(0,e.jsxs)(t.p,{children:[`The granularity prop allows you to control the smallest unit that is displayed by DatePicker By default,\nthe value is displayed with \"day\" granularity (year, month, and day),\nand `,(0,e.jsx)(t.code,{children:\"CalendarDateTime\"}),\" and \",(0,e.jsx)(t.code,{children:\"ZonedDateTime\"}),' values are displayed with \"minute\" granularity.']}),`\n`,(0,e.jsxs)(t.p,{children:[(0,e.jsx)(t.a,{href:\"https://react-spectrum.adobe.com/internationalized/date/\",children:\"@internationalized/date\"}),` includes functions for parsing strings\nin multiple formats into `,(0,e.jsx)(t.code,{children:\"ZonedDateTime\"}),\" objects.\"]}),`\n`,(0,e.jsx)(o,{commands:{npm:\"npm install @internationalized/date@3.8.0 @react-aria/i18n@3.12.8\",yarn:\"yarn add @internationalized/date@3.8.0 @react-aria/i18n@3.12.8\",pnpm:\"pnpm add @internationalized/date@3.8.0 @react-aria/i18n@3.12.8\"}}),`\n`,(0,e.jsx)(t.pre,{children:(0,e.jsx)(t.code,{className:\"language-jsx\",children:`import {DateValue, now, parseAbsoluteToLocal} from \"@internationalized/date\";\nimport {useDateFormatter} from \"@react-aria/i18n\";\n`})}),`\n`,(0,e.jsx)(d,{y:2}),`\n`,(0,e.jsx)(a,{title:\"Time Zones\",files:n.granularity}),`\n`,(0,e.jsx)(t.h3,{id:\"min-date-and-max-date\",children:\"Min Date And Max Date\"}),`\n`,(0,e.jsx)(t.p,{children:\"The minValue and maxValue props can also be used to ensure the value is within a specific range.\"}),`\n`,(0,e.jsxs)(t.p,{children:[(0,e.jsx)(t.a,{href:\"https://react-spectrum.adobe.com/internationalized/date/\",children:\"@internationalized/date\"}),` includes functions for parsing strings\nin multiple formats into `,(0,e.jsx)(t.code,{children:\"ZonedDateTime\"}),\" objects.\"]}),`\n`,(0,e.jsx)(o,{commands:{npm:\"npm install @internationalized/date@3.8.0\",yarn:\"yarn add @internationalized/date@3.8.0\",pnpm:\"pnpm add @internationalized/date@3.8.0\"}}),`\n`,(0,e.jsx)(t.pre,{children:(0,e.jsx)(t.code,{className:\"language-jsx\",children:`import {getLocalTimeZone, parseDate, today} from \"@internationalized/date\";\n`})}),`\n`,(0,e.jsx)(a,{title:\"Min Date And Max Date\",files:n.minAndMaxDate}),`\n`,(0,e.jsx)(t.h3,{id:\"international-calendar\",children:\"International Calendar\"}),`\n`,(0,e.jsxs)(t.p,{children:[`DatePicker supports selecting dates in many calendar systems used around the world, including Gregorian, Hebrew, Indian, Islamic, Buddhist, and more.\nDates are automatically displayed in the appropriate calendar system for the user's locale.\nThe calendar system can be overridden using the `,(0,e.jsx)(t.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/calendar#adding_a_calendar_in_the_locale_string\",children:\"Unicode calendar locale extension\"}),`,\npassed to the `,(0,e.jsx)(t.a,{href:\"https://react-spectrum.adobe.com/react-aria/I18nProvider.html\",children:\"I18nProvider\"}),\" component.\"]}),`\n`,(0,e.jsxs)(t.p,{children:[(0,e.jsx)(t.a,{href:\"https://react-spectrum.adobe.com/internationalized/date/\",children:\"@internationalized/date\"}),` includes functions for parsing strings\nin multiple formats into `,(0,e.jsx)(t.code,{children:\"ZonedDateTime\"}),\" objects.\"]}),`\n`,(0,e.jsx)(o,{commands:{npm:\"npm install @internationalized/date@3.8.0 @react-aria/i18n@3.12.8\",yarn:\"yarn add @internationalized/date@3.8.0 @react-aria/i18n@3.12.8\",pnpm:\"pnpm add @internationalized/date@3.8.0 @react-aria/i18n@3.12.8\"}}),`\n`,(0,e.jsx)(t.pre,{children:(0,e.jsx)(t.code,{className:\"language-jsx\",children:`import {DateValue, now, parseAbsoluteToLocal} from \"@internationalized/date\";\nimport {I18nProvider} from \"@react-aria/i18n\";\n`})}),`\n`,(0,e.jsx)(a,{title:\"International Calendar\",files:n.internationalCalendar}),`\n`,(0,e.jsx)(t.h3,{id:\"unavailable-dates\",children:\"Unavailable Dates\"}),`\n`,(0,e.jsx)(t.p,{children:\"DatePicker supports marking certain dates as unavailable. These dates cannot be selected by the user and are displayed with a crossed out appearance in the calendar. In the date field, an invalid state is displayed if a user enters an unavailable date.\"}),`\n`,(0,e.jsxs)(t.p,{children:[(0,e.jsx)(t.a,{href:\"https://react-spectrum.adobe.com/internationalized/date/\",children:\"@internationalized/date\"}),` includes functions for parsing strings\nin multiple formats into `,(0,e.jsx)(t.code,{children:\"ZonedDateTime\"}),\" objects.\"]}),`\n`,(0,e.jsx)(o,{commands:{npm:\"npm install @internationalized/date@3.8.0 @react-aria/i18n@3.12.8\",yarn:\"yarn add @internationalized/date@3.8.0 @react-aria/i18n@3.12.8\",pnpm:\"pnpm add @internationalized/date@3.8.0 @react-aria/i18n@3.12.8\"}}),`\n`,(0,e.jsx)(t.pre,{children:(0,e.jsx)(t.code,{className:\"language-jsx\",children:`import {today, isWeekend, getLocalTimeZone} from \"@internationalized/date\";\nimport {useLocale} from \"@react-aria/i18n\";\n`})}),`\n`,(0,e.jsx)(a,{title:\"Unavailable Dates\",files:n.unavailableDates}),`\n`,(0,e.jsx)(t.h3,{id:\"visible-months\",children:\"Visible Months\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"By default, the calendar popover displays a single month. The \",(0,e.jsx)(t.code,{children:\"visibleMonths\"}),\" prop allows displaying up to 3 months at a time, if screen space permits.\"]}),`\n`,(0,e.jsx)(a,{title:\"Visible Months\",files:n.visibleMonth}),`\n`,(0,e.jsx)(t.h3,{id:\"custom-first-day-of-week\",children:\"Custom first day of week\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"By default, the first day of the week is automatically set based on the current locale. This can be changed by setting the \",(0,e.jsx)(t.code,{children:\"firstDayOfWeek\"}),\" prop to \",(0,e.jsx)(t.code,{children:\"'sun'\"}),\", \",(0,e.jsx)(t.code,{children:\"'mon'\"}),\", \",(0,e.jsx)(t.code,{children:\"'tue'\"}),\", \",(0,e.jsx)(t.code,{children:\"'wed'\"}),\", \",(0,e.jsx)(t.code,{children:\"'thu'\"}),\", \",(0,e.jsx)(t.code,{children:\"'fri'\"}),\", or \",(0,e.jsx)(t.code,{children:\"'sat'\"}),\".\"]}),`\n`,(0,e.jsx)(a,{title:\"Custom first day of week\",files:n.firstDayOfWeek}),`\n`,(0,e.jsx)(t.h3,{id:\"page-behavior\",children:\"Page Behavior\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"By default, when pressing the next or previous buttons, pagination will advance by the \",(0,e.jsx)(t.code,{children:\"visibleMonths\"}),\" value. This behavior can be changed to page by single months instead, by setting \",(0,e.jsx)(t.code,{children:\"pageBehavior\"}),\" to \",(0,e.jsx)(t.code,{children:\"single\"}),\".\"]}),`\n`,(0,e.jsx)(a,{title:\"Page Behavior\",files:n.pageBehavior}),`\n`,(0,e.jsx)(t.h3,{id:\"preset\",children:\"Preset\"}),`\n`,(0,e.jsxs)(t.p,{children:[(0,e.jsx)(t.a,{href:\"https://react-spectrum.adobe.com/internationalized/date/\",children:\"@internationalized/date\"}),` includes functions for parsing strings\nin multiple formats into `,(0,e.jsx)(t.code,{children:\"ZonedDateTime\"}),\" objects.\"]}),`\n`,(0,e.jsx)(o,{commands:{npm:\"npm install @internationalized/date@3.8.0 @react-aria/i18n@3.12.8\",yarn:\"yarn add @internationalized/date@3.8.0 @react-aria/i18n@3.12.8\",pnpm:\"pnpm add @internationalized/date@3.8.0 @react-aria/i18n@3.12.8\"}}),`\n`,(0,e.jsx)(t.pre,{children:(0,e.jsx)(t.code,{className:\"language-jsx\",children:`import {\n  DateValue,\n  now,\n  useLocale,\n  startOfWeek,\n  startOfMonth,\n  useDateFormatter,\n  getLocalTimeZone,\n} from \"@internationalized/date\";\nimport {I18nProvider} from \"@react-aria/i18n\";\n`})}),`\n`,(0,e.jsx)(a,{title:\"Preset\",files:n.preset}),`\n`,(0,e.jsx)(t.h2,{id:\"slots\",children:\"Slots\"}),`\n`,(0,e.jsxs)(t.ul,{children:[`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"base\"}),\": Input wrapper, it handles alignment, placement, and general appearance.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"selectorButton\"}),\": Selector button element.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"selectorIcon\"}),\": Selector icon element.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"popoverContent\"}),\": The calendar popover element.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"calendar\"}),\": The calendar element.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"calendarContent\"}),\": The calendar's content element.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"timeInputLabel\"}),\": The time-input component's label element.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"timeInput\"}),\": The time-input component element.\"]}),`\n`]}),`\n`,(0,e.jsx)(d,{y:4}),`\n`,(0,e.jsx)(t.h2,{id:\"data-attributes\",children:\"Data Attributes\"}),`\n`,(0,e.jsxs)(t.p,{children:[(0,e.jsx)(t.code,{children:\"DatePicker\"}),\" has the following attributes on the \",(0,e.jsx)(t.code,{children:\"base\"}),\" element:\"]}),`\n`,(0,e.jsxs)(t.ul,{children:[`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-slot\"}),`:\nAll slots have this prop. which slot the element represents(e.g. `,(0,e.jsx)(t.code,{children:\"calendar\"}),\").\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-open\"}),`:\nIndicates if the calendar popover is open.`]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-invalid\"}),`:\nWhen the date-picker is invalid. Based on `,(0,e.jsx)(t.code,{children:\"isInvalid\"}),\" prop.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-required\"}),`:\nWhen the date-picker is required. Based on `,(0,e.jsx)(t.code,{children:\"isRequired\"}),\" prop.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-readonly\"}),`:\nWhen the date-picker is readonly. Based on `,(0,e.jsx)(t.code,{children:\"isReadOnly\"}),\" prop.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-disabled\"}),`:\nWhen the date-picker is disabled. Based on `,(0,e.jsx)(t.code,{children:\"isDisabled\"}),\" prop.\"]}),`\n`]}),`\n`,(0,e.jsx)(d,{y:4}),`\n`,(0,e.jsx)(t.h2,{id:\"accessibility\",children:\"Accessibility\"}),`\n`,(0,e.jsxs)(t.ul,{children:[`\n`,(0,e.jsx)(t.li,{children:\"Each date and time unit is displayed as an individually focusable and editable segment, which allows users an easy way to edit dates using the keyboard, in any date format and locale.\"}),`\n`,(0,e.jsx)(t.li,{children:\"Users can also open a calendar popover to select dates in a standard month grid.\"}),`\n`,(0,e.jsx)(t.li,{children:\"Localized screen reader messages are included to announce when the selection and visible date range change.\"}),`\n`,(0,e.jsx)(t.li,{children:\"Date segments are editable using an easy to use numeric keypad, and all interactions are accessible using touch-based screen readers.\"}),`\n`,(0,e.jsx)(t.li,{children:\"Integrates with HTML forms, supporting required, minimum and maximum values, unavailable dates, custom validation functions, realtime validation, and server-side validation errors\"}),`\n`]}),`\n`,(0,e.jsx)(d,{y:4}),`\n`,(0,e.jsx)(t.h2,{id:\"api\",children:\"API\"}),`\n`,(0,e.jsx)(t.h3,{id:\"datepicker-props\",children:\"DatePicker Props\"}),`\n`,(0,e.jsx)(i,{data:[{attribute:\"label\",type:\"ReactNode\",description:\"The content to display as the label.\",default:\"-\"},{attribute:\"value\",type:\"ZonedDateTime | CalendarDate | CalendarDateTime | undefined | null\",description:\"The current value of the date-picker (controlled).\",default:\"-\"},{attribute:\"variant\",type:\"flat | bordered | faded | underlined\",description:\"The variant of the date input.\",default:\"flat\"},{attribute:\"color\",type:\"default | primary | secondary | success | warning | danger\",description:\"The color of the date input.\",default:\"default\"},{attribute:\"size\",type:\"sm | md | lg\",description:\"The size of the date input.\",default:\"md\"},{attribute:\"radius\",type:\"none | sm | md | lg | full\",description:\"The radius of the date input.\",default:\"-\"},{attribute:\"defaultValue\",type:\"string\",description:\"The default value of the date-picker (uncontrolled).\",default:\"-\"},{attribute:\"placeholderValue\",type:\"ZonedDateTime | CalendarDate | CalendarDateTime | undefined | null\",description:\"The placeholder of the date-picker.\",default:\"-\"},{attribute:\"description\",type:\"ReactNode\",description:\"A description for the date-picker. Provides a hint such as specific requirements for what to choose.\",default:\"-\"},{attribute:\"errorMessage\",type:\"ReactNode | (v: ValidationResult) => ReactNode\",description:\"An error message for the date input.\",default:\"-\"},{attribute:\"validate\",type:\"(value: MappedDateValue<DateValue>) => ValidationError | true | null | undefined\",description:\"Validate input values when committing (e.g. on blur), returning error messages for invalid values.\",default:\"-\"},{attribute:\"validationBehavior\",type:\"native | aria\",description:\"Whether to use native HTML form validation or ARIA validation. When wrapped in a Form component, the default is `aria`. Otherwise, the default is `native`.\",default:\"native\"},{attribute:\"startContent\",type:\"ReactNode\",description:\"Element to be rendered in the left side of the date-picker.\",default:\"-\"},{attribute:\"endContent\",type:\"ReactNode\",description:\"Element to be rendered in the right side of the date-picker.\",default:\"-\"},{attribute:\"labelPlacement\",type:\"inside | outside | outside-left\",description:\"The position of the label.\",default:\"inside\"},{attribute:\"isRequired\",type:\"boolean\",description:\"Whether user input is required on the date-picker before form submission.\",default:\"false\"},{attribute:\"isReadOnly\",type:\"boolean\",description:\"Whether the date-picker can be selected but not changed by the user.\",default:\"false\"},{attribute:\"isDisabled\",type:\"boolean\",description:\"Whether the date-picker is disabled.\",default:\"false\"},{attribute:\"isInvalid\",type:\"boolean\",description:\"Whether the date-picker is invalid.\",default:\"false\"},{attribute:\"visibleMonths\",type:\"number\",description:\"The number of months to display at once. Up to 3 months are supported.\",default:\"1\"},{attribute:\"firstDayOfWeek\",type:\"sun | mon | tue | wed | thu | fri | sat\",description:\"The day that starts the week.\",default:\"-\"},{attribute:\"selectorIcon\",type:\"ReactNode\",description:\"The icon to toggle the date picker popover. Usually a calendar icon.\",default:\"-\"},{attribute:\"pageBehavior\",type:\"PageBehavior\",description:\"Controls the behavior of paging.\",default:\"visible\"},{attribute:\"calendarWidth\",type:\"number\",description:\"The width to be applied to the calendar component.\",default:\"256\"},{attribute:\"isDateUnavailable\",type:\"(date: DateValue) => boolean\",description:\"Callback that is called for each date of the calendar. If it returns true, then the date is unavailable.\",default:\"-\"},{attribute:\"autoFocus\",type:\"boolean\",description:\"Whether the element should receive focus on render.\",default:\"false\"},{attribute:\"hourCycle\",type:\"12 | 24\",description:\"Whether to display the time in 12 or 24 hour format.\",default:\"-\"},{attribute:\"granularity\",type:\"day | hour | minute | second\",description:\"Determines the smallest unit that is displayed in the date picker.\",default:\"-\"},{attribute:\"hideTimeZone\",type:\"boolean\",description:\"Whether to hide the time zone abbreviation.\",default:\"false\"},{attribute:\"shouldForceLeadingZeros\",type:\"boolean\",description:\"Whether to always show leading zeros in the month, day, and hour fields.\",default:\"true\"},{attribute:\"CalendarBottomContent\",type:\"ReactNode\",description:\"Bottom content to be rendered in the calendar component.\",default:\"-\"},{attribute:\"showMonthAndYearPickers\",type:\"boolean | undefined\",description:\"Whether the calendar should show month and year pickers.\",default:\"false\"},{attribute:\"popoverProps\",type:\"PopoverProps | undefined\",description:\"Props to be passed to the popover component.\",default:'{ placement: \"bottom\", triggerScaleOnOpen: false, offset: 13 }'},{attribute:\"selectorButtonProps\",type:\"ButtonProps | undefined\",description:\"Props to be passed to the selector button component.\",default:'{ size: \"sm\", variant: \"light\", radius: \"full\", isIconOnly: true }'},{attribute:\"calendarProps\",type:\"CalendarProps | undefined\",description:\"Props to be passed to the calendar component.\",default:'{ size: \"sm\", variant: \"light\", radius: \"full\", isIconOnly: true }'},{attribute:\"timeInputProps\",type:\"TimeInputProps | undefined\",description:\"Props to be passed to the time input component.\",default:'{ size: \"sm\", variant: \"light\", radius: \"full\", isIconOnly: true }'},{attribute:\"disableAnimation\",type:\"boolean\",description:\"Whether to disable all animations in the date picker. Including the DateInput, Button, Calendar, and Popover.\",default:\"false\"},{attribute:\"classNames\",type:'Partial<Record<\"base\" | \"selectorButton\" | \"selectorIcon\" | \"popoverContent\" | \"calendar\" | \"calendarContent\" | \"timeInputLabel\" | \"timeInput\", string>>',description:\"Allows to set custom class names for the date-picker slots. You can also pass Date Input classNames here.\",default:\"-\"}]}),`\n`,(0,e.jsx)(t.h3,{id:\"datepicker-events\",children:\"DatePicker Events\"}),`\n`,(0,e.jsx)(i,{data:[{attribute:\"onChange\",type:\"(value: ZonedDateTime | CalendarDate | CalendarDateTime) => void\",description:\"Handler that is called when the date-picker's value changes.\",default:\"-\"},{attribute:\"onFocus\",type:\"(e: FocusEvent<HTMLInputElement>) => void\",description:\"Handler that is called when the element receives focus.\",default:\"-\"},{attribute:\"onBlur\",type:\"(e: FocusEvent<HTMLInputElement>) => void\",description:\"Handler that is called when the element loses focus.\",default:\"-\"},{attribute:\"onFocusChange\",type:\"(isFocused: boolean) => void\",description:\"Handler that is called when the element's focus status changes.\",default:\"-\"},{attribute:\"onKeyDown\",type:\"(e: KeyboardEvent) => void\",description:\"Handler that is called when a key is pressed.\",default:\"-\"},{attribute:\"onKeyUp\",type:\"(e: KeyboardEvent) => void\",description:\"Handler that is called when a key is released.\",default:\"-\"}]})]})}function pe(r={}){let{wrapper:t}=r.components||{};return t?(0,e.jsx)(t,{...r,children:(0,e.jsx)(ce,{...r})}):ce(r)}function l(r,t){throw new Error(\"Expected \"+(t?\"component\":\"object\")+\" `\"+r+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return ye(wt);})();\n;return Component;"
  },
  "_id": "docs/components/date-picker.mdx",
  "_raw": {
    "sourceFilePath": "docs/components/date-picker.mdx",
    "sourceFileName": "date-picker.mdx",
    "sourceFileDir": "docs/components",
    "contentType": "mdx",
    "flattenedPath": "docs/components/date-picker"
  },
  "type": "Doc",
  "slug": "/docs/components/date-picker",
  "slugAsParams": "components/date-picker",
  "url": "/docs/components/date-picker"
}