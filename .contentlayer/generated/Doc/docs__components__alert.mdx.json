{
  "title": "Alert",
  "description": "Alerts are temporary notifications that provide concise feedback about an action or event.",
  "body": {
    "raw": "\nimport {alertContent} from \"@/content/components/alert\";\n\n# Alert\n\nAlerts are temporary notifications that provide concise feedback about an action or event.\n\n<ComponentLinks component=\"alert\" />\n\n---\n\n<CarbonAd />\n\n## Installation\n\n<PackageManagers\n  showGlobalInstallWarning\n  commands={{\n    cli: \"npx heroui-cli@latest add alert\",\n    npm: \"npm install @heroui/alert\",\n    yarn: \"yarn add @heroui/alert\",\n    pnpm: \"pnpm add @heroui/alert\",\n    bun: \"bun add @heroui/alert\",\n  }}\n/>\n\n## Import\n\n<ImportTabs\n  commands={{\n    main: 'import {Alert} from \"@heroui/react\";',\n    individual: 'import {Alert} from \"@heroui/alert\";',\n  }}\n/>\n\n## Usage\n\n<CodeDemo title=\"Usage\" files={alertContent.usage} />\n\n### Colors\n\nAlert comes with 6 color variants to convey different meanings.\n\n<CodeDemo title=\"Colors\" files={alertContent.colors} />\n\n### Variants\n\n<CodeDemo title=\"Variants\" files={alertContent.variants} />\n\n### Radius\n\n<CodeDemo title=\"Radius\" files={alertContent.radius} />\n\n### Custom Icon\n\nBy default, Alert displays an appropriate icon based on the `color` prop. You can override this by providing a custom icon using the `icon` prop.\n\n<CodeDemo title=\"Custom Icon\" files={alertContent.withIcon} />\n\n### Without Icon\n\nYou can hide the icon by setting the `hideIcon` prop to `true`.\n\n<CodeDemo title=\"Without Icon\" files={alertContent.withoutIcon} />\n\n### Without Icon Wrapper\n\nYou can hide the icon wrapper by setting the `hideIconWrapper` prop to `true`.\n\n<CodeDemo title=\"Without Icon Wrapper\" files={alertContent.withoutIconWrapper} />\n\n### With Action\n\nAlert supports an `endContent` prop for additional actions.\n\n<CodeDemo title=\"With Action\" files={alertContent.withAction} />\n\n### Controlled Visibility\n\nYou can control the alert visibility using the `isVisible` and `onVisibleChange` props.\n\n<CodeDemo title=\"Controlled\" files={alertContent.controlled} />\n\n### Custom Styles\n\nYou can customize the alert by passing custom Tailwind CSS classes to the component slots.\n\n<CodeDemo title=\"Custom Styles\" files={alertContent.customStyles} />\n\n### Custom Implementation\n\nYou can use the `useAlert` hook to create your own alert component.\n\n<CodeDemo showPreview={false} title=\"Custom Implementation\" files={alertContent.customImpl} />\n\n<Spacer y={4} />\n\n## Data Attributes\n\nAlert has the following attributes on the `base` element:\n\n- **data-visible**: When the alert is visible\n- **data-closeable**: When the alert can be closed\n- **data-has-title**: When the alert has a title\n- **data-has-description**: When the alert has a description\n\n<Spacer y={4} />\n\n### Slots\n\nAlert has the following slots:\n\n- `base`: The main alert container element\n- `title`: The title element\n- `description`: The description element\n- `mainWrapper`: The wrapper for the title and description content\n- `closeButton`: The close button element\n- `iconWrapper`: The wrapper for the alert icon\n- `alertIcon`: The alert icon element\n\n## Accessibility\n\n- Alert has role of `alert`\n- Close button has aria-label=\"Close\" by default\n- When closed, alert is removed from the DOM\n\n<Spacer y={4} />\n\n## API\n\n### Alert Props\n\n<APITable\n  data={[\n    {\n      attribute: \"title\",\n      type: \"ReactNode\",\n      description: \"The alert title\",\n      default: \"-\"\n    },\n    {\n      attribute: \"icon\", \n      type: \"ReactNode\",\n      description: \"The alert icon - overrides the default icon\",\n      default: \"-\"\n    },\n    {\n      attribute: \"description\",\n      type: \"ReactNode\", \n      description: \"The alert description\",\n      default: \"-\"\n    },\n    {\n      attribute: \"color\",\n      type: \"default | primary | secondary | success | warning | danger\",\n      description: \"The alert color theme\",\n      default: \"default\"\n    },\n    {\n      attribute: \"variant\",\n      type: \"solid | bordered | flat | faded\",\n      description: \"The alert variant\",\n      default: \"flat\"\n    },\n    {\n      attribute: \"radius\",\n      type: \"none | sm | md | lg | full\",\n      description: \"The alert border radius\",\n      default: \"md\"\n    },\n    {\n      attribute: \"startContent\",\n      type: \"ReactNode\",\n      description: \"The alert start content\",\n      default: \"-\"\n    },\n    {\n      attribute: \"endContent\",\n      type: \"ReactNode\",\n      description: \"The alert end content\", \n      default: \"-\"\n    },\n    {\n      attribute: \"isVisible\",\n      type: \"boolean\",\n      description: \"Whether the alert is visible\",\n      default: \"-\"\n    },\n    {\n      attribute: \"isClosable\",\n      type: \"boolean\",\n      description: \"Whether the alert can be closed\",\n      default: \"false\"\n    },\n    {\n      attribute: \"hideIcon\",\n      type: \"boolean\",\n      description: \"Whether the icon is hidden\",\n      default: \"false\"\n    },\n    {\n      attribute: \"hideIconWrapper\",\n      type: \"boolean\",\n      description: \"Whether the icon wrapper is hidden\",\n      default: \"false\"\n    },\n    {\n      attribute: \"closeButtonProps\",\n      type: \"ButtonProps\",\n      description: \"Props for the close button\",\n      default: \"-\"\n    }\n  ]}\n/>\n\n### Alert Events\n\n<APITable\n  data={[\n    {\n      attribute: \"onClose\",\n      type: \"() => void\",\n      description: \"Handler called when the close button is clicked\",\n      default: \"-\"\n    },\n    {\n      attribute: \"onVisibleChange\",\n      type: \"(isVisible: boolean) => void\",\n      description: \"Handler called when the alert visibility changes\",\n      default: \"-\"\n    }\n  ]}\n/>",
    "code": "var Component=(()=>{var U=Object.create;var c=Object.defineProperty;var E=Object.getOwnPropertyDescriptor;var Z=Object.getOwnPropertyNames;var $=Object.getPrototypeOf,q=Object.prototype.hasOwnProperty;var F=(r,t)=>()=>(t||r((t={exports:{}}).exports,t),t.exports),H=(r,t)=>{for(var i in t)c(r,i,{get:t[i],enumerable:!0})},h=(r,t,i,l)=>{if(t&&typeof t==\"object\"||typeof t==\"function\")for(let o of Z(t))!q.call(r,o)&&o!==i&&c(r,o,{get:()=>t[o],enumerable:!(l=E(t,o))||l.enumerable});return r};var X=(r,t,i)=>(i=r!=null?U($(r)):{},h(t||!r||!r.__esModule?c(i,\"default\",{value:r,enumerable:!0}):i,r)),G=r=>h(c({},\"__esModule\",{value:!0}),r);var m=F((Ce,f)=>{f.exports=_jsx_runtime});var we={};H(we,{default:()=>_,frontmatter:()=>ye});var e=X(m());var b=`import {Alert} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <div className=\"flex items-center justify-center w-full\">\n      <div className=\"flex flex-col w-full\">\n        {[\"default\", \"primary\", \"secondary\", \"success\", \"warning\", \"danger\"].map((color) => (\n          <div key={color} className=\"w-full flex items-center my-3\">\n            <Alert color={color} title={\\`This is a \\${color} alert\\`} />\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n`;var J={\"/App.jsx\":b},g={...J};var v=`import {Alert} from \"@heroui/react\";\n\nexport default function App() {\n  const title = \"This is an alert\";\n  const description = \"Thanks for subscribing to our newsletter!\";\n\n  return (\n    <div className=\"flex items-center justify-center w-full\">\n      <Alert description={description} title={title} />\n    </div>\n  );\n}\n`;var Q={\"/App.jsx\":v},A={...Q};var y=`import {Alert} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <div className=\"flex items-center justify-center w-full\">\n      <div className=\"flex flex-col w-full\">\n        {[\"none\", \"sm\", \"md\", \"lg\", \"full\"].map((radius) => (\n          <div key={radius} className=\"w-full flex items-center my-3\">\n            <Alert radius={radius} title={\\`This is a \\${radius} radius alert\\`} />\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n`;var te={\"/App.jsx\":y},w={...te};var x=`import React, {forwardRef, useMemo} from \"react\";\nimport {useAlert} from \"@heroui/react\";\n\nexport const InfoCircleIcon = (props) => {\n  return (\n    <svg\n      fill=\"none\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      width=\"24\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      {...props}\n    >\n      <path d=\"M12 22C17.51 22 22 17.51 22 12C22 6.49 17.51 2 12 2C6.49 2 2 6.49 2 12C2 17.51 6.49 22 12 22ZM12.75 16C12.75 16.41 12.41 16.75 12 16.75C11.59 16.75 11.25 16.41 11.25 16L11.25 11C11.25 10.59 11.59 10.25 12 10.25C12.41 10.25 12.75 10.59 12.75 11L12.75 16ZM11.08 7.62C11.13 7.49 11.2 7.39 11.29 7.29C11.39 7.2 11.5 7.13 11.62 7.08C11.74 7.03 11.87 7 12 7C12.13 7 12.26 7.03 12.38 7.08C12.5 7.13 12.61 7.2 12.71 7.29C12.8 7.39 12.87 7.49 12.92 7.62C12.97 7.74 13 7.87 13 8C13 8.13 12.97 8.26 12.92 8.38C12.87 8.5 12.8 8.61 12.71 8.71C12.61 8.8 12.5 8.87 12.38 8.92C12.14 9.02 11.86 9.02 11.62 8.92C11.5 8.87 11.39 8.8 11.29 8.71C11.2 8.61 11.13 8.5 11.08 8.38C11.03 8.26 11 8.13 11 8C11 7.87 11.03 7.74 11.08 7.62Z\" />\n    </svg>\n  );\n};\n\nexport const CloseIcon = (props) => {\n  return (\n    <svg\n      aria-hidden=\"true\"\n      fill=\"none\"\n      focusable=\"false\"\n      height=\"1em\"\n      role=\"presentation\"\n      stroke=\"currentColor\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth={2}\n      viewBox=\"0 0 24 24\"\n      width=\"1em\"\n      {...props}\n    >\n      <path d=\"M18 6L6 18M6 6l12 12\" />\n    </svg>\n  );\n};\n\nconst styles = {\n  base: [\n    \"bg-slate-100\",\n    \"border\",\n    \"shadow\",\n    \"hover:bg-slate-200\",\n    \"focus-within:!bg-slate-100\",\n    \"dark:bg-slate-900\",\n    \"dark:hover:bg-slate-800\",\n    \"dark:border-slate-800\",\n    \"dark:focus-within:!bg-slate-900\",\n    \"cursor-pointer\",\n  ],\n  title: [\"text-base\", \"text-slate-500\", \"font-bold\"],\n  description: [\"text-base\", \"text-slate-500\"],\n};\n\nconst MyAlert = forwardRef((props, ref) => {\n  const {\n    title,\n    description,\n    isClosable,\n    domRef,\n    handleClose,\n    getBaseProps,\n    getMainWrapperProps,\n    getDescriptionProps,\n    getTitleProps,\n    getCloseButtonProps,\n    color,\n    isVisible,\n    onClose,\n    getAlertIconProps,\n  } = useAlert({\n    ...props,\n    ref,\n    // this is just for the example, the props bellow should be passed by the parent component\n    title: \"Email Sent!!\",\n    description: \"You will get a reply soon\",\n    // custom styles\n    classNames: {\n      ...styles,\n    },\n  });\n\n  const mainWrapper = useMemo(() => {\n    return (\n      <div {...getMainWrapperProps()}>\n        {title && <div {...getTitleProps()}>{title}</div>}\n        <div {...getDescriptionProps()}>{description}</div>\n      </div>\n    );\n  }, [title, description, getMainWrapperProps, getTitleProps, getDescriptionProps]);\n\n  const baseWrapper = useMemo(() => {\n    return isVisible ? (\n      <div ref={domRef} {...getBaseProps()}>\n        <InfoCircleIcon {...getAlertIconProps()} />\n        {mainWrapper}\n        {(isClosable || onClose) && (\n          <button onClick={handleClose} {...getCloseButtonProps()}>\n            <CloseIcon />\n          </button>\n        )}\n      </div>\n    ) : null;\n  }, [\n    mainWrapper,\n    isClosable,\n    getCloseButtonProps,\n    isVisible,\n    domRef,\n    getBaseProps,\n    handleClose,\n    color,\n    onClose,\n    getAlertIconProps,\n  ]);\n\n  return <>{baseWrapper}</>;\n});\n\nMyAlert.displayName = \"MyAlert\";\n\nexport default MyAlert;\n`;var oe={\"/App.jsx\":x},C={...oe};var I=`import {Alert, Button} from \"@heroui/react\";\n\nconst CustomAlert = React.forwardRef(\n  (\n    {title, children, variant = \"faded\", color = \"secondary\", className, classNames = {}, ...props},\n    ref,\n  ) => {\n    const colorClass = React.useMemo(() => {\n      switch (color) {\n        case \"default\":\n          return \"before:bg-default-300\";\n        case \"primary\":\n          return \"before:bg-primary\";\n        case \"secondary\":\n          return \"before:bg-secondary\";\n        case \"success\":\n          return \"before:bg-success\";\n        case \"warning\":\n          return \"before:bg-warning\";\n        case \"danger\":\n          return \"before:bg-danger\";\n        default:\n          return \"before:bg-default-200\";\n      }\n    }, []);\n\n    return (\n      <Alert\n        ref={ref}\n        classNames={{\n          ...classNames,\n          base: cn(\n            [\n              \"bg-default-50 dark:bg-background shadow-sm\",\n              \"border-1 border-default-200 dark:border-default-100\",\n              \"relative before:content-[''] before:absolute before:z-10\",\n              \"before:left-0 before:top-[-1px] before:bottom-[-1px] before:w-1\",\n              \"rounded-l-none border-l-0\",\n              colorClass,\n            ],\n            classNames.base,\n            className,\n          ),\n          mainWrapper: cn(\"pt-1\", classNames.mainWrapper),\n          iconWrapper: cn(\"dark:bg-transparent\", classNames.iconWrapper),\n        }}\n        color={color}\n        title={title}\n        variant={variant}\n        {...props}\n      >\n        {children}\n      </Alert>\n    );\n  },\n);\n\nCustomAlert.displayName = \"CustomAlert\";\n\nexport default function App() {\n  const colors = [\"default\", \"primary\", \"secondary\", \"success\", \"warning\", \"danger\"];\n\n  return (\n    <div className=\"flex flex-col w-full gap-y-6\">\n      {colors.map((color) => (\n        <CustomAlert\n          key={color}\n          color={color}\n          title=\"The documents you requested are ready to be viewed\"\n        >\n          <div className=\"flex items-center gap-1 mt-3\">\n            <Button\n              className=\"bg-background text-default-700 font-medium border-1 shadow-small\"\n              size=\"sm\"\n              variant=\"bordered\"\n            >\n              View documents\n            </Button>\n            <Button\n              className=\"text-default-500 font-medium underline underline-offset-4\"\n              size=\"sm\"\n              variant=\"light\"\n            >\n              Maybe later\n            </Button>\n          </div>\n        </CustomAlert>\n      ))}\n    </div>\n  );\n}\n`;var N=`import type {AlertProps} from \"@heroui/react\";\n\nimport React from \"react\";\nimport {Alert, Button, cn} from \"@heroui/react\";\n\nconst CustomAlert = ({children, variant, color, className, classNames, ...props}: AlertProps) => {\n  const colorClass = React.useMemo(() => {\n    switch (color) {\n      case \"default\":\n        return \"before:bg-default-300\";\n      case \"primary\":\n        return \"before:bg-primary\";\n      case \"secondary\":\n        return \"before:bg-secondary\";\n      case \"success\":\n        return \"before:bg-success\";\n      case \"warning\":\n        return \"before:bg-warning\";\n      case \"danger\":\n        return \"before:bg-danger\";\n      default:\n        return \"before:bg-default-200\";\n    }\n  }, []);\n\n  return (\n    <Alert\n      classNames={{\n        ...classNames,\n        base: cn(\n          [\n            \"bg-default-50 dark:bg-background shadow-sm\",\n            \"border-1 border-default-200 dark:border-default-100\",\n            \"relative before:content-[''] before:absolute before:z-10\",\n            \"before:left-0 before:top-[-1px] before:bottom-[-1px] before:w-1\",\n            \"rounded-l-none border-l-0\",\n            colorClass,\n          ],\n          classNames?.base,\n          className,\n        ),\n        mainWrapper: cn(\"pt-1\", classNames?.mainWrapper),\n        iconWrapper: cn(\"dark:bg-transparent\", classNames?.iconWrapper),\n      }}\n      color={color}\n      variant={variant}\n      {...props}\n    >\n      {children}\n    </Alert>\n  );\n};\n\nCustomAlert.displayName = \"CustomAlert\";\n\nexport default function App() {\n  const colors = [\"default\", \"primary\", \"secondary\", \"success\", \"warning\", \"danger\"] as any;\n\n  return (\n    <div className=\"flex flex-col w-full gap-y-6\">\n      {colors.map((color) => (\n        <CustomAlert\n          key={color}\n          color={color}\n          description=\"The documents you requested are ready to be viewed\"\n        >\n          <div className=\"flex items-center gap-1 mt-3\">\n            <Button\n              className=\"bg-background text-default-700 font-medium border-1 shadow-small\"\n              size=\"sm\"\n              variant=\"bordered\"\n            >\n              View documents\n            </Button>\n            <Button\n              className=\"text-default-500 font-medium underline underline-offset-4\"\n              size=\"sm\"\n              variant=\"light\"\n            >\n              Maybe later\n            </Button>\n          </div>\n        </CustomAlert>\n      ))}\n    </div>\n  );\n}\n`;var ae={\"/App.jsx\":I},le={\"/App.tsx\":N},W={...ae,...le};var k=`import {Alert} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <div className=\"flex flex-col gap-4 w-full\">\n      {[\"solid\", \"bordered\", \"flat\", \"faded\"].map((variant) => (\n        <Alert\n          key={variant}\n          color=\"secondary\"\n          title={\\`This is a \\${variant} variant alert\\`}\n          variant={variant}\n        />\n      ))}\n    </div>\n  );\n}\n`;var ce={\"/App.jsx\":k},T={...ce};var P=`import {Alert} from \"@heroui/react\";\n\nconst UserIcon = ({fill = \"currentColor\", size, height, width, ...props}) => {\n  return (\n    <svg\n      data-name=\"Iconly/Curved/Profile\"\n      height={size || height || 24}\n      viewBox=\"0 0 24 24\"\n      width={size || width || 24}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      {...props}\n    >\n      <g\n        fill=\"none\"\n        stroke={fill}\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeMiterlimit={10}\n        strokeWidth={1.5}\n      >\n        <path\n          d=\"M11.845 21.662C8.153 21.662 5 21.088 5 18.787s3.133-4.425 6.845-4.425c3.692 0 6.845 2.1 6.845 4.4s-3.134 2.9-6.845 2.9z\"\n          data-name=\"Stroke 1\"\n        />\n        <path d=\"M11.837 11.174a4.372 4.372 0 10-.031 0z\" data-name=\"Stroke 3\" />\n      </g>\n    </svg>\n  );\n};\n\nexport default function App() {\n  return <Alert icon={<UserIcon />}>An alert with a custom icon</Alert>;\n}\n`;var pe={\"/App.jsx\":P},B={...pe};var M=`import {Alert, Button} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <div className=\"flex items-center justify-center w-full\">\n      <Alert\n        color=\"warning\"\n        description=\"Upgrade to a paid plan to continue\"\n        endContent={\n          <Button color=\"warning\" size=\"sm\" variant=\"flat\">\n            Upgrade\n          </Button>\n        }\n        title=\"You have no credits left\"\n        variant=\"faded\"\n      />\n    </div>\n  );\n}\n`;var he={\"/App.jsx\":M},j={...he};var R=`import {Alert, Button} from \"@heroui/react\";\n\nexport default function App() {\n  const [isVisible, setIsVisible] = React.useState(true);\n\n  const title = \"Success Notification\";\n  const description =\n    \"Your action has been completed successfully. We'll notify you when updates are available.\";\n\n  return (\n    <div className=\"flex flex-col gap-4\">\n      {isVisible ? (\n        <Alert\n          color=\"success\"\n          description={description}\n          isVisible={isVisible}\n          title={title}\n          variant=\"faded\"\n          onClose={() => setIsVisible(false)}\n        />\n      ) : (\n        <Button variant=\"bordered\" onPress={() => setIsVisible(true)}>\n          Show Alert\n        </Button>\n      )}\n    </div>\n  );\n}\n`;var me={\"/App.jsx\":R},V={...me};var S=`import {Alert} from \"@heroui/react\";\n\nexport default function App() {\n  const title = \"This is an alert\";\n  const description = \"Thanks for subscribing to our newsletter!\";\n\n  return (\n    <div className=\"flex items-center justify-center w-full\">\n      <Alert hideIcon color=\"success\" description={description} title={title} variant=\"faded\" />\n    </div>\n  );\n}\n`;var ge={\"/App.jsx\":S},z={...ge};var L=`import {Alert} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <div className=\"flex items-center justify-center w-full\">\n      <Alert\n        hideIconWrapper\n        color=\"secondary\"\n        description=\"This is a bordered variant alert\"\n        title=\"Bordered Alert\"\n        variant=\"bordered\"\n      />\n    </div>\n  );\n}\n`;var Ae={\"/App.jsx\":L},D={...Ae};var n={colors:g,usage:A,radius:w,customImpl:C,customStyles:W,variants:T,withIcon:B,withAction:j,controlled:V,withoutIcon:z,withoutIconWrapper:D};var ye={title:\"Alert\",description:\"Alerts are temporary notifications that provide concise feedback about an action or event.\"};function Y(r){let t={code:\"code\",h1:\"h1\",h2:\"h2\",h3:\"h3\",hr:\"hr\",li:\"li\",p:\"p\",strong:\"strong\",ul:\"ul\",...r.components},{APITable:i,CarbonAd:l,CodeDemo:o,ComponentLinks:d,ImportTabs:p,PackageManagers:u,Spacer:s}=t;return i||a(\"APITable\",!0),l||a(\"CarbonAd\",!0),o||a(\"CodeDemo\",!0),d||a(\"ComponentLinks\",!0),p||a(\"ImportTabs\",!0),u||a(\"PackageManagers\",!0),s||a(\"Spacer\",!0),(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(t.h1,{id:\"alert\",children:\"Alert\"}),`\n`,(0,e.jsx)(t.p,{children:\"Alerts are temporary notifications that provide concise feedback about an action or event.\"}),`\n`,(0,e.jsx)(d,{component:\"alert\"}),`\n`,(0,e.jsx)(t.hr,{}),`\n`,(0,e.jsx)(l,{}),`\n`,(0,e.jsx)(t.h2,{id:\"installation\",children:\"Installation\"}),`\n`,(0,e.jsx)(u,{showGlobalInstallWarning:!0,commands:{cli:\"npx heroui-cli@latest add alert\",npm:\"npm install @heroui/alert\",yarn:\"yarn add @heroui/alert\",pnpm:\"pnpm add @heroui/alert\",bun:\"bun add @heroui/alert\"}}),`\n`,(0,e.jsx)(t.h2,{id:\"import\",children:\"Import\"}),`\n`,(0,e.jsx)(p,{commands:{main:'import {Alert} from \"@heroui/react\";',individual:'import {Alert} from \"@heroui/alert\";'}}),`\n`,(0,e.jsx)(t.h2,{id:\"usage\",children:\"Usage\"}),`\n`,(0,e.jsx)(o,{title:\"Usage\",files:n.usage}),`\n`,(0,e.jsx)(t.h3,{id:\"colors\",children:\"Colors\"}),`\n`,(0,e.jsx)(t.p,{children:\"Alert comes with 6 color variants to convey different meanings.\"}),`\n`,(0,e.jsx)(o,{title:\"Colors\",files:n.colors}),`\n`,(0,e.jsx)(t.h3,{id:\"variants\",children:\"Variants\"}),`\n`,(0,e.jsx)(o,{title:\"Variants\",files:n.variants}),`\n`,(0,e.jsx)(t.h3,{id:\"radius\",children:\"Radius\"}),`\n`,(0,e.jsx)(o,{title:\"Radius\",files:n.radius}),`\n`,(0,e.jsx)(t.h3,{id:\"custom-icon\",children:\"Custom Icon\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"By default, Alert displays an appropriate icon based on the \",(0,e.jsx)(t.code,{children:\"color\"}),\" prop. You can override this by providing a custom icon using the \",(0,e.jsx)(t.code,{children:\"icon\"}),\" prop.\"]}),`\n`,(0,e.jsx)(o,{title:\"Custom Icon\",files:n.withIcon}),`\n`,(0,e.jsx)(t.h3,{id:\"without-icon\",children:\"Without Icon\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"You can hide the icon by setting the \",(0,e.jsx)(t.code,{children:\"hideIcon\"}),\" prop to \",(0,e.jsx)(t.code,{children:\"true\"}),\".\"]}),`\n`,(0,e.jsx)(o,{title:\"Without Icon\",files:n.withoutIcon}),`\n`,(0,e.jsx)(t.h3,{id:\"without-icon-wrapper\",children:\"Without Icon Wrapper\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"You can hide the icon wrapper by setting the \",(0,e.jsx)(t.code,{children:\"hideIconWrapper\"}),\" prop to \",(0,e.jsx)(t.code,{children:\"true\"}),\".\"]}),`\n`,(0,e.jsx)(o,{title:\"Without Icon Wrapper\",files:n.withoutIconWrapper}),`\n`,(0,e.jsx)(t.h3,{id:\"with-action\",children:\"With Action\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"Alert supports an \",(0,e.jsx)(t.code,{children:\"endContent\"}),\" prop for additional actions.\"]}),`\n`,(0,e.jsx)(o,{title:\"With Action\",files:n.withAction}),`\n`,(0,e.jsx)(t.h3,{id:\"controlled-visibility\",children:\"Controlled Visibility\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"You can control the alert visibility using the \",(0,e.jsx)(t.code,{children:\"isVisible\"}),\" and \",(0,e.jsx)(t.code,{children:\"onVisibleChange\"}),\" props.\"]}),`\n`,(0,e.jsx)(o,{title:\"Controlled\",files:n.controlled}),`\n`,(0,e.jsx)(t.h3,{id:\"custom-styles\",children:\"Custom Styles\"}),`\n`,(0,e.jsx)(t.p,{children:\"You can customize the alert by passing custom Tailwind CSS classes to the component slots.\"}),`\n`,(0,e.jsx)(o,{title:\"Custom Styles\",files:n.customStyles}),`\n`,(0,e.jsx)(t.h3,{id:\"custom-implementation\",children:\"Custom Implementation\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"You can use the \",(0,e.jsx)(t.code,{children:\"useAlert\"}),\" hook to create your own alert component.\"]}),`\n`,(0,e.jsx)(o,{showPreview:!1,title:\"Custom Implementation\",files:n.customImpl}),`\n`,(0,e.jsx)(s,{y:4}),`\n`,(0,e.jsx)(t.h2,{id:\"data-attributes\",children:\"Data Attributes\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"Alert has the following attributes on the \",(0,e.jsx)(t.code,{children:\"base\"}),\" element:\"]}),`\n`,(0,e.jsxs)(t.ul,{children:[`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-visible\"}),\": When the alert is visible\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-closeable\"}),\": When the alert can be closed\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-has-title\"}),\": When the alert has a title\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-has-description\"}),\": When the alert has a description\"]}),`\n`]}),`\n`,(0,e.jsx)(s,{y:4}),`\n`,(0,e.jsx)(t.h3,{id:\"slots\",children:\"Slots\"}),`\n`,(0,e.jsx)(t.p,{children:\"Alert has the following slots:\"}),`\n`,(0,e.jsxs)(t.ul,{children:[`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.code,{children:\"base\"}),\": The main alert container element\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.code,{children:\"title\"}),\": The title element\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.code,{children:\"description\"}),\": The description element\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.code,{children:\"mainWrapper\"}),\": The wrapper for the title and description content\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.code,{children:\"closeButton\"}),\": The close button element\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.code,{children:\"iconWrapper\"}),\": The wrapper for the alert icon\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.code,{children:\"alertIcon\"}),\": The alert icon element\"]}),`\n`]}),`\n`,(0,e.jsx)(t.h2,{id:\"accessibility\",children:\"Accessibility\"}),`\n`,(0,e.jsxs)(t.ul,{children:[`\n`,(0,e.jsxs)(t.li,{children:[\"Alert has role of \",(0,e.jsx)(t.code,{children:\"alert\"})]}),`\n`,(0,e.jsx)(t.li,{children:'Close button has aria-label=\"Close\" by default'}),`\n`,(0,e.jsx)(t.li,{children:\"When closed, alert is removed from the DOM\"}),`\n`]}),`\n`,(0,e.jsx)(s,{y:4}),`\n`,(0,e.jsx)(t.h2,{id:\"api\",children:\"API\"}),`\n`,(0,e.jsx)(t.h3,{id:\"alert-props\",children:\"Alert Props\"}),`\n`,(0,e.jsx)(i,{data:[{attribute:\"title\",type:\"ReactNode\",description:\"The alert title\",default:\"-\"},{attribute:\"icon\",type:\"ReactNode\",description:\"The alert icon - overrides the default icon\",default:\"-\"},{attribute:\"description\",type:\"ReactNode\",description:\"The alert description\",default:\"-\"},{attribute:\"color\",type:\"default | primary | secondary | success | warning | danger\",description:\"The alert color theme\",default:\"default\"},{attribute:\"variant\",type:\"solid | bordered | flat | faded\",description:\"The alert variant\",default:\"flat\"},{attribute:\"radius\",type:\"none | sm | md | lg | full\",description:\"The alert border radius\",default:\"md\"},{attribute:\"startContent\",type:\"ReactNode\",description:\"The alert start content\",default:\"-\"},{attribute:\"endContent\",type:\"ReactNode\",description:\"The alert end content\",default:\"-\"},{attribute:\"isVisible\",type:\"boolean\",description:\"Whether the alert is visible\",default:\"-\"},{attribute:\"isClosable\",type:\"boolean\",description:\"Whether the alert can be closed\",default:\"false\"},{attribute:\"hideIcon\",type:\"boolean\",description:\"Whether the icon is hidden\",default:\"false\"},{attribute:\"hideIconWrapper\",type:\"boolean\",description:\"Whether the icon wrapper is hidden\",default:\"false\"},{attribute:\"closeButtonProps\",type:\"ButtonProps\",description:\"Props for the close button\",default:\"-\"}]}),`\n`,(0,e.jsx)(t.h3,{id:\"alert-events\",children:\"Alert Events\"}),`\n`,(0,e.jsx)(i,{data:[{attribute:\"onClose\",type:\"() => void\",description:\"Handler called when the close button is clicked\",default:\"-\"},{attribute:\"onVisibleChange\",type:\"(isVisible: boolean) => void\",description:\"Handler called when the alert visibility changes\",default:\"-\"}]})]})}function _(r={}){let{wrapper:t}=r.components||{};return t?(0,e.jsx)(t,{...r,children:(0,e.jsx)(Y,{...r})}):Y(r)}function a(r,t){throw new Error(\"Expected \"+(t?\"component\":\"object\")+\" `\"+r+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return G(we);})();\n;return Component;"
  },
  "_id": "docs/components/alert.mdx",
  "_raw": {
    "sourceFilePath": "docs/components/alert.mdx",
    "sourceFileName": "alert.mdx",
    "sourceFileDir": "docs/components",
    "contentType": "mdx",
    "flattenedPath": "docs/components/alert"
  },
  "type": "Doc",
  "slug": "/docs/components/alert",
  "slugAsParams": "components/alert",
  "url": "/docs/components/alert"
}