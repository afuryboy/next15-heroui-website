{
  "title": "Forms",
  "description": "Learn how to handle forms in HeroUI.",
  "body": {
    "raw": "\nimport {formContent} from \"@/content/components/form\";\n\n# Forms\n\nHeroUI provides form components with built-in validation and styling to help users input and submit data effectively.\n\n<CarbonAd />\n\n<CodeDemo title=\"Demo\" files={formContent.demo} />\n\n## Labels and help text\n\nAccessible forms start with clear, descriptive labels for each field. All HeroUI form components support labeling using\nthe Label component, which is automatically associated with the field via the id and for attributes on your behalf.\n\nIn addition, HeroUI components support help text, which associates additional context with a field such as a **description**\nor **error message**. The label and help text are announced by assistive technology such as screen readers when the user focuses\nthe field.\n\n```tsx {5,6}\nimport {Input} from \"@heroui/react\";\n\n<Input\n  type=\"password\"\n  label=\"Password\"\n  description=\"Password must be at least 8 characters.\"\n/>;\n```\n\nMost fields should have a visible label. In rare exceptions, the `aria-label` or `aria-labelledby` attribute must be provided instead to identify the element to screen readers.\n\n## Submitting data\n\nHow you submit form data depends on your framework, application, and server. By default, **HTML** forms are submitted via a full-page refresh in the browser.\nYou can call `preventDefault` in the `onSubmit` event to handle form data submission via an API.\n\nFrameworks like [Next.js](https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations#forms), [Remix](https://remix.run/docs/en/main/guides/forms), and [React Router](https://reactrouter.com/en/main/route/form-submission) provide their own ways to handle form submission.\n\n#### Uncontrolled forms\n\nA simple way to get form data is to use the browser's [FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData) API during the `onSubmit` event. You can send this data to a backend API or convert it into a JavaScript object using [Object.fromEntries](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/fromEntries).\nEach field should have a `name` prop to identify it, and the values will be serialized as strings by the browser.\n\n```tsx {12,15}\nimport * as React from \"react\";\nimport {Button, Form, Input} from \"@heroui/react\";\n\nfunction Example() {\n  const [submitted, setSubmitted] = React.useState(null);\n\n  const onSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    // Prevent default browser page refresh.\n    e.preventDefault();\n\n    // Get form data as an object.\n    const data = Object.fromEntries(new FormData(e.currentTarget));\n\n    // Submit data to your backend API.\n    setSubmitted(data);\n  };\n\n  return (\n    <Form onSubmit={onSubmit}>\n      <Input\n        isRequired\n        errorMessage=\"Please enter a valid email\"\n        label=\"Email\"\n        labelPlacement=\"outside\"\n        name=\"email\"\n        placeholder=\"Enter your email\"\n        type=\"email\"\n      />\n      <Button type=\"submit\">Submit</Button>\n      {submitted && (\n        <div className=\"text-small text-default-500\">\n          You submitted: <code>{JSON.stringify(submitted)}</code>\n        </div>\n      )}\n    </Form>\n  );\n}\n```\n\n<Spacer y={4} />\n\n<CodeDemo title=\"Usage\" showEditor={false} files={formContent.usage} />\n\n#### Controlled forms\n\nHeroUI form components are uncontrolled by default, but if you need to manage state in real-time, you can use the `useState` hook to make the component controlled.\n\n```tsx {5,26-27}\nimport * as React from \"react\";\nimport {Button, Form, Input} from \"@heroui/react\";\n\nfunction Example() {\n  const [email, setEmail] = React.useState(\"\");\n  const [submitted, setSubmitted] = React.useState(null);\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n\n    const data = Object.fromEntries(new FormData(e.currentTarget));\n\n    setSubmitted(data);\n  };\n\n  return (\n    <Form className=\"w-full max-w-xs\" onSubmit={onSubmit}>\n      <Input\n        isRequired\n        errorMessage=\"Please enter a valid email\"\n        label=\"Email\"\n        labelPlacement=\"outside\"\n        name=\"email\"\n        placeholder=\"Enter your email\"\n        type=\"email\"\n        value={email}\n        onValueChange={setEmail}\n      />\n      <Button type=\"submit\" variant=\"bordered\">\n        Submit\n      </Button>\n      {submitted && (\n        <div className=\"text-small text-default-500\">\n          You submitted: <code>{JSON.stringify(submitted)}</code>\n        </div>\n      )}\n    </Form>\n  );\n}\n```\n\n<Spacer y={4} />\n\n<CodeDemo title=\"Controlled\" showEditor={false} files={formContent.controlled} />\n\n\n#### Customizing error messages\n\nBy default, error messages are provided by the browser.\nYou can customize these messages by providing a function to the `errorMessage` prop.\n\n```tsx {12-16}\nimport {Form, Input, Button} from \"@heroui/react\";\n\nexport default function App() {\n  const onSubmit = (e) => {\n    e.preventDefault();\n  };\n\n  return (\n    <Form onSubmit={onSubmit}>\n      <Input\n        isRequired\n        errorMessage={({validationDetails}) => {\n          if (validationDetails.valueMissing) {\n            return \"Please enter a valid name\";\n          }\n        }}\n        label=\"Name\"\n        labelPlacement=\"outside\"\n        name=\"name\"\n        placeholder=\"Enter your name\"\n        type=\"text\"\n      />\n      <Button type=\"submit\" variant=\"bordered\">\n        Submit\n      </Button>\n    </Form>\n  );\n}\n```\n\n<Spacer y={4} />\n\n<CodeDemo\n  title=\"Custom error messages\"\n  showEditor={false}\n  files={formContent.customErrorMessages}\n/>\n\n> **Note**: The default error messages are localized by the browser based on the browser/operating system language settings. The [locale setting in HeroUI Provider](/docs/api-references/heroui-provider#props) does not affect validation errors.\n\n\n## Validation\n\nForm validation is crucial for ensuring that users enter the correct data.\nHeroUI supports native HTML constraint validation and allows for custom validation and real-time validation.\n\n#### Built-in validation\n\nHeroUI form components support [native HTML validation](https://developer.mozilla.org/docs/Web/HTML/Constraint_validation) attributes like `isRequired` and `minLength`.\nThese constraints are checked by the browser when the user commits changes (e.g., on blur) or submits the form.\nYou can display validation errors with custom styles instead of the browser's default UI.\n\n```tsx {10}\nimport {Form, Input, Button} from \"@heroui/react\";\n\nexport default function App() {\n  const onSubmit = (e) => {\n    e.preventDefault();\n  };\n\n  return (\n    <Form onSubmit={onSubmit}>\n      <Input\n        isRequired\n        label=\"Email\"\n        labelPlacement=\"outside\"\n        name=\"email\"\n        placeholder=\"Enter your email\"\n        type=\"email\"\n      />\n      <Button type=\"submit\" variant=\"bordered\">\n        Submit\n      </Button>\n    </Form>\n  );\n}\n```\n\nTo enable ARIA validation, set `validationBehavior=\"aria\"`.\nWhen`validationBehavior=\"aria\"` is set, fields are only marked as required or invalid for assistive technologies, without preventing form submission.\nYou can change the form defaults for your entire app using [HeroUI Provider](/docs/api-references/heroui-provider).\n\nSupported constraints include:\n\n- `isRequired` indicates that a field must have a value before the form can be submitted.\n- `minValue` and `maxValue` specify the minimum and maximum value in a date picker or number input.\n- `minLength` and `maxLength` specify the minimum and length of text input.\n- `pattern` provides a custom regular expression that a text input must conform to.\n- `type=\"email\"` and `type=\"url\"` provide built-in validation for email addresses and URLs.\n\nSee each component's documentation for more details on the supported validation props.\n\n<Spacer y={4} />\n\n<CodeDemo title=\"Native validation\" showEditor={false} files={formContent.nativeValidation} />\n\n#### Custom validation\n\nIn addition to built-in constraints, you can provide a function to the `validate` prop to support custom validation.\n\n```tsx {17-23}\nimport {Form, Input, Button} from \"@heroui/react\";\n\nexport default function App() {\n  const onSubmit = (e) => {\n    e.preventDefault();\n  };\n\n  return (\n    <Form onSubmit={onSubmit}>\n      <Input\n        isRequired\n        label=\"Username\"\n        labelPlacement=\"outside\"\n        name=\"username\"\n        placeholder=\"Enter your username\"\n        type=\"text\"\n        validate={(value) => {\n          if (value.length < 3) {\n            return \"Username must be at least 3 characters long\";\n          }\n\n          return value === \"admin\" ? \"Nice try!\" : null;\n        }}\n      />\n      <Button type=\"submit\" variant=\"bordered\">\n        Submit\n      </Button>\n    </Form>\n  );\n}\n```\n\n<Spacer y={4} />\n\n<CodeDemo title=\"Custom validation\" showEditor={false} files={formContent.customValidation} />\n\n#### Realtime validation\n\nIf you want to display validation errors while the user is typing, you can control the field value and use the `isInvalid` prop along with the `errorMessage` prop.\n\n```tsx {19-26,30,32}\nimport {Input} from \"@heroui/react\";\n\nexport function Example() {\n  const [password, setPassword] = React.useState(\"\");\n  const errors = [];\n\n  if (password.length < 4) {\n    errors.push(\"Password must be 4 characters or more.\");\n  }\n  if ((password.match(/[A-Z]/g) || []).length < 1) {\n    errors.push(\"Password must include at least 1 upper case letter\");\n  }\n  if ((password.match(/[^a-z]/gi) || []).length < 1) {\n    errors.push(\"Password must include at least 1 symbol.\");\n  }\n\n  return (\n    <Input\n      errorMessage={() => (\n        <ul>\n          {errors.map((error, i) => (\n            <li key={i}>{error}</li>\n          ))}\n        </ul>\n      )}\n      isInvalid={errors.length > 0}\n      label=\"Password\"\n      labelPlacement=\"outside\"\n      placeholder=\"Enter your password\"\n      value={password}\n      variant=\"bordered\"\n      onValueChange={setPassword}\n    />\n  );\n}\n```\n\n<Spacer y={4} />\n\n<CodeDemo title=\"Realtime validation\" showEditor={false} files={formContent.realTimeValidation} />\n\nUse `validationBehavior=\"aria\"` to allow form submission even when fields are invalid, while maintaining accessibility.\n\n#### Server validation\n\nClient-side validation provides immediate feedback, but you should also validate data on the server to ensure accuracy and security.\nHeroUI allows you to display server-side validation errors by using the `validationErrors` prop in the `Form` component.\nThis prop should be an object where each key is the field `name` and the value is the error message.\n\n```tsx {4,17,25-26}\nimport {Button, Form, Input} from \"@heroui/react\";\n\nfunction Example() {\n  const [errors, setErrors] = React.useState({});\n\n  const onSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    const data = Object.fromEntries(new FormData(e.currentTarget));\n\n    if (!data.username) {\n      setErrors({username: \"Username is required\"});\n\n      return;\n    }\n\n    const result = await callServer(data);\n\n    setErrors(result.errors);\n  };\n\n  return (\n    <Form\n      className=\"w-full max-w-xs flex flex-col gap-3\"\n      validationErrors={errors}\n      onSubmit={onSubmit}\n    >\n      <Input\n        label=\"Username\"\n        labelPlacement=\"outside\"\n        name=\"username\"\n        placeholder=\"Enter your username\"\n      />\n      <Button type=\"submit\" variant=\"flat\">\n        Submit\n      </Button>\n    </Form>\n  );\n}\n\n// Fake server used in this example.\nfunction callServer(data) {\n  return {\n    errors: {\n      username: \"Sorry, this username is taken.\",\n    },\n  };\n}\n```\n\n<Spacer y={4} />\n\n<CodeDemo title=\"Server validation\" showEditor={false} files={formContent.serverValidation} />\n\n#### Schema validation\n\nHeroUI supports errors from schema validation libraries like [Zod](https://zod.dev/).\nYou can use Zod's `flatten` method to get error messages for each field and return them as part of the server response.\n\n```tsx {14}\n// In your server.\nimport {z} from \"zod\";\n\nconst schema = z.object({\n  name: z.string().min(1),\n  age: z.coerce.number().positive(),\n});\n\nfunction handleRequest(formData: FormData) {\n  const result = schema.safeParse(Object.fromEntries(formData));\n\n  if (!result.success) {\n    return {\n      errors: result.error.flatten().fieldErrors,\n    };\n  }\n\n  // Do something with the validated data.\n\n  return {\n    errors: {},\n  };\n}\n```\n\n### React Server Actions\n\n[Server Actions](https://react.dev/reference/rsc/server-actions) that allows seamless form submission to the server and retrieval of results.\nThe [useActionState](https://react.dev/reference/react/useActionState) hook can be used to get the result of server actions (such as errors) after submitting a form.\n\n```tsx {9-11,14}\n// app/add-form.tsx\n\"use client\";\n\nimport {useActionState} from \"react\";\nimport {Button, Input, Label} from \"@heroui/react\";\nimport {createTodo} from \"@/app/actions\";\n\nexport function AddForm() {\n  const [{errors}, formAction] = useActionState(createTodo, {\n    errors: {},\n  });\n\n  return (\n    <Form action={formAction} validationErrors={errors}>\n      <Input name=\"todo\" label=\"Task\" />\n      <Button type=\"submit\">Add</Button>\n    </Form>\n  );\n}\n```\n\n<Spacer y={4} />\n\n```ts {10}\n// app/actions.ts\n\"use server\";\n\nexport async function createTodo(prevState: any, formData: FormData) {\n  try {\n    // Create the todo.\n  } catch (err) {\n    return {\n      errors: {\n        todo: \"Invalid todo.\",\n      },\n    };\n  }\n}\n```\n\n### Remix\n\n[Remix actions](https://remix.run/docs/en/main/route/action) handle form submissions on the server.\nYou can use the [useSubmit](https://remix.run/docs/en/main/hooks/use-submit) hook to submit form data to the server and the [useActionData](https://remix.run/docs/en/main/hooks/use-action-data) hook to retrieve validation errors from the server.\n\n```tsx {13,18,34}\n// app/routes/signup.tsx\nimport type {ActionFunctionArgs} from \"@remix-run/node\";\nimport {useActionData, useSubmit} from \"@remix-run/react\";\nimport {Button, Form, Input} from \"@heroui/react\";\n\nexport default function SignupForm() {\n  let submit = useSubmit();\n  let onSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    submit(e.currentTarget);\n  };\n\n  const actionData = useActionData<typeof action>();\n\n  return (\n    <Form\n      method=\"post\"\n      validationErrors={actionData?.errors}\n      onSubmit={onSubmit}\n    >\n      <Input label=\"Username\" name=\"username\" />\n      <Input label=\"Password\" name=\"password\" type=\"password\" />\n      <Button type=\"submit\">Submit</Button>\n    </Form>\n  );\n}\n\nexport async function action({request}: ActionFunctionArgs) {\n  try {\n    // Validate data and perform action...\n  } catch (err) {\n    return {\n      errors: {\n        username: \"Sorry, this username is taken.\",\n      },\n    };\n  }\n}\n```\n\n<Spacer y={4} />\n\n## Form libraries\n\nIn most cases, the built-in validation features of HeroUI are sufficient. However, if you're building more complex forms or integrating HeroUI components into an existing form, you can use a form library like [React Hook Form](https://react-hook-form.com/) or [Formik](https://formik.org/).\n\n#### React Hook Form\n\nYou can integrate HeroUI components using [Controller](https://react-hook-form.com/docs/usecontroller/controller).\nController allows you to manage field values and validation errors, and reflect the validation result in HeroUI components.\n\n```tsx\nimport {Controller, useForm} from \"react-hook-form\";\nimport {Button, Input, Label} from \"@heroui/react\";\n\nfunction App() {\n  const {handleSubmit, control} = useForm({\n    defaultValues: {\n      name: \"\",\n    },\n  });\n\n  const onSubmit = (data) => {\n    // Call your API here.\n  };\n\n  return (\n    <Form onSubmit={handleSubmit(onSubmit)}>\n      <Controller\n        control={control}\n        name=\"name\"\n        render={({field: {name, value, onChange, onBlur, ref}, fieldState: {invalid, error}}) => (\n          <Input\n            ref={ref}\n            isRequired\n            errorMessage={error?.message}\n            // Let React Hook Form handle validation instead of the browser.\n            validationBehavior=\"aria\"\n            isInvalid={invalid}\n            label=\"Name\"\n            name={name}\n            value={value}\n            onBlur={onBlur}\n            onChange={onChange}\n          />\n        )}\n        rules={{required: \"Name is required.\"}}\n      />\n      <Button type=\"submit\">Submit</Button>\n    </Form>\n  );\n}\n```\n\n> For more information about forms in HeroUI, visit the [React Aria Forms Guide](https://react-spectrum.adobe.com/react-aria/forms.html).\n",
    "code": "var Component=(()=>{var U=Object.create;var s=Object.defineProperty;var j=Object.getOwnPropertyDescriptor;var M=Object.getOwnPropertyNames;var q=Object.getPrototypeOf,T=Object.prototype.hasOwnProperty;var H=(n,t)=>()=>(t||n((t={exports:{}}).exports,t),t.exports),V=(n,t)=>{for(var o in t)s(n,o,{get:t[o],enumerable:!0})},u=(n,t,o,a)=>{if(t&&typeof t==\"object\"||typeof t==\"function\")for(let r of M(t))!T.call(n,r)&&r!==o&&s(n,r,{get:()=>t[r],enumerable:!(a=j(t,r))||a.enumerable});return n};var O=(n,t,o)=>(o=n!=null?U(q(n)):{},u(t||!n||!n.__esModule?s(o,\"default\",{value:n,enumerable:!0}):o,n)),L=n=>u(s({},\"__esModule\",{value:!0}),n);var d=H((ce,m)=>{m.exports=_jsx_runtime});var me={};V(me,{default:()=>C,frontmatter:()=>ue});var e=O(d());var c=`import {Form, Input, Select, SelectItem, Checkbox, Button} from \"@heroui/react\";\n\nexport default function App() {\n  const [password, setPassword] = React.useState(\"\");\n  const [submitted, setSubmitted] = React.useState(null);\n  const [errors, setErrors] = React.useState({});\n\n  // Real-time password validation\n  const getPasswordError = (value) => {\n    if (value.length < 4) {\n      return \"Password must be 4 characters or more\";\n    }\n    if ((value.match(/[A-Z]/g) || []).length < 1) {\n      return \"Password needs at least 1 uppercase letter\";\n    }\n    if ((value.match(/[^a-z]/gi) || []).length < 1) {\n      return \"Password needs at least 1 symbol\";\n    }\n\n    return null;\n  };\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    const data = Object.fromEntries(new FormData(e.currentTarget));\n\n    // Custom validation checks\n    const newErrors = {};\n\n    // Password validation\n    const passwordError = getPasswordError(data.password);\n\n    if (passwordError) {\n      newErrors.password = passwordError;\n    }\n\n    // Username validation\n    if (data.name === \"admin\") {\n      newErrors.name = \"Nice try! Choose a different username\";\n    }\n\n    if (Object.keys(newErrors).length > 0) {\n      setErrors(newErrors);\n\n      return;\n    }\n\n    if (data.terms !== \"true\") {\n      setErrors({terms: \"Please accept the terms\"});\n\n      return;\n    }\n\n    // Clear errors and submit\n    setErrors({});\n    setSubmitted(data);\n  };\n\n  return (\n    <Form\n      className=\"w-full justify-center items-center space-y-4\"\n      validationErrors={errors}\n      onReset={() => setSubmitted(null)}\n      onSubmit={onSubmit}\n    >\n      <div className=\"flex flex-col gap-4 max-w-md\">\n        <Input\n          isRequired\n          errorMessage={({validationDetails}) => {\n            if (validationDetails.valueMissing) {\n              return \"Please enter your name\";\n            }\n\n            return errors.name;\n          }}\n          label=\"Name\"\n          labelPlacement=\"outside\"\n          name=\"name\"\n          placeholder=\"Enter your name\"\n        />\n\n        <Input\n          isRequired\n          errorMessage={({validationDetails}) => {\n            if (validationDetails.valueMissing) {\n              return \"Please enter your email\";\n            }\n            if (validationDetails.typeMismatch) {\n              return \"Please enter a valid email address\";\n            }\n          }}\n          label=\"Email\"\n          labelPlacement=\"outside\"\n          name=\"email\"\n          placeholder=\"Enter your email\"\n          type=\"email\"\n        />\n\n        <Input\n          isRequired\n          errorMessage={getPasswordError(password)}\n          isInvalid={getPasswordError(password) !== null}\n          label=\"Password\"\n          labelPlacement=\"outside\"\n          name=\"password\"\n          placeholder=\"Enter your password\"\n          type=\"password\"\n          value={password}\n          onValueChange={setPassword}\n        />\n\n        <Select\n          isRequired\n          label=\"Country\"\n          labelPlacement=\"outside\"\n          name=\"country\"\n          placeholder=\"Select country\"\n        >\n          <SelectItem key=\"ar\">Argentina</SelectItem>\n          <SelectItem key=\"us\">United States</SelectItem>\n          <SelectItem key=\"ca\">Canada</SelectItem>\n          <SelectItem key=\"uk\">United Kingdom</SelectItem>\n          <SelectItem key=\"au\">Australia</SelectItem>\n        </Select>\n\n        <Checkbox\n          isRequired\n          classNames={{\n            label: \"text-small\",\n          }}\n          isInvalid={!!errors.terms}\n          name=\"terms\"\n          validationBehavior=\"aria\"\n          value=\"true\"\n          onValueChange={() => setErrors((prev) => ({...prev, terms: undefined}))}\n        >\n          I agree to the terms and conditions\n        </Checkbox>\n\n        {errors.terms && <span className=\"text-danger text-small\">{errors.terms}</span>}\n\n        <div className=\"flex gap-4\">\n          <Button className=\"w-full\" color=\"primary\" type=\"submit\">\n            Submit\n          </Button>\n          <Button type=\"reset\" variant=\"bordered\">\n            Reset\n          </Button>\n        </div>\n      </div>\n\n      {submitted && (\n        <div className=\"text-small text-default-500 mt-4\">\n          Submitted data: <pre>{JSON.stringify(submitted, null, 2)}</pre>\n        </div>\n      )}\n    </Form>\n  );\n}\n`;var Y={\"/App.jsx\":c},p={...Y};var h=`import {Form, Input, Button} from \"@heroui/react\";\n\nexport default function App() {\n  const [submitted, setSubmitted] = React.useState(null);\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n\n    const data = Object.fromEntries(new FormData(e.currentTarget));\n\n    setSubmitted(data);\n  };\n\n  return (\n    <Form className=\"w-full max-w-xs\" onSubmit={onSubmit}>\n      <Input\n        isRequired\n        errorMessage=\"Please enter a valid email\"\n        label=\"Email\"\n        labelPlacement=\"outside\"\n        name=\"email\"\n        placeholder=\"Enter your email\"\n        type=\"email\"\n      />\n      <Button type=\"submit\" variant=\"bordered\">\n        Submit\n      </Button>\n      {submitted && (\n        <div className=\"text-small text-default-500\">\n          You submitted: <code>{JSON.stringify(submitted)}</code>\n        </div>\n      )}\n    </Form>\n  );\n}\n`;var J={\"/App.jsx\":h},f={...J};var b=`import {Form, Input, Button} from \"@heroui/react\";\n\nexport default function App() {\n  const [email, setEmail] = React.useState(\"\");\n  const [submitted, setSubmitted] = React.useState(null);\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n\n    const data = Object.fromEntries(new FormData(e.currentTarget));\n\n    setSubmitted(data);\n  };\n\n  return (\n    <Form className=\"w-full max-w-xs\" onSubmit={onSubmit}>\n      <Input\n        isRequired\n        errorMessage=\"Please enter a valid email\"\n        label=\"Email\"\n        labelPlacement=\"outside\"\n        name=\"email\"\n        placeholder=\"Enter your email\"\n        type=\"email\"\n        value={email}\n        onValueChange={setEmail}\n      />\n      <Button type=\"submit\" variant=\"bordered\">\n        Submit\n      </Button>\n      {submitted && (\n        <div className=\"text-small text-default-500\">\n          You submitted: <code>{JSON.stringify(submitted)}</code>\n        </div>\n      )}\n    </Form>\n  );\n}\n`;var W={\"/App.jsx\":b},v={...W};var g=`import {Form, Input, Button} from \"@heroui/react\";\n\nexport default function App() {\n  const onSubmit = (e) => {\n    e.preventDefault();\n  };\n\n  return (\n    <Form className=\"w-full max-w-xs\" onSubmit={onSubmit}>\n      <Input\n        isRequired\n        errorMessage=\"Please enter a valid email\"\n        label=\"Email\"\n        labelPlacement=\"outside\"\n        name=\"email\"\n        placeholder=\"Enter your email\"\n        type=\"email\"\n      />\n      <Button type=\"submit\" variant=\"bordered\">\n        Submit\n      </Button>\n    </Form>\n  );\n}\n`;var X={\"/App.jsx\":g},y={...X};var x=`import {Form, Input, Button} from \"@heroui/react\";\n\nexport default function App() {\n  const onSubmit = (e) => {\n    e.preventDefault();\n  };\n\n  return (\n    <Form className=\"w-full max-w-xs\" onSubmit={onSubmit}>\n      <Input\n        isRequired\n        errorMessage={({validationDetails}) => {\n          if (validationDetails.valueMissing) {\n            return \"Please enter a valid name\";\n          }\n        }}\n        label=\"Name\"\n        labelPlacement=\"outside\"\n        name=\"name\"\n        placeholder=\"Enter your name\"\n        type=\"text\"\n      />\n      <Button type=\"submit\" variant=\"bordered\">\n        Submit\n      </Button>\n    </Form>\n  );\n}\n`;var $={\"/App.jsx\":x},S={...$};var w=`import {Form, Input, Button} from \"@heroui/react\";\n\nexport default function App() {\n  const onSubmit = (e) => {\n    e.preventDefault();\n  };\n\n  return (\n    <Form className=\"w-full max-w-xs\" onSubmit={onSubmit}>\n      <Input\n        isRequired\n        label=\"Username\"\n        labelPlacement=\"outside\"\n        name=\"username\"\n        placeholder=\"Enter your username\"\n        type=\"text\"\n        validate={(value) => {\n          if (value.length < 3) {\n            return \"Username must be at least 3 characters long\";\n          }\n\n          return value === \"admin\" ? \"Nice try!\" : null;\n        }}\n      />\n      <Button type=\"submit\" variant=\"bordered\">\n        Submit\n      </Button>\n    </Form>\n  );\n}\n`;var ee={\"/App.jsx\":w},E={...ee};var I=`import {Form, Input, Button} from \"@heroui-org/react\";\n\nexport default function App() {\n  const onSubmit = (e) => {\n    e.preventDefault();\n  };\n\n  return (\n    <Form className=\"w-full max-w-xs\" validationBehavior=\"aria\" onSubmit={onSubmit}>\n      <Input\n        isRequired\n        label=\"Username\"\n        labelPlacement=\"outside\"\n        name=\"username\"\n        placeholder=\"Enter your username\"\n        type=\"text\"\n        validate={(value) => {\n          if (value.length < 3) {\n            return \"Username must be at least 3 characters long\";\n          }\n\n          return value === \"admin\" ? \"Nice try!\" : null;\n        }}\n      />\n      <Button type=\"submit\" variant=\"bordered\">\n        Submit\n      </Button>\n    </Form>\n  );\n}\n`;var ne={\"/App.jsx\":I},F={...ne};var A=`import {Input} from \"@heroui/react\";\n\nexport default function App() {\n  const [password, setPassword] = React.useState(\"\");\n  const errors = [];\n\n  if (password.length < 4) {\n    errors.push(\"Password must be 4 characters or more.\");\n  }\n  if ((password.match(/[A-Z]/g) || []).length < 1) {\n    errors.push(\"Password must include at least 1 upper case letter\");\n  }\n  if ((password.match(/[^a-z]/gi) || []).length < 1) {\n    errors.push(\"Password must include at least 1 symbol.\");\n  }\n\n  return (\n    <Input\n      className=\"max-w-xs\"\n      errorMessage={() => (\n        <ul>\n          {errors.map((error, i) => (\n            <li key={i}>{error}</li>\n          ))}\n        </ul>\n      )}\n      isInvalid={errors.length > 0}\n      label=\"Password\"\n      labelPlacement=\"outside\"\n      placeholder=\"Enter your password\"\n      value={password}\n      variant=\"bordered\"\n      onValueChange={setPassword}\n    />\n  );\n}\n`;var ae={\"/App.jsx\":A},B={...ae};var P=`import {Form, Input, Button} from \"@heroui/react\";\n\nexport default function App() {\n  const [errors, setErrors] = React.useState({});\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n\n    const data = Object.fromEntries(new FormData(e.currentTarget));\n\n    if (!data.username) {\n      setErrors({username: \"Username is required\"});\n\n      return;\n    }\n\n    const result = callServer(data);\n\n    setErrors(result.errors);\n  };\n\n  return (\n    <Form\n      className=\"w-full max-w-xs flex flex-col gap-3\"\n      validationErrors={errors}\n      onSubmit={onSubmit}\n    >\n      <Input\n        label=\"Username\"\n        labelPlacement=\"outside\"\n        name=\"username\"\n        placeholder=\"Enter your username\"\n      />\n      <Button type=\"submit\" variant=\"flat\">\n        Submit\n      </Button>\n    </Form>\n  );\n}\n\n// Fake server used in this example.\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nfunction callServer(data) {\n  return {\n    errors: {\n      username: \"Sorry, this username is taken.\",\n    },\n  };\n}\n`;var ie={\"/App.jsx\":P},R={...ie};var N=`import {Form, Input, Button} from \"@heroui/react\";\n\nexport default function App() {\n  const [action, setAction] = React.useState(null);\n\n  return (\n    <Form\n      className=\"w-full max-w-xs flex flex-col gap-4\"\n      onReset={() => setAction(\"reset\")}\n      onSubmit={(e) => {\n        e.preventDefault();\n        let data = Object.fromEntries(new FormData(e.currentTarget));\n\n        setAction(\\`submit \\${JSON.stringify(data)}\\`);\n      }}\n    >\n      <Input\n        isRequired\n        errorMessage=\"Please enter a valid username\"\n        label=\"Username\"\n        labelPlacement=\"outside\"\n        name=\"username\"\n        placeholder=\"Enter your username\"\n        type=\"text\"\n      />\n\n      <Input\n        isRequired\n        errorMessage=\"Please enter a valid email\"\n        label=\"Email\"\n        labelPlacement=\"outside\"\n        name=\"email\"\n        placeholder=\"Enter your email\"\n        type=\"email\"\n      />\n      <div className=\"flex gap-2\">\n        <Button color=\"primary\" type=\"submit\">\n          Submit\n        </Button>\n        <Button type=\"reset\" variant=\"flat\">\n          Reset\n        </Button>\n      </div>\n      {action && (\n        <div className=\"text-small text-default-500\">\n          Action: <code>{action}</code>\n        </div>\n      )}\n    </Form>\n  );\n}\n`;var le={\"/App.jsx\":N},k={...le};var i={demo:p,usage:f,controlled:v,nativeValidation:y,customErrorMessages:S,customValidation:E,customValidationAria:F,realTimeValidation:B,serverValidation:R,events:k};var ue={title:\"Forms\",description:\"Learn how to handle forms in HeroUI.\"};function D(n){let t={a:\"a\",blockquote:\"blockquote\",code:\"code\",h1:\"h1\",h2:\"h2\",h3:\"h3\",h4:\"h4\",li:\"li\",p:\"p\",pre:\"pre\",strong:\"strong\",ul:\"ul\",...n.components},{CarbonAd:o,CodeDemo:a,Spacer:r}=t;return o||l(\"CarbonAd\",!0),a||l(\"CodeDemo\",!0),r||l(\"Spacer\",!0),(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(t.h1,{id:\"forms\",children:\"Forms\"}),`\n`,(0,e.jsx)(t.p,{children:\"HeroUI provides form components with built-in validation and styling to help users input and submit data effectively.\"}),`\n`,(0,e.jsx)(o,{}),`\n`,(0,e.jsx)(a,{title:\"Demo\",files:i.demo}),`\n`,(0,e.jsx)(t.h2,{id:\"labels-and-help-text\",children:\"Labels and help text\"}),`\n`,(0,e.jsx)(t.p,{children:`Accessible forms start with clear, descriptive labels for each field. All HeroUI form components support labeling using\nthe Label component, which is automatically associated with the field via the id and for attributes on your behalf.`}),`\n`,(0,e.jsxs)(t.p,{children:[\"In addition, HeroUI components support help text, which associates additional context with a field such as a \",(0,e.jsx)(t.strong,{children:\"description\"}),`\nor `,(0,e.jsx)(t.strong,{children:\"error message\"}),`. The label and help text are announced by assistive technology such as screen readers when the user focuses\nthe field.`]}),`\n`,(0,e.jsx)(t.pre,{children:(0,e.jsx)(t.code,{className:\"language-tsx\",meta:\"{5,6}\",children:`import {Input} from \"@heroui/react\";\n\n<Input\n  type=\"password\"\n  label=\"Password\"\n  description=\"Password must be at least 8 characters.\"\n/>;\n`})}),`\n`,(0,e.jsxs)(t.p,{children:[\"Most fields should have a visible label. In rare exceptions, the \",(0,e.jsx)(t.code,{children:\"aria-label\"}),\" or \",(0,e.jsx)(t.code,{children:\"aria-labelledby\"}),\" attribute must be provided instead to identify the element to screen readers.\"]}),`\n`,(0,e.jsx)(t.h2,{id:\"submitting-data\",children:\"Submitting data\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"How you submit form data depends on your framework, application, and server. By default, \",(0,e.jsx)(t.strong,{children:\"HTML\"}),` forms are submitted via a full-page refresh in the browser.\nYou can call `,(0,e.jsx)(t.code,{children:\"preventDefault\"}),\" in the \",(0,e.jsx)(t.code,{children:\"onSubmit\"}),\" event to handle form data submission via an API.\"]}),`\n`,(0,e.jsxs)(t.p,{children:[\"Frameworks like \",(0,e.jsx)(t.a,{href:\"https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations#forms\",children:\"Next.js\"}),\", \",(0,e.jsx)(t.a,{href:\"https://remix.run/docs/en/main/guides/forms\",children:\"Remix\"}),\", and \",(0,e.jsx)(t.a,{href:\"https://reactrouter.com/en/main/route/form-submission\",children:\"React Router\"}),\" provide their own ways to handle form submission.\"]}),`\n`,(0,e.jsx)(t.h4,{id:\"uncontrolled-forms\",children:\"Uncontrolled forms\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"A simple way to get form data is to use the browser's \",(0,e.jsx)(t.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/API/FormData\",children:\"FormData\"}),\" API during the \",(0,e.jsx)(t.code,{children:\"onSubmit\"}),\" event. You can send this data to a backend API or convert it into a JavaScript object using \",(0,e.jsx)(t.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/fromEntries\",children:\"Object.fromEntries\"}),`.\nEach field should have a `,(0,e.jsx)(t.code,{children:\"name\"}),\" prop to identify it, and the values will be serialized as strings by the browser.\"]}),`\n`,(0,e.jsx)(t.pre,{children:(0,e.jsx)(t.code,{className:\"language-tsx\",meta:\"{12,15}\",children:`import * as React from \"react\";\nimport {Button, Form, Input} from \"@heroui/react\";\n\nfunction Example() {\n  const [submitted, setSubmitted] = React.useState(null);\n\n  const onSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    // Prevent default browser page refresh.\n    e.preventDefault();\n\n    // Get form data as an object.\n    const data = Object.fromEntries(new FormData(e.currentTarget));\n\n    // Submit data to your backend API.\n    setSubmitted(data);\n  };\n\n  return (\n    <Form onSubmit={onSubmit}>\n      <Input\n        isRequired\n        errorMessage=\"Please enter a valid email\"\n        label=\"Email\"\n        labelPlacement=\"outside\"\n        name=\"email\"\n        placeholder=\"Enter your email\"\n        type=\"email\"\n      />\n      <Button type=\"submit\">Submit</Button>\n      {submitted && (\n        <div className=\"text-small text-default-500\">\n          You submitted: <code>{JSON.stringify(submitted)}</code>\n        </div>\n      )}\n    </Form>\n  );\n}\n`})}),`\n`,(0,e.jsx)(r,{y:4}),`\n`,(0,e.jsx)(a,{title:\"Usage\",showEditor:!1,files:i.usage}),`\n`,(0,e.jsx)(t.h4,{id:\"controlled-forms\",children:\"Controlled forms\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"HeroUI form components are uncontrolled by default, but if you need to manage state in real-time, you can use the \",(0,e.jsx)(t.code,{children:\"useState\"}),\" hook to make the component controlled.\"]}),`\n`,(0,e.jsx)(t.pre,{children:(0,e.jsx)(t.code,{className:\"language-tsx\",meta:\"{5,26-27}\",children:`import * as React from \"react\";\nimport {Button, Form, Input} from \"@heroui/react\";\n\nfunction Example() {\n  const [email, setEmail] = React.useState(\"\");\n  const [submitted, setSubmitted] = React.useState(null);\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n\n    const data = Object.fromEntries(new FormData(e.currentTarget));\n\n    setSubmitted(data);\n  };\n\n  return (\n    <Form className=\"w-full max-w-xs\" onSubmit={onSubmit}>\n      <Input\n        isRequired\n        errorMessage=\"Please enter a valid email\"\n        label=\"Email\"\n        labelPlacement=\"outside\"\n        name=\"email\"\n        placeholder=\"Enter your email\"\n        type=\"email\"\n        value={email}\n        onValueChange={setEmail}\n      />\n      <Button type=\"submit\" variant=\"bordered\">\n        Submit\n      </Button>\n      {submitted && (\n        <div className=\"text-small text-default-500\">\n          You submitted: <code>{JSON.stringify(submitted)}</code>\n        </div>\n      )}\n    </Form>\n  );\n}\n`})}),`\n`,(0,e.jsx)(r,{y:4}),`\n`,(0,e.jsx)(a,{title:\"Controlled\",showEditor:!1,files:i.controlled}),`\n`,(0,e.jsx)(t.h4,{id:\"customizing-error-messages\",children:\"Customizing error messages\"}),`\n`,(0,e.jsxs)(t.p,{children:[`By default, error messages are provided by the browser.\nYou can customize these messages by providing a function to the `,(0,e.jsx)(t.code,{children:\"errorMessage\"}),\" prop.\"]}),`\n`,(0,e.jsx)(t.pre,{children:(0,e.jsx)(t.code,{className:\"language-tsx\",meta:\"{12-16}\",children:`import {Form, Input, Button} from \"@heroui/react\";\n\nexport default function App() {\n  const onSubmit = (e) => {\n    e.preventDefault();\n  };\n\n  return (\n    <Form onSubmit={onSubmit}>\n      <Input\n        isRequired\n        errorMessage={({validationDetails}) => {\n          if (validationDetails.valueMissing) {\n            return \"Please enter a valid name\";\n          }\n        }}\n        label=\"Name\"\n        labelPlacement=\"outside\"\n        name=\"name\"\n        placeholder=\"Enter your name\"\n        type=\"text\"\n      />\n      <Button type=\"submit\" variant=\"bordered\">\n        Submit\n      </Button>\n    </Form>\n  );\n}\n`})}),`\n`,(0,e.jsx)(r,{y:4}),`\n`,(0,e.jsx)(a,{title:\"Custom error messages\",showEditor:!1,files:i.customErrorMessages}),`\n`,(0,e.jsxs)(t.blockquote,{children:[`\n`,(0,e.jsxs)(t.p,{children:[(0,e.jsx)(t.strong,{children:\"Note\"}),\": The default error messages are localized by the browser based on the browser/operating system language settings. The \",(0,e.jsx)(t.a,{href:\"/docs/api-references/heroui-provider#props\",children:\"locale setting in HeroUI Provider\"}),\" does not affect validation errors.\"]}),`\n`]}),`\n`,(0,e.jsx)(t.h2,{id:\"validation\",children:\"Validation\"}),`\n`,(0,e.jsx)(t.p,{children:`Form validation is crucial for ensuring that users enter the correct data.\nHeroUI supports native HTML constraint validation and allows for custom validation and real-time validation.`}),`\n`,(0,e.jsx)(t.h4,{id:\"built-in-validation\",children:\"Built-in validation\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"HeroUI form components support \",(0,e.jsx)(t.a,{href:\"https://developer.mozilla.org/docs/Web/HTML/Constraint_validation\",children:\"native HTML validation\"}),\" attributes like \",(0,e.jsx)(t.code,{children:\"isRequired\"}),\" and \",(0,e.jsx)(t.code,{children:\"minLength\"}),`.\nThese constraints are checked by the browser when the user commits changes (e.g., on blur) or submits the form.\nYou can display validation errors with custom styles instead of the browser's default UI.`]}),`\n`,(0,e.jsx)(t.pre,{children:(0,e.jsx)(t.code,{className:\"language-tsx\",meta:\"{10}\",children:`import {Form, Input, Button} from \"@heroui/react\";\n\nexport default function App() {\n  const onSubmit = (e) => {\n    e.preventDefault();\n  };\n\n  return (\n    <Form onSubmit={onSubmit}>\n      <Input\n        isRequired\n        label=\"Email\"\n        labelPlacement=\"outside\"\n        name=\"email\"\n        placeholder=\"Enter your email\"\n        type=\"email\"\n      />\n      <Button type=\"submit\" variant=\"bordered\">\n        Submit\n      </Button>\n    </Form>\n  );\n}\n`})}),`\n`,(0,e.jsxs)(t.p,{children:[\"To enable ARIA validation, set \",(0,e.jsx)(t.code,{children:'validationBehavior=\"aria\"'}),`.\nWhen`,(0,e.jsx)(t.code,{children:'validationBehavior=\"aria\"'}),` is set, fields are only marked as required or invalid for assistive technologies, without preventing form submission.\nYou can change the form defaults for your entire app using `,(0,e.jsx)(t.a,{href:\"/docs/api-references/heroui-provider\",children:\"HeroUI Provider\"}),\".\"]}),`\n`,(0,e.jsx)(t.p,{children:\"Supported constraints include:\"}),`\n`,(0,e.jsxs)(t.ul,{children:[`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.code,{children:\"isRequired\"}),\" indicates that a field must have a value before the form can be submitted.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.code,{children:\"minValue\"}),\" and \",(0,e.jsx)(t.code,{children:\"maxValue\"}),\" specify the minimum and maximum value in a date picker or number input.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.code,{children:\"minLength\"}),\" and \",(0,e.jsx)(t.code,{children:\"maxLength\"}),\" specify the minimum and length of text input.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.code,{children:\"pattern\"}),\" provides a custom regular expression that a text input must conform to.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.code,{children:'type=\"email\"'}),\" and \",(0,e.jsx)(t.code,{children:'type=\"url\"'}),\" provide built-in validation for email addresses and URLs.\"]}),`\n`]}),`\n`,(0,e.jsx)(t.p,{children:\"See each component's documentation for more details on the supported validation props.\"}),`\n`,(0,e.jsx)(r,{y:4}),`\n`,(0,e.jsx)(a,{title:\"Native validation\",showEditor:!1,files:i.nativeValidation}),`\n`,(0,e.jsx)(t.h4,{id:\"custom-validation\",children:\"Custom validation\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"In addition to built-in constraints, you can provide a function to the \",(0,e.jsx)(t.code,{children:\"validate\"}),\" prop to support custom validation.\"]}),`\n`,(0,e.jsx)(t.pre,{children:(0,e.jsx)(t.code,{className:\"language-tsx\",meta:\"{17-23}\",children:`import {Form, Input, Button} from \"@heroui/react\";\n\nexport default function App() {\n  const onSubmit = (e) => {\n    e.preventDefault();\n  };\n\n  return (\n    <Form onSubmit={onSubmit}>\n      <Input\n        isRequired\n        label=\"Username\"\n        labelPlacement=\"outside\"\n        name=\"username\"\n        placeholder=\"Enter your username\"\n        type=\"text\"\n        validate={(value) => {\n          if (value.length < 3) {\n            return \"Username must be at least 3 characters long\";\n          }\n\n          return value === \"admin\" ? \"Nice try!\" : null;\n        }}\n      />\n      <Button type=\"submit\" variant=\"bordered\">\n        Submit\n      </Button>\n    </Form>\n  );\n}\n`})}),`\n`,(0,e.jsx)(r,{y:4}),`\n`,(0,e.jsx)(a,{title:\"Custom validation\",showEditor:!1,files:i.customValidation}),`\n`,(0,e.jsx)(t.h4,{id:\"realtime-validation\",children:\"Realtime validation\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"If you want to display validation errors while the user is typing, you can control the field value and use the \",(0,e.jsx)(t.code,{children:\"isInvalid\"}),\" prop along with the \",(0,e.jsx)(t.code,{children:\"errorMessage\"}),\" prop.\"]}),`\n`,(0,e.jsx)(t.pre,{children:(0,e.jsx)(t.code,{className:\"language-tsx\",meta:\"{19-26,30,32}\",children:`import {Input} from \"@heroui/react\";\n\nexport function Example() {\n  const [password, setPassword] = React.useState(\"\");\n  const errors = [];\n\n  if (password.length < 4) {\n    errors.push(\"Password must be 4 characters or more.\");\n  }\n  if ((password.match(/[A-Z]/g) || []).length < 1) {\n    errors.push(\"Password must include at least 1 upper case letter\");\n  }\n  if ((password.match(/[^a-z]/gi) || []).length < 1) {\n    errors.push(\"Password must include at least 1 symbol.\");\n  }\n\n  return (\n    <Input\n      errorMessage={() => (\n        <ul>\n          {errors.map((error, i) => (\n            <li key={i}>{error}</li>\n          ))}\n        </ul>\n      )}\n      isInvalid={errors.length > 0}\n      label=\"Password\"\n      labelPlacement=\"outside\"\n      placeholder=\"Enter your password\"\n      value={password}\n      variant=\"bordered\"\n      onValueChange={setPassword}\n    />\n  );\n}\n`})}),`\n`,(0,e.jsx)(r,{y:4}),`\n`,(0,e.jsx)(a,{title:\"Realtime validation\",showEditor:!1,files:i.realTimeValidation}),`\n`,(0,e.jsxs)(t.p,{children:[\"Use \",(0,e.jsx)(t.code,{children:'validationBehavior=\"aria\"'}),\" to allow form submission even when fields are invalid, while maintaining accessibility.\"]}),`\n`,(0,e.jsx)(t.h4,{id:\"server-validation\",children:\"Server validation\"}),`\n`,(0,e.jsxs)(t.p,{children:[`Client-side validation provides immediate feedback, but you should also validate data on the server to ensure accuracy and security.\nHeroUI allows you to display server-side validation errors by using the `,(0,e.jsx)(t.code,{children:\"validationErrors\"}),\" prop in the \",(0,e.jsx)(t.code,{children:\"Form\"}),` component.\nThis prop should be an object where each key is the field `,(0,e.jsx)(t.code,{children:\"name\"}),\" and the value is the error message.\"]}),`\n`,(0,e.jsx)(t.pre,{children:(0,e.jsx)(t.code,{className:\"language-tsx\",meta:\"{4,17,25-26}\",children:`import {Button, Form, Input} from \"@heroui/react\";\n\nfunction Example() {\n  const [errors, setErrors] = React.useState({});\n\n  const onSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    const data = Object.fromEntries(new FormData(e.currentTarget));\n\n    if (!data.username) {\n      setErrors({username: \"Username is required\"});\n\n      return;\n    }\n\n    const result = await callServer(data);\n\n    setErrors(result.errors);\n  };\n\n  return (\n    <Form\n      className=\"w-full max-w-xs flex flex-col gap-3\"\n      validationErrors={errors}\n      onSubmit={onSubmit}\n    >\n      <Input\n        label=\"Username\"\n        labelPlacement=\"outside\"\n        name=\"username\"\n        placeholder=\"Enter your username\"\n      />\n      <Button type=\"submit\" variant=\"flat\">\n        Submit\n      </Button>\n    </Form>\n  );\n}\n\n// Fake server used in this example.\nfunction callServer(data) {\n  return {\n    errors: {\n      username: \"Sorry, this username is taken.\",\n    },\n  };\n}\n`})}),`\n`,(0,e.jsx)(r,{y:4}),`\n`,(0,e.jsx)(a,{title:\"Server validation\",showEditor:!1,files:i.serverValidation}),`\n`,(0,e.jsx)(t.h4,{id:\"schema-validation\",children:\"Schema validation\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"HeroUI supports errors from schema validation libraries like \",(0,e.jsx)(t.a,{href:\"https://zod.dev/\",children:\"Zod\"}),`.\nYou can use Zod's `,(0,e.jsx)(t.code,{children:\"flatten\"}),\" method to get error messages for each field and return them as part of the server response.\"]}),`\n`,(0,e.jsx)(t.pre,{children:(0,e.jsx)(t.code,{className:\"language-tsx\",meta:\"{14}\",children:`// In your server.\nimport {z} from \"zod\";\n\nconst schema = z.object({\n  name: z.string().min(1),\n  age: z.coerce.number().positive(),\n});\n\nfunction handleRequest(formData: FormData) {\n  const result = schema.safeParse(Object.fromEntries(formData));\n\n  if (!result.success) {\n    return {\n      errors: result.error.flatten().fieldErrors,\n    };\n  }\n\n  // Do something with the validated data.\n\n  return {\n    errors: {},\n  };\n}\n`})}),`\n`,(0,e.jsx)(t.h3,{id:\"react-server-actions\",children:\"React Server Actions\"}),`\n`,(0,e.jsxs)(t.p,{children:[(0,e.jsx)(t.a,{href:\"https://react.dev/reference/rsc/server-actions\",children:\"Server Actions\"}),` that allows seamless form submission to the server and retrieval of results.\nThe `,(0,e.jsx)(t.a,{href:\"https://react.dev/reference/react/useActionState\",children:\"useActionState\"}),\" hook can be used to get the result of server actions (such as errors) after submitting a form.\"]}),`\n`,(0,e.jsx)(t.pre,{children:(0,e.jsx)(t.code,{className:\"language-tsx\",meta:\"{9-11,14}\",children:`// app/add-form.tsx\n\"use client\";\n\nimport {useActionState} from \"react\";\nimport {Button, Input, Label} from \"@heroui/react\";\nimport {createTodo} from \"@/app/actions\";\n\nexport function AddForm() {\n  const [{errors}, formAction] = useActionState(createTodo, {\n    errors: {},\n  });\n\n  return (\n    <Form action={formAction} validationErrors={errors}>\n      <Input name=\"todo\" label=\"Task\" />\n      <Button type=\"submit\">Add</Button>\n    </Form>\n  );\n}\n`})}),`\n`,(0,e.jsx)(r,{y:4}),`\n`,(0,e.jsx)(t.pre,{children:(0,e.jsx)(t.code,{className:\"language-ts\",meta:\"{10}\",children:`// app/actions.ts\n\"use server\";\n\nexport async function createTodo(prevState: any, formData: FormData) {\n  try {\n    // Create the todo.\n  } catch (err) {\n    return {\n      errors: {\n        todo: \"Invalid todo.\",\n      },\n    };\n  }\n}\n`})}),`\n`,(0,e.jsx)(t.h3,{id:\"remix\",children:\"Remix\"}),`\n`,(0,e.jsxs)(t.p,{children:[(0,e.jsx)(t.a,{href:\"https://remix.run/docs/en/main/route/action\",children:\"Remix actions\"}),` handle form submissions on the server.\nYou can use the `,(0,e.jsx)(t.a,{href:\"https://remix.run/docs/en/main/hooks/use-submit\",children:\"useSubmit\"}),\" hook to submit form data to the server and the \",(0,e.jsx)(t.a,{href:\"https://remix.run/docs/en/main/hooks/use-action-data\",children:\"useActionData\"}),\" hook to retrieve validation errors from the server.\"]}),`\n`,(0,e.jsx)(t.pre,{children:(0,e.jsx)(t.code,{className:\"language-tsx\",meta:\"{13,18,34}\",children:`// app/routes/signup.tsx\nimport type {ActionFunctionArgs} from \"@remix-run/node\";\nimport {useActionData, useSubmit} from \"@remix-run/react\";\nimport {Button, Form, Input} from \"@heroui/react\";\n\nexport default function SignupForm() {\n  let submit = useSubmit();\n  let onSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    submit(e.currentTarget);\n  };\n\n  const actionData = useActionData<typeof action>();\n\n  return (\n    <Form\n      method=\"post\"\n      validationErrors={actionData?.errors}\n      onSubmit={onSubmit}\n    >\n      <Input label=\"Username\" name=\"username\" />\n      <Input label=\"Password\" name=\"password\" type=\"password\" />\n      <Button type=\"submit\">Submit</Button>\n    </Form>\n  );\n}\n\nexport async function action({request}: ActionFunctionArgs) {\n  try {\n    // Validate data and perform action...\n  } catch (err) {\n    return {\n      errors: {\n        username: \"Sorry, this username is taken.\",\n      },\n    };\n  }\n}\n`})}),`\n`,(0,e.jsx)(r,{y:4}),`\n`,(0,e.jsx)(t.h2,{id:\"form-libraries\",children:\"Form libraries\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"In most cases, the built-in validation features of HeroUI are sufficient. However, if you're building more complex forms or integrating HeroUI components into an existing form, you can use a form library like \",(0,e.jsx)(t.a,{href:\"https://react-hook-form.com/\",children:\"React Hook Form\"}),\" or \",(0,e.jsx)(t.a,{href:\"https://formik.org/\",children:\"Formik\"}),\".\"]}),`\n`,(0,e.jsx)(t.h4,{id:\"react-hook-form\",children:\"React Hook Form\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"You can integrate HeroUI components using \",(0,e.jsx)(t.a,{href:\"https://react-hook-form.com/docs/usecontroller/controller\",children:\"Controller\"}),`.\nController allows you to manage field values and validation errors, and reflect the validation result in HeroUI components.`]}),`\n`,(0,e.jsx)(t.pre,{children:(0,e.jsx)(t.code,{className:\"language-tsx\",children:`import {Controller, useForm} from \"react-hook-form\";\nimport {Button, Input, Label} from \"@heroui/react\";\n\nfunction App() {\n  const {handleSubmit, control} = useForm({\n    defaultValues: {\n      name: \"\",\n    },\n  });\n\n  const onSubmit = (data) => {\n    // Call your API here.\n  };\n\n  return (\n    <Form onSubmit={handleSubmit(onSubmit)}>\n      <Controller\n        control={control}\n        name=\"name\"\n        render={({field: {name, value, onChange, onBlur, ref}, fieldState: {invalid, error}}) => (\n          <Input\n            ref={ref}\n            isRequired\n            errorMessage={error?.message}\n            // Let React Hook Form handle validation instead of the browser.\n            validationBehavior=\"aria\"\n            isInvalid={invalid}\n            label=\"Name\"\n            name={name}\n            value={value}\n            onBlur={onBlur}\n            onChange={onChange}\n          />\n        )}\n        rules={{required: \"Name is required.\"}}\n      />\n      <Button type=\"submit\">Submit</Button>\n    </Form>\n  );\n}\n`})}),`\n`,(0,e.jsxs)(t.blockquote,{children:[`\n`,(0,e.jsxs)(t.p,{children:[\"For more information about forms in HeroUI, visit the \",(0,e.jsx)(t.a,{href:\"https://react-spectrum.adobe.com/react-aria/forms.html\",children:\"React Aria Forms Guide\"}),\".\"]}),`\n`]})]})}function C(n={}){let{wrapper:t}=n.components||{};return t?(0,e.jsx)(t,{...n,children:(0,e.jsx)(D,{...n})}):D(n)}function l(n,t){throw new Error(\"Expected \"+(t?\"component\":\"object\")+\" `\"+n+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return L(me);})();\n;return Component;"
  },
  "_id": "docs/guide/forms.mdx",
  "_raw": {
    "sourceFilePath": "docs/guide/forms.mdx",
    "sourceFileName": "forms.mdx",
    "sourceFileDir": "docs/guide",
    "contentType": "mdx",
    "flattenedPath": "docs/guide/forms"
  },
  "type": "Doc",
  "slug": "/docs/guide/forms",
  "slugAsParams": "guide/forms",
  "url": "/docs/guide/forms"
}