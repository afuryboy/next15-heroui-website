{
  "title": "Slider",
  "description": "A slider allows a user to select one or more values within a range.",
  "body": {
    "raw": "\nimport {sliderContent} from \"@/content/components/slider\";\n\n# Slider\n\nA slider allows a user to select one or more values within a range.\n\n<ComponentLinks component=\"slider\" />\n\n---\n\n<CarbonAd/>\n\n## Installation\n\n<PackageManagers\n  showGlobalInstallWarning\n  commands={{\n    cli: \"npx heroui-cli@latest add slider\",\n    npm: \"npm install @heroui/slider\",\n    yarn: \"yarn add @heroui/slider\",\n    pnpm: \"pnpm add @heroui/slider\",\n    bun: \"bun add @heroui/slider\"\n  }}\n/>\n\n## Import\n\n<ImportTabs\n  commands={{\n    main: 'import {Slider} from \"@heroui/react\";',\n    individual: 'import {Slider} from \"@heroui/slider\";',\n  }}\n/>\n\n## Usage\n\n<CodeDemo title=\"Usage\" files={sliderContent.usage} />\n\n### Disabled\n\n<CodeDemo title=\"Disabled\" files={sliderContent.disabled} />\n\n### Sizes\n\n<CodeDemo title=\"Sizes\" files={sliderContent.sizes} />\n\n### Radius\n\n<CodeDemo title=\"Radius\" files={sliderContent.radius} />\n\n### Colors\n\n<CodeDemo title=\"Sizes\" files={sliderContent.colors} />\n\n### Vertical Slider\n\nIt is possible to change the orientation of the slider by using the `orientation=\"vertical\"` prop.\n\n<CodeDemo title=\"With Steps Markers\" files={sliderContent.vertical} />\n\n### With Visible Steps\n\nYou can use the `showSteps` prop to display small dots on each step.\n\n<CodeDemo title=\"With Visible Steps\" files={sliderContent.visibleSteps} />\n\n### With Marks\n\nYou can use the `marks` prop to display a label on each step.\n\n<CodeDemo title=\"With Marks\" files={sliderContent.marks} />\n\n### Range Slider\n\nIf you pass an array of values to the `value` prop or to the `defaultValue` prop, the slider will become a range slider.\n\n<CodeDemo title=\"Range Slider\" files={sliderContent.range} />\n\n### Fill Offset\n\nThe `fillOffset` prop allows you to set where the fill should start.\n\n<CodeDemo title=\"Fill Offset\" files={sliderContent.fillOffset} />\n\n### With Tooltip\n\nThe `showTooltip` prop allows you to show a tooltip with the current thumb value when the user hovers or drags the thumb.\n\n<CodeDemo title=\"With Tooltip\" files={sliderContent.tooltip} />\n\n> **Note:** You can change any of the tooltip props by passing the `tooltipProps` to the `Slider` component.\n\n### With Outline\n\nIt is possible to add a small outline to the slider's thumbs by passing the `showOutline` prop.\n\n<CodeDemo title=\"With Outline\" files={sliderContent.outline} />\n\n### Start & End Content\n\nSlider component provides `startContent` and `endContent` props that allows you to add any `ReactNode` to the start and end of the slider.\n\n<CodeDemo title=\"Start & End Content\" files={sliderContent.startEndContent} />\n\n### Value Formatting\n\nValues are formatted as a percentage by default, but this can be modified by using the\n`formatOptions` prop to specify a different format. `formatOptions` is compatible with\nthe option parameter of [Intl.NumberFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat)\nand is applied based on the current locale.\n\n<CodeDemo title=\"Value Formatting\" files={sliderContent.valueFormatting} />\n\n> **Note:** Use the `tooltipValueFormatOptions` prop to format the tooltip value.\n\nIt is also possible to format the value using the `getValue` prop.\n\n<CodeDemo title=\"Value Formatting (Get value)\" files={sliderContent.getValue} />\n\n### Hiding the Value\n\nThe Slider value is shown by default, but can be hidden by passing the `hideValue` prop.\n\n<CodeDemo title=\"Hiding the Value\" files={sliderContent.hideValue} />\n\n### Hiding the Thumbs\n\nThe Slider thumbs are shown by default, but can be hidden by passing the `hideThumb` prop.\n\n<CodeDemo title=\"Hiding the Thumbs\" files={sliderContent.hideThumb} />\n\n### Controlled\n\nYou can control the slider by passing the `value` and `onChange` props.\n\n<CodeDemo title=\"Controlled\" files={sliderContent.controlled} />\n\nIf you want to capture the slider value only when the user stops dragging the thumb, you can use the `onChangeEnd` prop.\n\n<CodeDemo title=\"Controlled Change End\" files={sliderContent.controlledChangeEnd} />\n\n### Controlled Range\n\nYou can also control the range slider by using an array of values in the `value` and `onChange` props.\n\n<CodeDemo title=\"Controlled Range\" files={sliderContent.controlledRange} />\n\n### Custom Thumb\n\nThe Slider component provides a `renderThumb` prop that allows you to customize the thumb in any way you want.\n\n<CodeDemo title=\"Custom Thumb\" files={sliderContent.renderThumb} />\n\n### Custom Range Thumbs\n\nYou can also use the `renderThumb` prop to customize the thumbs of a range slider. The `index` prop will tell you which thumb is being rendered.\n\n<CodeDemo title=\"Custom Range Thumbs\" files={sliderContent.renderRangeThumb} />\n\n### Custom Label\n\nThe Slider component provides a `renderLabel` prop that allows you to customize the label in any way you want.\n\n<CodeDemo title=\"Custom Label\" files={sliderContent.renderLabel} />\n\n### Custom Value\n\nThe Slider component provides a `renderValue` prop that allows you to customize the value label element.\n\n<CodeDemo title=\"Custom Value\" files={sliderContent.renderValue} />\n\n### Disabling Thumb Scale\n\nIn case you want to disable the thumb scale animation, you can pass the `disableThumbScale` prop.\n\n<CodeDemo title=\"Disabling Thumb Scale\" files={sliderContent.disableThumbScale} />\n\n## Slots\n\n- **base**: The foundational slot, encompassing all other slots and elements. It serves as the primary container.\n- **labelWrapper**: The container for the Slider's label and value. It aligns these elements and ensures a consistent layout.\n- **label**: A dedicated slot to display the Slider's label.\n- **value**: Displays the current value of the Slider. Located within the `labelWrapper`.\n- **step**: Represents individual steps or intervals on the Slider.\n- **mark**: Denotes specific values or intervals along the Slider.\n- **trackWrapper**: A container for the slider's track, ensuring it is consistently aligned and positioned.\n- **track**: The base bar of the Slider, along which the thumb moves.\n- **filler**: A visual representation of the selected value, filling the track from the start point to the current thumb position.\n- **thumb**: The interactive element that users drag along the track to select a value on the Slider.\n- **startContent**: A slot for additional content or icons at the beginning of the Slider.\n- **endContent**: A slot for additional content or icons at the end of the Slider.\n\n### Custom Styles\n\nYou can customize the `Slider` component by passing custom Tailwind CSS classes to the component slots.\n\n<CodeDemo title=\"Custom Styles\" files={sliderContent.customStyles} />\n\n<Spacer y={4} />\n\n## Data Attributes\n\n`Slider` has the following attributes:\n\n- **data-hover**:\n  When the slider is being hovered. Based on [useHover](https://react-spectrum.adobe.com/react-aria/useHover.html)\n- **data-orientation**:\n  The orientation of the slider. Based on `orientation` prop.\n\n`Thumbs` have the following attributes which are returned by the `renderThumb` prop:\n\n- **data-dragging**:\n  When the thumb is being dragged.\n- **data-focus-visible**:\n  When the thumb is focused. Based on [useFocusVisible](https://react-spectrum.adobe.com/react-aria/useFocusVisible.html)\n- **data-hover**:\n  When the thumb is being hovered. Based on [useHover](https://react-spectrum.adobe.com/react-aria/useHover.html)\n- **data-pressed**:\n  When the thumb is being pressed. Based on [usePress](https://react-spectrum.adobe.com/react-aria/usePress.html)\n\n<Spacer y={4} />\n\n## Accessibility\n\n- Support for one or multiple thumbs.\n- Support for mouse, touch, and keyboard via the [useMove](https://react-spectrum.adobe.com/react-aria/useMove.html) hook.\n- Multi-touch support for dragging multiple thumbs or multiple sliders at once.\n- Pressing on the track moves the nearest thumb to that position.\n- Supports using the arrow keys, as well as page up/down, home, and end keys.\n- Support for both horizontal and vertical orientations.\n- Support for custom min, max, and step values with handling for rounding errors.\n- Support for disabling the whole slider or individual thumbs.\n- Prevents text selection while dragging.\n- Exposed to assistive technology as a group of slider elements via ARIA.\n- Slider thumbs use hidden native input elements to support touch screen readers.\n- Support for labeling both the slider as a whole and individual thumbs.\n- Support for displaying the current thumb values using an `<output>` element.\n- Internationalized number formatting as a percentage or value.\n- Support for mirroring in RTL locales.\n\n<Spacer y={4} />\n\n## API\n\n### Slider Props\n\n<APITable\n  data={[\n    {\n      attribute: \"label\",\n      type: \"ReactNode\",\n      description: \"The content to display as the label.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"name\",\n      type: \"string\", \n      description: \"The name of the input element, used when submitting an HTML form.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"size\",\n      type: \"sm | md | lg\",\n      description: \"The size of the Slider filler and thumb.\",\n      default: \"md\"\n    },\n    {\n      attribute: \"color\",\n      type: \"foreground | primary | secondary | success | warning | danger\",\n      description: \"The color of the filler and thumb.\",\n      default: \"primary\"\n    },\n    {\n      attribute: \"radius\",\n      type: \"none | sm | md | lg | full\",\n      description: \"The Slider's thumbs border radius.\",\n      default: \"full\"\n    },\n    {\n      attribute: \"step\",\n      type: \"number\",\n      description: \"The Slider's step value.\",\n      default: \"1\"\n    },\n    {\n      attribute: \"value\",\n      type: \"number\",\n      description: \"The current value (controlled).\",\n      default: \"-\"\n    },\n    {\n      attribute: \"defaultValue\",\n      type: \"number\",\n      description: \"The default value (uncontrolled).\",\n      default: \"-\"\n    },\n    {\n      attribute: \"minValue\",\n      type: \"number\",\n      description: \"The slider's minimum value.\",\n      default: \"0\"\n    },\n    {\n      attribute: \"maxValue\",\n      type: \"number\",\n      description: \"The slider's maximum value.\",\n      default: \"100\"\n    },\n    {\n      attribute: \"orientation\",\n      type: \"horizontal | vertical\",\n      description: \"The orientation of the Slider.\",\n      default: \"horizontal\"\n    },\n    {\n      attribute: \"fillOffset\",\n      type: \"number\",\n      description: \"The offset from which to start the fill.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"showSteps\",\n      type: \"boolean\",\n      description: \"Whether to show the steps indicators.\",\n      default: \"false\"\n    },\n    {\n      attribute: \"showTooltip\",\n      type: \"boolean\",\n      description: \"Whether to show a tooltip with the current thumb value when the user hovers or drags the thumb.\",\n      default: \"false\"\n    },\n    {\n      attribute: \"marks\",\n      type: \"SliderStepMarks\",\n      description: \"The marks to display on the Slider's steps.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"startContent\",\n      type: \"ReactNode\",\n      description: \"The content to display at the beginning of the Slider.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"endContent\",\n      type: \"ReactNode\",\n      description: \"The content to display at the end of the Slider.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"formatOptions\",\n      type: \"Intl.NumberFormat\",\n      description: \"The options to format the value.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"tooltipValueFormatOptions\",\n      type: \"Intl.NumberFormat\",\n      description: \"The options to format the tooltip value.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"tooltipProps\",\n      type: \"TooltipProps\",\n      description: \"The props to pass to the thumbs's tooltip.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"showOutline\",\n      type: \"boolean\",\n      description: \"Whether to show a small outline around the thumbs.\",\n      default: \"false\"\n    },\n    {\n      attribute: \"hideValue\",\n      type: \"boolean\",\n      description: \"Whether to hide the Slider value.\",\n      default: \"false\"\n    },\n    {\n      attribute: \"hideThumb\",\n      type: \"boolean\",\n      description: \"Whether to hide all the Slider thumbs.\",\n      default: \"false\"\n    },\n    {\n      attribute: \"disableThumbScale\",\n      type: \"boolean\",\n      description: \"Whether to disable the thumb scale animation.\",\n      default: \"false\"\n    },\n    {\n      attribute: \"isDisabled\",\n      type: \"boolean\",\n      description: \"Whether the whole Slider is disabled.\",\n      default: \"false\"\n    },\n    {\n      attribute: \"disableAnimation\",\n      type: \"boolean\",\n      description: \"Whether to disable the Slider animations.\",\n      default: \"false\"\n    }\n  ]}\n/>\n\n### Slider Functions\n\n<APITable\n  data={[\n    {\n      attribute: \"getValue\",\n      type: \"(value: SliderValue) => string\",\n      description: \"A function to format the value. Overrides default formatted number.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"renderLabel\",\n      type: \"(props: DOMAttributes<HTMLLabelElement>) => ReactNode\",\n      description: \"A function to render the label.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"renderValue\",\n      type: \"(props: DOMAttributes<HTMLOutputElement>) => ReactNode\",\n      description: \"A function to render the value.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"renderThumb\",\n      type: \"(props: DOMAttributes<HTMLDivElement> & {index?: number}) => ReactNode\",\n      description: \"A function to render the thumbs. The index prop will tell you which thumb is being rendered.\",\n      default: \"-\"\n    }\n  ]}\n/>\n\n### Slider Events\n\n<APITable\n  data={[\n    {\n      attribute: \"onChange\",\n      type: \"(value: SliderValue) => void\",\n      description: \"Callback fired when the value changes.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"onChangeEnd\",\n      type: \"(value: SliderValue) => void\",\n      description: \"Callback fired when the value changes and the user stops dragging the thumb.\",\n      default: \"-\"\n    }\n  ]}\n/>\n\n### Types\n\n#### Slider Value\n\n```ts\nexport type SliderValue = number | number[];\n```\n\n#### Slider Step Marks\n\n```ts\nexport type SliderStepMarks = {\n  value: number;\n  label: string;\n}[];\n```\n",
    "code": "var Component=(()=>{var ye=Object.create;var d=Object.defineProperty;var Ce=Object.getOwnPropertyDescriptor;var Ve=Object.getOwnPropertyNames;var Se=Object.getPrototypeOf,we=Object.prototype.hasOwnProperty;var Te=(l,t)=>()=>(t||l((t={exports:{}}).exports,t),t.exports),Ae=(l,t)=>{for(var o in t)d(l,o,{get:t[o],enumerable:!0})},m=(l,t,o,n)=>{if(t&&typeof t==\"object\"||typeof t==\"function\")for(let r of Ve(t))!we.call(l,r)&&r!==o&&d(l,r,{get:()=>t[r],enumerable:!(n=Ce(t,r))||n.enumerable});return l};var Ne=(l,t,o)=>(o=l!=null?ye(Se(l)):{},m(t||!l||!l.__esModule?d(o,\"default\",{value:l,enumerable:!0}):o,l)),ke=l=>m(d({},\"__esModule\",{value:!0}),l);var f=Te((Dt,h)=>{h.exports=_jsx_runtime});var Ot={};Ae(Ot,{default:()=>ve,frontmatter:()=>Mt});var e=Ne(f());var b=`import {Slider} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <Slider\n      className=\"max-w-md\"\n      defaultValue={0.4}\n      label=\"Temperature\"\n      maxValue={1}\n      minValue={0}\n      step={0.01}\n    />\n  );\n}\n`;var ze={\"/App.jsx\":b},g={...ze};var x=`import {Slider} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <Slider\n      isDisabled\n      className=\"max-w-md\"\n      defaultValue={0.6}\n      label=\"Temperature\"\n      maxValue={1}\n      minValue={0}\n      step={0.01}\n    />\n  );\n}\n`;var je={\"/App.jsx\":x},v={...je};var y=`import {Slider} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <div className=\"flex flex-col gap-6 w-full max-w-md\">\n      <Slider\n        aria-label=\"Temperature\"\n        className=\"max-w-md\"\n        defaultValue={0.2}\n        maxValue={1}\n        minValue={0}\n        size=\"sm\"\n        step={0.01}\n      />\n      <Slider\n        aria-label=\"Temperature\"\n        className=\"max-w-md\"\n        defaultValue={0.4}\n        maxValue={1}\n        minValue={0}\n        size=\"md\"\n        step={0.01}\n      />\n      <Slider\n        aria-label=\"Temperature\"\n        className=\"max-w-md\"\n        defaultValue={0.6}\n        maxValue={1}\n        minValue={0}\n        size=\"lg\"\n        step={0.01}\n      />\n    </div>\n  );\n}\n`;var Le={\"/App.jsx\":y},C={...Le};var V=`import {Slider} from \"@heroui/react\";\n\nexport default function App() {\n  const radius = [\"full\", \"lg\", \"md\", \"sm\", \"none\"];\n\n  return (\n    <div className=\"flex flex-col gap-6 w-full max-w-md\">\n      {radius.map((r) => (\n        <Slider\n          key={r}\n          aria-label=\"Temperature\"\n          className=\"max-w-md\"\n          defaultValue={0.7}\n          maxValue={1}\n          minValue={0}\n          radius={r}\n          step={0.01}\n        />\n      ))}\n    </div>\n  );\n}\n`;var Oe={\"/App.jsx\":V},S={...Oe};var w=`import {Slider} from \"@heroui/react\";\n\nexport default function App() {\n  const colors = [\"foreground\", \"primary\", \"secondary\", \"success\", \"warning\", \"danger\"];\n\n  return (\n    <div className=\"flex flex-col gap-6 w-full max-w-md\">\n      {colors.map((color) => (\n        <Slider\n          key={color}\n          aria-label=\"Temperature\"\n          className=\"max-w-md\"\n          color={color}\n          defaultValue={0.7}\n          maxValue={1}\n          minValue={0}\n          step={0.01}\n        />\n      ))}\n    </div>\n  );\n}\n`;var De={\"/App.jsx\":w},T={...De};var A=`import {Slider} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <div className=\"flex flex-col gap-6 w-full max-w-md\">\n      <Slider\n        className=\"max-w-md\"\n        color=\"foreground\"\n        defaultValue={0.2}\n        label=\"Temperature\"\n        maxValue={1}\n        minValue={0}\n        showSteps={true}\n        size=\"sm\"\n        step={0.1}\n      />\n      <Slider\n        className=\"max-w-md\"\n        color=\"foreground\"\n        defaultValue={0.4}\n        label=\"Temperature\"\n        maxValue={1}\n        minValue={0}\n        showSteps={true}\n        size=\"md\"\n        step={0.1}\n      />\n      <Slider\n        className=\"max-w-md\"\n        color=\"foreground\"\n        defaultValue={0.6}\n        label=\"Temperature\"\n        maxValue={1}\n        minValue={0}\n        showSteps={true}\n        size=\"lg\"\n        step={0.1}\n      />\n    </div>\n  );\n}\n`;var Pe={\"/App.jsx\":A},N={...Pe};var k=`import {Slider} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <Slider\n      className=\"max-w-md\"\n      color=\"foreground\"\n      defaultValue={20}\n      label=\"Select a value\"\n      marks={[\n        {\n          value: 20,\n          label: \"20%\",\n        },\n        {\n          value: 50,\n          label: \"50%\",\n        },\n        {\n          value: 80,\n          label: \"80%\",\n        },\n      ]}\n      size=\"sm\"\n      step={10}\n    />\n  );\n}\n`;var Fe={\"/App.jsx\":k},I={...Fe};var z=`import {Slider} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <div className=\"flex flex-row  max-w-md h-[348px] gap-6 w-full\">\n      <Slider\n        aria-label=\"Temperature\"\n        defaultValue={0.2}\n        maxValue={1}\n        minValue={0}\n        orientation=\"vertical\"\n        size=\"sm\"\n        step={0.01}\n      />\n      <Slider\n        aria-label=\"Temperature\"\n        defaultValue={0.4}\n        maxValue={1}\n        minValue={0}\n        orientation=\"vertical\"\n        size=\"md\"\n        step={0.01}\n      />\n      <Slider\n        aria-label=\"Temperature\"\n        defaultValue={0.6}\n        maxValue={1}\n        minValue={0}\n        orientation=\"vertical\"\n        size=\"lg\"\n        step={0.01}\n      />\n    </div>\n  );\n}\n`;var Ue={\"/App.jsx\":z},H={...Ue};var j=`import {Slider} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <Slider\n      className=\"max-w-md\"\n      defaultValue={[100, 500]}\n      formatOptions={{style: \"currency\", currency: \"USD\"}}\n      label=\"Price Range\"\n      maxValue={1000}\n      minValue={0}\n      step={50}\n    />\n  );\n}\n`;var _e={\"/App.jsx\":j},R={..._e};var L=`import {Slider} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <Slider\n      className=\"max-w-md\"\n      color=\"warning\"\n      defaultValue={1.5}\n      fillOffset={0}\n      formatOptions={{signDisplay: \"always\"}}\n      label=\"Exposure\"\n      maxValue={5}\n      minValue={-5}\n      size=\"sm\"\n      step={0.01}\n    />\n  );\n}\n`;var $e={\"/App.jsx\":L},M={...$e};var O=`import {Slider} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <Slider\n      className=\"max-w-md\"\n      defaultValue={0.2}\n      formatOptions={{style: \"percent\"}}\n      label=\"Select a value\"\n      marks={[\n        {\n          value: 0.2,\n          label: \"20%\",\n        },\n        {\n          value: 0.5,\n          label: \"50%\",\n        },\n        {\n          value: 0.8,\n          label: \"80%\",\n        },\n      ]}\n      maxValue={1}\n      minValue={0}\n      showTooltip={true}\n      step={0.1}\n    />\n  );\n}\n`;var Je={\"/App.jsx\":O},W={...Je};var D=`import {Slider} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <div className=\"flex flex-col gap-6 w-full max-w-md\">\n      <Slider\n        aria-label=\"Temperature\"\n        className=\"max-w-md\"\n        color=\"foreground\"\n        defaultValue={0.2}\n        maxValue={1}\n        minValue={0}\n        showOutline={true}\n        size=\"sm\"\n        step={0.01}\n      />\n      <Slider\n        aria-label=\"Temperature\"\n        className=\"max-w-md\"\n        color=\"foreground\"\n        defaultValue={0.4}\n        maxValue={1}\n        minValue={0}\n        showOutline={true}\n        size=\"md\"\n        step={0.01}\n      />\n      <Slider\n        aria-label=\"Temperature\"\n        className=\"max-w-md\"\n        color=\"foreground\"\n        defaultValue={0.6}\n        maxValue={1}\n        minValue={0}\n        showOutline={true}\n        size=\"lg\"\n        step={0.01}\n      />\n    </div>\n  );\n}\n`;var Xe={\"/App.jsx\":D},E={...Xe};var P=`import {Slider} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <div className=\"flex flex-col gap-6 w-full max-w-md\">\n      <Slider\n        aria-label=\"Temperature\"\n        className=\"max-w-md\"\n        color=\"secondary\"\n        defaultValue={0.2}\n        disableThumbScale={true}\n        maxValue={1}\n        minValue={0}\n        size=\"sm\"\n        step={0.01}\n      />\n      <Slider\n        aria-label=\"Temperature\"\n        className=\"max-w-md\"\n        color=\"secondary\"\n        defaultValue={0.4}\n        disableThumbScale={true}\n        maxValue={1}\n        minValue={0}\n        size=\"md\"\n        step={0.01}\n      />\n      <Slider\n        aria-label=\"Temperature\"\n        className=\"max-w-md\"\n        color=\"secondary\"\n        defaultValue={0.6}\n        disableThumbScale={true}\n        maxValue={1}\n        minValue={0}\n        size=\"lg\"\n        step={0.01}\n      />\n    </div>\n  );\n}\n`;var et={\"/App.jsx\":P},B={...et};var F=`import {Slider} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <Slider\n      className=\"max-w-md\"\n      defaultValue={40}\n      formatOptions={{style: \"currency\", currency: \"JPY\"}}\n      label=\"Currency\"\n      showTooltip={true}\n      tooltipValueFormatOptions={{style: \"currency\", currency: \"JPY\"}}\n    />\n  );\n}\n`;var rt={\"/App.jsx\":F},Z={...rt};var U=`import {Slider} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <Slider\n      className=\"max-w-md\"\n      getValue={(donuts) => \\`\\${donuts} of 60 Donuts\\`}\n      label=\"Donuts to buy\"\n      maxValue={60}\n      size=\"sm\"\n    />\n  );\n}\n`;var lt={\"/App.jsx\":U},Y={...lt};var _=`import {Slider} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <Slider\n      className=\"max-w-md\"\n      color=\"danger\"\n      defaultValue={0.4}\n      hideValue={true}\n      label=\"Temperature\"\n      maxValue={1}\n      minValue={0}\n      step={0.01}\n    />\n  );\n}\n`;var it={\"/App.jsx\":_},q={...it};var $=`import {Slider} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <Slider\n      aria-label=\"Player progress\"\n      className=\"max-w-md\"\n      color=\"foreground\"\n      defaultValue={20}\n      hideThumb={true}\n    />\n  );\n}\n`;var st={\"/App.jsx\":$},G={...st};var J=`import {Slider} from \"@heroui/react\";\n\nexport const VolumeHighIcon = (props) => {\n  return (\n    <svg\n      aria-hidden=\"true\"\n      fill=\"none\"\n      focusable=\"false\"\n      height=\"1em\"\n      role=\"presentation\"\n      viewBox=\"0 0 24 24\"\n      width=\"1em\"\n      {...props}\n    >\n      <path\n        d=\"M18.0003 16.7503C17.8403 16.7503 17.6903 16.7003 17.5503 16.6003C17.2203 16.3503 17.1503 15.8803 17.4003 15.5503C18.9703 13.4603 18.9703 10.5403 17.4003 8.45027C17.1503 8.12027 17.2203 7.65027 17.5503 7.40027C17.8803 7.15027 18.3503 7.22027 18.6003 7.55027C20.5603 10.1703 20.5603 13.8303 18.6003 16.4503C18.4503 16.6503 18.2303 16.7503 18.0003 16.7503Z\"\n        fill=\"currentColor\"\n      />\n      <path\n        d=\"M19.8284 19.2503C19.6684 19.2503 19.5184 19.2003 19.3784 19.1003C19.0484 18.8503 18.9784 18.3803 19.2284 18.0503C21.8984 14.4903 21.8984 9.51027 19.2284 5.95027C18.9784 5.62027 19.0484 5.15027 19.3784 4.90027C19.7084 4.65027 20.1784 4.72027 20.4284 5.05027C23.4984 9.14027 23.4984 14.8603 20.4284 18.9503C20.2884 19.1503 20.0584 19.2503 19.8284 19.2503Z\"\n        fill=\"currentColor\"\n      />\n      <path\n        d=\"M14.02 3.78168C12.9 3.16168 11.47 3.32168 10.01 4.23168L7.09 6.06168C6.89 6.18168 6.66 6.25168 6.43 6.25168H5.5H5C2.58 6.25168 1.25 7.58168 1.25 10.0017V14.0017C1.25 16.4217 2.58 17.7517 5 17.7517H5.5H6.43C6.66 17.7517 6.89 17.8217 7.09 17.9417L10.01 19.7717C10.89 20.3217 11.75 20.5917 12.55 20.5917C13.07 20.5917 13.57 20.4717 14.02 20.2217C15.13 19.6017 15.75 18.3117 15.75 16.5917V7.41168C15.75 5.69168 15.13 4.40168 14.02 3.78168Z\"\n        fill=\"currentColor\"\n      />\n    </svg>\n  );\n};\n\nexport const VolumeLowIcon = (props) => {\n  return (\n    <svg\n      aria-hidden=\"true\"\n      fill=\"none\"\n      focusable=\"false\"\n      height=\"1em\"\n      role=\"presentation\"\n      viewBox=\"0 0 24 24\"\n      width=\"1em\"\n      {...props}\n    >\n      <path\n        d=\"M19.3284 16.7503C19.1684 16.7503 19.0184 16.7003 18.8784 16.6003C18.5484 16.3503 18.4784 15.8803 18.7284 15.5503C20.2984 13.4603 20.2984 10.5403 18.7284 8.45027C18.4784 8.12027 18.5484 7.65027 18.8784 7.40027C19.2084 7.15027 19.6784 7.22027 19.9284 7.55027C21.8984 10.1703 21.8984 13.8303 19.9284 16.4503C19.7884 16.6503 19.5584 16.7503 19.3284 16.7503Z\"\n        fill=\"currentColor\"\n      />\n      <path\n        d=\"M15.3481 3.78168C14.2281 3.16168 12.7981 3.32168 11.3381 4.23168L8.41813 6.06168C8.21813 6.18168 7.98813 6.25168 7.75813 6.25168H6.82812H6.32812C3.90812 6.25168 2.57812 7.58168 2.57812 10.0017V14.0017C2.57812 16.4217 3.90812 17.7517 6.32812 17.7517H6.82812H7.75813C7.98813 17.7517 8.21813 17.8217 8.41813 17.9417L11.3381 19.7717C12.2181 20.3217 13.0781 20.5917 13.8781 20.5917C14.3981 20.5917 14.8981 20.4717 15.3481 20.2217C16.4581 19.6017 17.0781 18.3117 17.0781 16.5917V7.41168C17.0781 5.69168 16.4581 4.40168 15.3481 3.78168Z\"\n        fill=\"currentColor\"\n      />\n    </svg>\n  );\n};\n\nexport default function App() {\n  return (\n    <Slider\n      aria-label=\"Volume\"\n      className=\"max-w-md\"\n      color=\"success\"\n      defaultValue={40}\n      endContent={<VolumeHighIcon className=\"text-2xl\" />}\n      size=\"lg\"\n      startContent={<VolumeLowIcon className=\"text-2xl\" />}\n    />\n  );\n}\n`;var ut={\"/App.jsx\":J},K={...ut};var X=`import {Slider, Button} from \"@heroui/react\";\n\nexport const VolumeHighIcon = (props) => {\n  return (\n    <svg\n      aria-hidden=\"true\"\n      fill=\"none\"\n      focusable=\"false\"\n      height=\"1em\"\n      role=\"presentation\"\n      viewBox=\"0 0 24 24\"\n      width=\"1em\"\n      {...props}\n    >\n      <path\n        d=\"M18.0003 16.7503C17.8403 16.7503 17.6903 16.7003 17.5503 16.6003C17.2203 16.3503 17.1503 15.8803 17.4003 15.5503C18.9703 13.4603 18.9703 10.5403 17.4003 8.45027C17.1503 8.12027 17.2203 7.65027 17.5503 7.40027C17.8803 7.15027 18.3503 7.22027 18.6003 7.55027C20.5603 10.1703 20.5603 13.8303 18.6003 16.4503C18.4503 16.6503 18.2303 16.7503 18.0003 16.7503Z\"\n        fill=\"currentColor\"\n      />\n      <path\n        d=\"M19.8284 19.2503C19.6684 19.2503 19.5184 19.2003 19.3784 19.1003C19.0484 18.8503 18.9784 18.3803 19.2284 18.0503C21.8984 14.4903 21.8984 9.51027 19.2284 5.95027C18.9784 5.62027 19.0484 5.15027 19.3784 4.90027C19.7084 4.65027 20.1784 4.72027 20.4284 5.05027C23.4984 9.14027 23.4984 14.8603 20.4284 18.9503C20.2884 19.1503 20.0584 19.2503 19.8284 19.2503Z\"\n        fill=\"currentColor\"\n      />\n      <path\n        d=\"M14.02 3.78168C12.9 3.16168 11.47 3.32168 10.01 4.23168L7.09 6.06168C6.89 6.18168 6.66 6.25168 6.43 6.25168H5.5H5C2.58 6.25168 1.25 7.58168 1.25 10.0017V14.0017C1.25 16.4217 2.58 17.7517 5 17.7517H5.5H6.43C6.66 17.7517 6.89 17.8217 7.09 17.9417L10.01 19.7717C10.89 20.3217 11.75 20.5917 12.55 20.5917C13.07 20.5917 13.57 20.4717 14.02 20.2217C15.13 19.6017 15.75 18.3117 15.75 16.5917V7.41168C15.75 5.69168 15.13 4.40168 14.02 3.78168Z\"\n        fill=\"currentColor\"\n      />\n    </svg>\n  );\n};\n\nexport const VolumeLowIcon = (props) => {\n  return (\n    <svg\n      aria-hidden=\"true\"\n      fill=\"none\"\n      focusable=\"false\"\n      height=\"1em\"\n      role=\"presentation\"\n      viewBox=\"0 0 24 24\"\n      width=\"1em\"\n      {...props}\n    >\n      <path\n        d=\"M19.3284 16.7503C19.1684 16.7503 19.0184 16.7003 18.8784 16.6003C18.5484 16.3503 18.4784 15.8803 18.7284 15.5503C20.2984 13.4603 20.2984 10.5403 18.7284 8.45027C18.4784 8.12027 18.5484 7.65027 18.8784 7.40027C19.2084 7.15027 19.6784 7.22027 19.9284 7.55027C21.8984 10.1703 21.8984 13.8303 19.9284 16.4503C19.7884 16.6503 19.5584 16.7503 19.3284 16.7503Z\"\n        fill=\"currentColor\"\n      />\n      <path\n        d=\"M15.3481 3.78168C14.2281 3.16168 12.7981 3.32168 11.3381 4.23168L8.41813 6.06168C8.21813 6.18168 7.98813 6.25168 7.75813 6.25168H6.82812H6.32812C3.90812 6.25168 2.57812 7.58168 2.57812 10.0017V14.0017C2.57812 16.4217 3.90812 17.7517 6.32812 17.7517H6.82812H7.75813C7.98813 17.7517 8.21813 17.8217 8.41813 17.9417L11.3381 19.7717C12.2181 20.3217 13.0781 20.5917 13.8781 20.5917C14.3981 20.5917 14.8981 20.4717 15.3481 20.2217C16.4581 19.6017 17.0781 18.3117 17.0781 16.5917V7.41168C17.0781 5.69168 16.4581 4.40168 15.3481 3.78168Z\"\n        fill=\"currentColor\"\n      />\n    </svg>\n  );\n};\n\nexport default function App() {\n  const [value, setValue] = React.useState(25);\n\n  return (\n    <div className=\"flex flex-col gap-2 w-full h-full max-w-md items-start justify-center\">\n      <Slider\n        aria-label=\"Volume\"\n        className=\"max-w-md\"\n        color=\"success\"\n        endContent={\n          <Button\n            isIconOnly\n            radius=\"full\"\n            variant=\"light\"\n            onPress={() => setValue((prev) => (prev <= 90 ? prev + 10 : 100))}\n          >\n            <VolumeHighIcon className=\"text-2xl\" />\n          </Button>\n        }\n        size=\"lg\"\n        startContent={\n          <Button\n            isIconOnly\n            radius=\"full\"\n            variant=\"light\"\n            onPress={() => setValue((prev) => (prev >= 10 ? prev - 10 : 0))}\n          >\n            <VolumeLowIcon className=\"text-2xl\" />\n          </Button>\n        }\n        value={value}\n        onChange={setValue}\n      />\n      <p className=\"text-default-500 font-medium text-small\">Current volume: {value}</p>\n    </div>\n  );\n}\n`;var Q=`import type {SliderValue} from \"@heroui/react\";\n\nimport React from \"react\";\nimport {Slider, Button} from \"@heroui/react\";\n\nexport const VolumeHighIcon = (props) => {\n  return (\n    <svg\n      aria-hidden=\"true\"\n      fill=\"none\"\n      focusable=\"false\"\n      height=\"1em\"\n      role=\"presentation\"\n      viewBox=\"0 0 24 24\"\n      width=\"1em\"\n      {...props}\n    >\n      <path\n        d=\"M18.0003 16.7503C17.8403 16.7503 17.6903 16.7003 17.5503 16.6003C17.2203 16.3503 17.1503 15.8803 17.4003 15.5503C18.9703 13.4603 18.9703 10.5403 17.4003 8.45027C17.1503 8.12027 17.2203 7.65027 17.5503 7.40027C17.8803 7.15027 18.3503 7.22027 18.6003 7.55027C20.5603 10.1703 20.5603 13.8303 18.6003 16.4503C18.4503 16.6503 18.2303 16.7503 18.0003 16.7503Z\"\n        fill=\"currentColor\"\n      />\n      <path\n        d=\"M19.8284 19.2503C19.6684 19.2503 19.5184 19.2003 19.3784 19.1003C19.0484 18.8503 18.9784 18.3803 19.2284 18.0503C21.8984 14.4903 21.8984 9.51027 19.2284 5.95027C18.9784 5.62027 19.0484 5.15027 19.3784 4.90027C19.7084 4.65027 20.1784 4.72027 20.4284 5.05027C23.4984 9.14027 23.4984 14.8603 20.4284 18.9503C20.2884 19.1503 20.0584 19.2503 19.8284 19.2503Z\"\n        fill=\"currentColor\"\n      />\n      <path\n        d=\"M14.02 3.78168C12.9 3.16168 11.47 3.32168 10.01 4.23168L7.09 6.06168C6.89 6.18168 6.66 6.25168 6.43 6.25168H5.5H5C2.58 6.25168 1.25 7.58168 1.25 10.0017V14.0017C1.25 16.4217 2.58 17.7517 5 17.7517H5.5H6.43C6.66 17.7517 6.89 17.8217 7.09 17.9417L10.01 19.7717C10.89 20.3217 11.75 20.5917 12.55 20.5917C13.07 20.5917 13.57 20.4717 14.02 20.2217C15.13 19.6017 15.75 18.3117 15.75 16.5917V7.41168C15.75 5.69168 15.13 4.40168 14.02 3.78168Z\"\n        fill=\"currentColor\"\n      />\n    </svg>\n  );\n};\n\nexport const VolumeLowIcon = (props) => {\n  return (\n    <svg\n      aria-hidden=\"true\"\n      fill=\"none\"\n      focusable=\"false\"\n      height=\"1em\"\n      role=\"presentation\"\n      viewBox=\"0 0 24 24\"\n      width=\"1em\"\n      {...props}\n    >\n      <path\n        d=\"M19.3284 16.7503C19.1684 16.7503 19.0184 16.7003 18.8784 16.6003C18.5484 16.3503 18.4784 15.8803 18.7284 15.5503C20.2984 13.4603 20.2984 10.5403 18.7284 8.45027C18.4784 8.12027 18.5484 7.65027 18.8784 7.40027C19.2084 7.15027 19.6784 7.22027 19.9284 7.55027C21.8984 10.1703 21.8984 13.8303 19.9284 16.4503C19.7884 16.6503 19.5584 16.7503 19.3284 16.7503Z\"\n        fill=\"currentColor\"\n      />\n      <path\n        d=\"M15.3481 3.78168C14.2281 3.16168 12.7981 3.32168 11.3381 4.23168L8.41813 6.06168C8.21813 6.18168 7.98813 6.25168 7.75813 6.25168H6.82812H6.32812C3.90812 6.25168 2.57812 7.58168 2.57812 10.0017V14.0017C2.57812 16.4217 3.90812 17.7517 6.32812 17.7517H6.82812H7.75813C7.98813 17.7517 8.21813 17.8217 8.41813 17.9417L11.3381 19.7717C12.2181 20.3217 13.0781 20.5917 13.8781 20.5917C14.3981 20.5917 14.8981 20.4717 15.3481 20.2217C16.4581 19.6017 17.0781 18.3117 17.0781 16.5917V7.41168C17.0781 5.69168 16.4581 4.40168 15.3481 3.78168Z\"\n        fill=\"currentColor\"\n      />\n    </svg>\n  );\n};\n\nexport default function App() {\n  const [value, setValue] = React.useState<SliderValue>(25);\n\n  return (\n    <div className=\"flex flex-col gap-2 w-full h-full max-w-md items-start justify-center\">\n      <Slider\n        aria-label=\"Volume\"\n        className=\"max-w-md\"\n        color=\"success\"\n        endContent={\n          <Button\n            isIconOnly\n            radius=\"full\"\n            variant=\"light\"\n            onPress={() => setValue((prev) => (Number(prev) <= 90 ? Number(prev) + 10 : 100))}\n          >\n            <VolumeHighIcon className=\"text-2xl\" />\n          </Button>\n        }\n        size=\"lg\"\n        startContent={\n          <Button\n            isIconOnly\n            radius=\"full\"\n            variant=\"light\"\n            onPress={() => setValue((prev) => (Number(prev) >= 10 ? Number(prev) - 10 : 0))}\n          >\n            <VolumeLowIcon className=\"text-2xl\" />\n          </Button>\n        }\n        value={value}\n        onChange={setValue}\n      />\n      <p className=\"text-default-500 font-medium text-small\">Current volume: {value}</p>\n    </div>\n  );\n}\n`;var mt={\"/App.jsx\":X},ht={\"/App.tsx\":Q},ee={...mt,...ht};var te=`import {Slider} from \"@heroui/react\";\n\nexport default function App() {\n  const [value, setValue] = React.useState(25);\n\n  return (\n    <div className=\"flex flex-col gap-2 w-full h-full max-w-md items-start justify-center\">\n      <Slider\n        aria-label=\"Volume\"\n        className=\"max-w-md\"\n        color=\"secondary\"\n        size=\"lg\"\n        onChangeEnd={setValue}\n      />\n      <p className=\"text-default-500 font-medium text-small\">Current volume: {value}</p>\n    </div>\n  );\n}\n`;var re=`import type {SliderValue} from \"@heroui/react\";\n\nimport React from \"react\";\nimport {Slider} from \"@heroui/react\";\n\nexport default function App() {\n  const [value, setValue] = React.useState<SliderValue>(25);\n\n  return (\n    <div className=\"flex flex-col gap-2 w-full h-full max-w-md items-start justify-center\">\n      <Slider\n        aria-label=\"Volume\"\n        className=\"max-w-md\"\n        color=\"secondary\"\n        defaultValue={70}\n        size=\"lg\"\n        onChangeEnd={setValue}\n      />\n      <p className=\"text-default-500 font-medium text-small\">Current volume: {value}</p>\n    </div>\n  );\n}\n`;var gt={\"/App.jsx\":te},xt={\"/App.tsx\":re},ae={...gt,...xt};var le=`import {Slider} from \"@heroui/react\";\n\nexport default function App() {\n  const [value, setValue] = React.useState([100, 300]);\n\n  return (\n    <div className=\"flex flex-col gap-2 w-full h-full max-w-md items-start justify-center\">\n      <Slider\n        className=\"max-w-md\"\n        formatOptions={{style: \"currency\", currency: \"USD\"}}\n        label=\"Select a budget\"\n        maxValue={1000}\n        minValue={0}\n        step={10}\n        value={value}\n        onChange={setValue}\n      />\n      <p className=\"text-default-500 font-medium text-small\">\n        Selected budget: {Array.isArray(value) && value.map((b) => \\`\\${b}\\`).join(\" \\u2013 \")}\n      </p>\n    </div>\n  );\n}\n`;var oe=`import type {SliderValue} from \"@heroui/react\";\n\nimport React from \"react\";\nimport {Slider} from \"@heroui/react\";\n\nexport default function App() {\n  const [value, setValue] = React.useState<SliderValue>([100, 300]);\n\n  return (\n    <div className=\"flex flex-col gap-2 w-full h-full max-w-md items-start justify-center\">\n      <Slider\n        className=\"max-w-md\"\n        formatOptions={{style: \"currency\", currency: \"USD\"}}\n        label=\"Select a budget\"\n        maxValue={1000}\n        minValue={0}\n        step={10}\n        value={value}\n        onChange={setValue}\n      />\n      <p className=\"text-default-500 font-medium text-small\">\n        Selected budget: {Array.isArray(value) && value.map((b) => \\`$\\${b}\\`).join(\" \\u2013 \")}\n      </p>\n    </div>\n  );\n}\n`;var Ct={\"/App.jsx\":le},Vt={\"/App.tsx\":oe},ie={...Ct,...Vt};var ne=`import {Slider} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <Slider\n      classNames={{\n        base: \"max-w-md gap-3\",\n        track: \"border-s-secondary-100\",\n        filler: \"bg-gradient-to-r from-secondary-100 to-secondary-500\",\n      }}\n      defaultValue={60}\n      label=\"Select brightness\"\n      renderThumb={(props) => (\n        <div\n          {...props}\n          className=\"group p-1 top-1/2 bg-background border-small border-default-200 dark:border-default-400/50 shadow-medium rounded-full cursor-grab data-[dragging=true]:cursor-grabbing\"\n        >\n          <span className=\"transition-transform bg-gradient-to-br shadow-small from-secondary-100 to-secondary-500 rounded-full w-5 h-5 block group-data-[dragging=true]:scale-80\" />\n        </div>\n      )}\n      size=\"sm\"\n    />\n  );\n}\n`;var wt={\"/App.jsx\":ne},se={...wt};var de=`import {Slider} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <Slider\n      classNames={{\n        base: \"max-w-md gap-3\",\n        filler: \"bg-gradient-to-r from-pink-300 to-cyan-300 dark:from-pink-600 dark:to-cyan-800\",\n      }}\n      defaultValue={[100, 300]}\n      formatOptions={{style: \"currency\", currency: \"USD\"}}\n      label=\"Price Range\"\n      maxValue={1000}\n      renderThumb={({index, ...props}) => (\n        <div\n          {...props}\n          className=\"group p-1 top-1/2 bg-background border-small border-default-200 dark:border-default-400/50 shadow-medium rounded-full cursor-grab data-[dragging=true]:cursor-grabbing\"\n        >\n          <span\n            className={cn(\n              \"transition-transform bg-gradient-to-br shadow-small rounded-full w-5 h-5 block group-data-[dragging=true]:scale-80\",\n              index === 0\n                ? \"from-pink-200 to-pink-500 dark:from-pink-400 dark:to-pink-600\" // first thumb\n                : \"from-cyan-200 to-cyan-600 dark:from-cyan-600 dark:to-cyan-800\", // second thumb\n            )}\n          />\n        </div>\n      )}\n      size=\"lg\"\n      step={10}\n    />\n  );\n}\n`;var At={\"/App.jsx\":de},ue={...At};var pe=`import {Slider, Tooltip} from \"@heroui/react\";\n\nexport const InfoIcon = (props) => {\n  return (\n    <svg\n      aria-hidden=\"true\"\n      fill=\"none\"\n      focusable=\"false\"\n      height=\"1em\"\n      role=\"presentation\"\n      viewBox=\"0 0 24 24\"\n      width=\"1em\"\n      {...props}\n    >\n      <path\n        d=\"M12 22C17.5 22 22 17.5 22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22Z\"\n        stroke=\"currentColor\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth=\"1.5\"\n      />\n      <path\n        d=\"M12 8V13\"\n        stroke=\"currentColor\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth=\"1.5\"\n      />\n      <path\n        d=\"M11.9945 16H12.0035\"\n        stroke=\"currentColor\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth=\"2\"\n      />\n    </svg>\n  );\n};\n\nexport default function App() {\n  return (\n    <Slider\n      classNames={{\n        base: \"max-w-md gap-3\",\n        filler: \"bg-gradient-to-r from-pink-300 to-cyan-300 dark:from-pink-600 dark:to-cyan-800\",\n      }}\n      defaultValue={[100, 300]}\n      formatOptions={{style: \"currency\", currency: \"USD\"}}\n      label=\"Price Range\"\n      maxValue={1000}\n      renderLabel={({children, ...props}) => (\n        <label {...props} className=\"text-medium flex gap-2 items-center\">\n          {children}\n          <Tooltip\n            className=\"w-[200px] px-1.5 text-tiny text-default-600 rounded-small\"\n            content=\"The price range you want to search for.\"\n            placement=\"right\"\n          >\n            <span className=\"transition-opacity opacity-80 hover:opacity-100\">\n              <InfoIcon />\n            </span>\n          </Tooltip>\n        </label>\n      )}\n      renderThumb={({index, ...props}) => (\n        <div\n          {...props}\n          className=\"group p-1 top-1/2 bg-background border-small border-default-200 dark:border-default-400/50 shadow-medium rounded-full cursor-grab data-[dragging=true]:cursor-grabbing\"\n        >\n          <span\n            className={cn(\n              \"transition-transform bg-gradient-to-br shadow-small rounded-full w-5 h-5 block group-data-[dragging=true]:scale-80\",\n              index === 0\n                ? \"from-pink-200 to-pink-500 dark:from-pink-400 dark:to-pink-600\" // first thumb\n                : \"from-cyan-200 to-cyan-600 dark:from-cyan-600 dark:to-cyan-800\", // second thumb\n            )}\n          />\n        </div>\n      )}\n      size=\"lg\"\n      step={10}\n    />\n  );\n}\n`;var kt={\"/App.jsx\":pe},ce={...kt};var me=`import {Slider, Tooltip} from \"@heroui/react\";\n\nexport default function App() {\n  const [value, setValue] = React.useState(0.2);\n  const [inputValue, setInputValue] = React.useState(\"0.2\");\n\n  const handleChange = (value) => {\n    if (isNaN(Number(value))) return;\n\n    setValue(value);\n    setInputValue(value.toString());\n  };\n\n  return (\n    <Slider\n      classNames={{\n        base: \"max-w-md\",\n        label: \"text-medium\",\n      }}\n      color=\"foreground\"\n      label=\"Temperature\"\n      maxValue={1}\n      minValue={0}\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      renderValue={({children, ...props}) => (\n        <output {...props}>\n          <Tooltip\n            className=\"text-tiny text-default-500 rounded-md\"\n            content=\"Press Enter to confirm\"\n            placement=\"left\"\n          >\n            <input\n              aria-label=\"Temperature value\"\n              className=\"px-1 py-0.5 w-12 text-right text-small text-default-700 font-medium bg-default-100 outline-none transition-colors rounded-small border-medium border-transparent hover:border-primary focus:border-primary\"\n              type=\"text\"\n              value={inputValue}\n              onChange={(e) => {\n                const v = e.target.value;\n\n                setInputValue(v);\n              }}\n              onKeyDown={(e) => {\n                if (e.key === \"Enter\" && !isNaN(Number(inputValue))) {\n                  setValue(Number(inputValue));\n                }\n              }}\n            />\n          </Tooltip>\n        </output>\n      )}\n      size=\"sm\"\n      // we extract the default children to render the input\n      step={0.01}\n      value={value}\n      onChange={handleChange}\n    />\n  );\n}\n`;var he=`import type {SliderValue} from \"@heroui/react\";\n\nimport React from \"react\";\nimport {Tooltip, Slider} from \"@heroui/react\";\n\nexport default function App() {\n  const [value, setValue] = React.useState<SliderValue>(0.2);\n  const [inputValue, setInputValue] = React.useState<string>(\"0.2\");\n\n  const handleChange = (value: SliderValue) => {\n    if (isNaN(Number(value))) return;\n\n    setValue(value);\n    setInputValue(value.toString());\n  };\n\n  return (\n    <Slider\n      classNames={{\n        base: \"max-w-md\",\n        label: \"text-medium\",\n      }}\n      color=\"foreground\"\n      label=\"Temperature\"\n      maxValue={1}\n      minValue={0}\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      renderValue={({children, ...props}) => (\n        <output {...props}>\n          <Tooltip\n            className=\"text-tiny text-default-500 rounded-md\"\n            content=\"Press Enter to confirm\"\n            placement=\"left\"\n          >\n            <input\n              aria-label=\"Temperature value\"\n              className=\"px-1 py-0.5 w-12 text-right text-small text-default-700 font-medium bg-default-100 outline-none transition-colors rounded-small border-medium border-transparent hover:border-primary focus:border-primary\"\n              type=\"text\"\n              value={inputValue}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                const v = e.target.value;\n\n                setInputValue(v);\n              }}\n              onKeyDown={(e: React.KeyboardEvent<HTMLInputElement>) => {\n                if (e.key === \"Enter\" && !isNaN(Number(inputValue))) {\n                  setValue(Number(inputValue));\n                }\n              }}\n            />\n          </Tooltip>\n        </output>\n      )}\n      size=\"sm\"\n      step={0.01}\n      // we extract the default children to render the input\n      value={value}\n      onChange={handleChange}\n    />\n  );\n}\n`;var Ht={\"/App.jsx\":me},jt={\"/App.tsx\":he},fe={...Ht,...jt};var be=`import {Slider} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <Slider\n      classNames={{\n        base: \"max-w-md\",\n        filler: \"bg-gradient-to-r from-primary-500 to-secondary-400\",\n        labelWrapper: \"mb-2\",\n        label: \"font-medium text-default-700 text-medium\",\n        value: \"font-medium text-default-500 text-small\",\n        thumb: [\n          \"transition-size\",\n          \"bg-gradient-to-r from-secondary-400 to-primary-500\",\n          \"data-[dragging=true]:shadow-lg data-[dragging=true]:shadow-black/20\",\n          \"data-[dragging=true]:w-7 data-[dragging=true]:h-7 data-[dragging=true]:after:h-6 data-[dragging=true]:after:w-6\",\n        ],\n        step: \"data-[in-range=true]:bg-black/30 dark:data-[in-range=true]:bg-white/50\",\n      }}\n      defaultValue={[0, 800]}\n      disableThumbScale={true}\n      formatOptions={{style: \"currency\", currency: \"USD\"}}\n      label=\"Price Range\"\n      maxValue={1000}\n      minValue={0}\n      showOutline={true}\n      showSteps={true}\n      showTooltip={true}\n      step={100}\n      tooltipProps={{\n        offset: 10,\n        placement: \"bottom\",\n        classNames: {\n          base: [\n            // arrow color\n            \"before:bg-gradient-to-r before:from-secondary-400 before:to-primary-500\",\n          ],\n          content: [\n            \"py-2 shadow-xl\",\n            \"text-white bg-gradient-to-r from-secondary-400 to-primary-500\",\n          ],\n        },\n      }}\n      tooltipValueFormatOptions={{style: \"currency\", currency: \"USD\", maximumFractionDigits: 0}}\n    />\n  );\n}\n`;var Lt={\"/App.jsx\":be},ge={...Lt};var a={usage:g,disabled:v,sizes:C,radius:S,colors:T,visibleSteps:N,marks:I,vertical:H,range:R,fillOffset:M,tooltip:W,outline:E,disableThumbScale:B,valueFormatting:Z,getValue:Y,hideValue:q,hideThumb:G,startEndContent:K,controlled:ee,controlledChangeEnd:ae,controlledRange:ie,renderThumb:se,renderRangeThumb:ue,renderLabel:ce,renderValue:fe,customStyles:ge};var Mt={title:\"Slider\",description:\"A slider allows a user to select one or more values within a range.\"};function xe(l){let t={a:\"a\",blockquote:\"blockquote\",code:\"code\",h1:\"h1\",h2:\"h2\",h3:\"h3\",h4:\"h4\",hr:\"hr\",li:\"li\",p:\"p\",pre:\"pre\",strong:\"strong\",ul:\"ul\",...l.components},{APITable:o,CarbonAd:n,CodeDemo:r,ComponentLinks:u,ImportTabs:p,PackageManagers:c,Spacer:s}=t;return o||i(\"APITable\",!0),n||i(\"CarbonAd\",!0),r||i(\"CodeDemo\",!0),u||i(\"ComponentLinks\",!0),p||i(\"ImportTabs\",!0),c||i(\"PackageManagers\",!0),s||i(\"Spacer\",!0),(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(t.h1,{id:\"slider\",children:\"Slider\"}),`\n`,(0,e.jsx)(t.p,{children:\"A slider allows a user to select one or more values within a range.\"}),`\n`,(0,e.jsx)(u,{component:\"slider\"}),`\n`,(0,e.jsx)(t.hr,{}),`\n`,(0,e.jsx)(n,{}),`\n`,(0,e.jsx)(t.h2,{id:\"installation\",children:\"Installation\"}),`\n`,(0,e.jsx)(c,{showGlobalInstallWarning:!0,commands:{cli:\"npx heroui-cli@latest add slider\",npm:\"npm install @heroui/slider\",yarn:\"yarn add @heroui/slider\",pnpm:\"pnpm add @heroui/slider\",bun:\"bun add @heroui/slider\"}}),`\n`,(0,e.jsx)(t.h2,{id:\"import\",children:\"Import\"}),`\n`,(0,e.jsx)(p,{commands:{main:'import {Slider} from \"@heroui/react\";',individual:'import {Slider} from \"@heroui/slider\";'}}),`\n`,(0,e.jsx)(t.h2,{id:\"usage\",children:\"Usage\"}),`\n`,(0,e.jsx)(r,{title:\"Usage\",files:a.usage}),`\n`,(0,e.jsx)(t.h3,{id:\"disabled\",children:\"Disabled\"}),`\n`,(0,e.jsx)(r,{title:\"Disabled\",files:a.disabled}),`\n`,(0,e.jsx)(t.h3,{id:\"sizes\",children:\"Sizes\"}),`\n`,(0,e.jsx)(r,{title:\"Sizes\",files:a.sizes}),`\n`,(0,e.jsx)(t.h3,{id:\"radius\",children:\"Radius\"}),`\n`,(0,e.jsx)(r,{title:\"Radius\",files:a.radius}),`\n`,(0,e.jsx)(t.h3,{id:\"colors\",children:\"Colors\"}),`\n`,(0,e.jsx)(r,{title:\"Sizes\",files:a.colors}),`\n`,(0,e.jsx)(t.h3,{id:\"vertical-slider\",children:\"Vertical Slider\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"It is possible to change the orientation of the slider by using the \",(0,e.jsx)(t.code,{children:'orientation=\"vertical\"'}),\" prop.\"]}),`\n`,(0,e.jsx)(r,{title:\"With Steps Markers\",files:a.vertical}),`\n`,(0,e.jsx)(t.h3,{id:\"with-visible-steps\",children:\"With Visible Steps\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"You can use the \",(0,e.jsx)(t.code,{children:\"showSteps\"}),\" prop to display small dots on each step.\"]}),`\n`,(0,e.jsx)(r,{title:\"With Visible Steps\",files:a.visibleSteps}),`\n`,(0,e.jsx)(t.h3,{id:\"with-marks\",children:\"With Marks\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"You can use the \",(0,e.jsx)(t.code,{children:\"marks\"}),\" prop to display a label on each step.\"]}),`\n`,(0,e.jsx)(r,{title:\"With Marks\",files:a.marks}),`\n`,(0,e.jsx)(t.h3,{id:\"range-slider\",children:\"Range Slider\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"If you pass an array of values to the \",(0,e.jsx)(t.code,{children:\"value\"}),\" prop or to the \",(0,e.jsx)(t.code,{children:\"defaultValue\"}),\" prop, the slider will become a range slider.\"]}),`\n`,(0,e.jsx)(r,{title:\"Range Slider\",files:a.range}),`\n`,(0,e.jsx)(t.h3,{id:\"fill-offset\",children:\"Fill Offset\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"The \",(0,e.jsx)(t.code,{children:\"fillOffset\"}),\" prop allows you to set where the fill should start.\"]}),`\n`,(0,e.jsx)(r,{title:\"Fill Offset\",files:a.fillOffset}),`\n`,(0,e.jsx)(t.h3,{id:\"with-tooltip\",children:\"With Tooltip\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"The \",(0,e.jsx)(t.code,{children:\"showTooltip\"}),\" prop allows you to show a tooltip with the current thumb value when the user hovers or drags the thumb.\"]}),`\n`,(0,e.jsx)(r,{title:\"With Tooltip\",files:a.tooltip}),`\n`,(0,e.jsxs)(t.blockquote,{children:[`\n`,(0,e.jsxs)(t.p,{children:[(0,e.jsx)(t.strong,{children:\"Note:\"}),\" You can change any of the tooltip props by passing the \",(0,e.jsx)(t.code,{children:\"tooltipProps\"}),\" to the \",(0,e.jsx)(t.code,{children:\"Slider\"}),\" component.\"]}),`\n`]}),`\n`,(0,e.jsx)(t.h3,{id:\"with-outline\",children:\"With Outline\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"It is possible to add a small outline to the slider's thumbs by passing the \",(0,e.jsx)(t.code,{children:\"showOutline\"}),\" prop.\"]}),`\n`,(0,e.jsx)(r,{title:\"With Outline\",files:a.outline}),`\n`,(0,e.jsx)(t.h3,{id:\"start--end-content\",children:\"Start & End Content\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"Slider component provides \",(0,e.jsx)(t.code,{children:\"startContent\"}),\" and \",(0,e.jsx)(t.code,{children:\"endContent\"}),\" props that allows you to add any \",(0,e.jsx)(t.code,{children:\"ReactNode\"}),\" to the start and end of the slider.\"]}),`\n`,(0,e.jsx)(r,{title:\"Start & End Content\",files:a.startEndContent}),`\n`,(0,e.jsx)(t.h3,{id:\"value-formatting\",children:\"Value Formatting\"}),`\n`,(0,e.jsxs)(t.p,{children:[`Values are formatted as a percentage by default, but this can be modified by using the\n`,(0,e.jsx)(t.code,{children:\"formatOptions\"}),\" prop to specify a different format. \",(0,e.jsx)(t.code,{children:\"formatOptions\"}),` is compatible with\nthe option parameter of `,(0,e.jsx)(t.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\",children:\"Intl.NumberFormat\"}),`\nand is applied based on the current locale.`]}),`\n`,(0,e.jsx)(r,{title:\"Value Formatting\",files:a.valueFormatting}),`\n`,(0,e.jsxs)(t.blockquote,{children:[`\n`,(0,e.jsxs)(t.p,{children:[(0,e.jsx)(t.strong,{children:\"Note:\"}),\" Use the \",(0,e.jsx)(t.code,{children:\"tooltipValueFormatOptions\"}),\" prop to format the tooltip value.\"]}),`\n`]}),`\n`,(0,e.jsxs)(t.p,{children:[\"It is also possible to format the value using the \",(0,e.jsx)(t.code,{children:\"getValue\"}),\" prop.\"]}),`\n`,(0,e.jsx)(r,{title:\"Value Formatting (Get value)\",files:a.getValue}),`\n`,(0,e.jsx)(t.h3,{id:\"hiding-the-value\",children:\"Hiding the Value\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"The Slider value is shown by default, but can be hidden by passing the \",(0,e.jsx)(t.code,{children:\"hideValue\"}),\" prop.\"]}),`\n`,(0,e.jsx)(r,{title:\"Hiding the Value\",files:a.hideValue}),`\n`,(0,e.jsx)(t.h3,{id:\"hiding-the-thumbs\",children:\"Hiding the Thumbs\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"The Slider thumbs are shown by default, but can be hidden by passing the \",(0,e.jsx)(t.code,{children:\"hideThumb\"}),\" prop.\"]}),`\n`,(0,e.jsx)(r,{title:\"Hiding the Thumbs\",files:a.hideThumb}),`\n`,(0,e.jsx)(t.h3,{id:\"controlled\",children:\"Controlled\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"You can control the slider by passing the \",(0,e.jsx)(t.code,{children:\"value\"}),\" and \",(0,e.jsx)(t.code,{children:\"onChange\"}),\" props.\"]}),`\n`,(0,e.jsx)(r,{title:\"Controlled\",files:a.controlled}),`\n`,(0,e.jsxs)(t.p,{children:[\"If you want to capture the slider value only when the user stops dragging the thumb, you can use the \",(0,e.jsx)(t.code,{children:\"onChangeEnd\"}),\" prop.\"]}),`\n`,(0,e.jsx)(r,{title:\"Controlled Change End\",files:a.controlledChangeEnd}),`\n`,(0,e.jsx)(t.h3,{id:\"controlled-range\",children:\"Controlled Range\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"You can also control the range slider by using an array of values in the \",(0,e.jsx)(t.code,{children:\"value\"}),\" and \",(0,e.jsx)(t.code,{children:\"onChange\"}),\" props.\"]}),`\n`,(0,e.jsx)(r,{title:\"Controlled Range\",files:a.controlledRange}),`\n`,(0,e.jsx)(t.h3,{id:\"custom-thumb\",children:\"Custom Thumb\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"The Slider component provides a \",(0,e.jsx)(t.code,{children:\"renderThumb\"}),\" prop that allows you to customize the thumb in any way you want.\"]}),`\n`,(0,e.jsx)(r,{title:\"Custom Thumb\",files:a.renderThumb}),`\n`,(0,e.jsx)(t.h3,{id:\"custom-range-thumbs\",children:\"Custom Range Thumbs\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"You can also use the \",(0,e.jsx)(t.code,{children:\"renderThumb\"}),\" prop to customize the thumbs of a range slider. The \",(0,e.jsx)(t.code,{children:\"index\"}),\" prop will tell you which thumb is being rendered.\"]}),`\n`,(0,e.jsx)(r,{title:\"Custom Range Thumbs\",files:a.renderRangeThumb}),`\n`,(0,e.jsx)(t.h3,{id:\"custom-label\",children:\"Custom Label\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"The Slider component provides a \",(0,e.jsx)(t.code,{children:\"renderLabel\"}),\" prop that allows you to customize the label in any way you want.\"]}),`\n`,(0,e.jsx)(r,{title:\"Custom Label\",files:a.renderLabel}),`\n`,(0,e.jsx)(t.h3,{id:\"custom-value\",children:\"Custom Value\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"The Slider component provides a \",(0,e.jsx)(t.code,{children:\"renderValue\"}),\" prop that allows you to customize the value label element.\"]}),`\n`,(0,e.jsx)(r,{title:\"Custom Value\",files:a.renderValue}),`\n`,(0,e.jsx)(t.h3,{id:\"disabling-thumb-scale\",children:\"Disabling Thumb Scale\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"In case you want to disable the thumb scale animation, you can pass the \",(0,e.jsx)(t.code,{children:\"disableThumbScale\"}),\" prop.\"]}),`\n`,(0,e.jsx)(r,{title:\"Disabling Thumb Scale\",files:a.disableThumbScale}),`\n`,(0,e.jsx)(t.h2,{id:\"slots\",children:\"Slots\"}),`\n`,(0,e.jsxs)(t.ul,{children:[`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"base\"}),\": The foundational slot, encompassing all other slots and elements. It serves as the primary container.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"labelWrapper\"}),\": The container for the Slider's label and value. It aligns these elements and ensures a consistent layout.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"label\"}),\": A dedicated slot to display the Slider's label.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"value\"}),\": Displays the current value of the Slider. Located within the \",(0,e.jsx)(t.code,{children:\"labelWrapper\"}),\".\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"step\"}),\": Represents individual steps or intervals on the Slider.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"mark\"}),\": Denotes specific values or intervals along the Slider.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"trackWrapper\"}),\": A container for the slider's track, ensuring it is consistently aligned and positioned.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"track\"}),\": The base bar of the Slider, along which the thumb moves.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"filler\"}),\": A visual representation of the selected value, filling the track from the start point to the current thumb position.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"thumb\"}),\": The interactive element that users drag along the track to select a value on the Slider.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"startContent\"}),\": A slot for additional content or icons at the beginning of the Slider.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"endContent\"}),\": A slot for additional content or icons at the end of the Slider.\"]}),`\n`]}),`\n`,(0,e.jsx)(t.h3,{id:\"custom-styles\",children:\"Custom Styles\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"You can customize the \",(0,e.jsx)(t.code,{children:\"Slider\"}),\" component by passing custom Tailwind CSS classes to the component slots.\"]}),`\n`,(0,e.jsx)(r,{title:\"Custom Styles\",files:a.customStyles}),`\n`,(0,e.jsx)(s,{y:4}),`\n`,(0,e.jsx)(t.h2,{id:\"data-attributes\",children:\"Data Attributes\"}),`\n`,(0,e.jsxs)(t.p,{children:[(0,e.jsx)(t.code,{children:\"Slider\"}),\" has the following attributes:\"]}),`\n`,(0,e.jsxs)(t.ul,{children:[`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-hover\"}),`:\nWhen the slider is being hovered. Based on `,(0,e.jsx)(t.a,{href:\"https://react-spectrum.adobe.com/react-aria/useHover.html\",children:\"useHover\"})]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-orientation\"}),`:\nThe orientation of the slider. Based on `,(0,e.jsx)(t.code,{children:\"orientation\"}),\" prop.\"]}),`\n`]}),`\n`,(0,e.jsxs)(t.p,{children:[(0,e.jsx)(t.code,{children:\"Thumbs\"}),\" have the following attributes which are returned by the \",(0,e.jsx)(t.code,{children:\"renderThumb\"}),\" prop:\"]}),`\n`,(0,e.jsxs)(t.ul,{children:[`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-dragging\"}),`:\nWhen the thumb is being dragged.`]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-focus-visible\"}),`:\nWhen the thumb is focused. Based on `,(0,e.jsx)(t.a,{href:\"https://react-spectrum.adobe.com/react-aria/useFocusVisible.html\",children:\"useFocusVisible\"})]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-hover\"}),`:\nWhen the thumb is being hovered. Based on `,(0,e.jsx)(t.a,{href:\"https://react-spectrum.adobe.com/react-aria/useHover.html\",children:\"useHover\"})]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-pressed\"}),`:\nWhen the thumb is being pressed. Based on `,(0,e.jsx)(t.a,{href:\"https://react-spectrum.adobe.com/react-aria/usePress.html\",children:\"usePress\"})]}),`\n`]}),`\n`,(0,e.jsx)(s,{y:4}),`\n`,(0,e.jsx)(t.h2,{id:\"accessibility\",children:\"Accessibility\"}),`\n`,(0,e.jsxs)(t.ul,{children:[`\n`,(0,e.jsx)(t.li,{children:\"Support for one or multiple thumbs.\"}),`\n`,(0,e.jsxs)(t.li,{children:[\"Support for mouse, touch, and keyboard via the \",(0,e.jsx)(t.a,{href:\"https://react-spectrum.adobe.com/react-aria/useMove.html\",children:\"useMove\"}),\" hook.\"]}),`\n`,(0,e.jsx)(t.li,{children:\"Multi-touch support for dragging multiple thumbs or multiple sliders at once.\"}),`\n`,(0,e.jsx)(t.li,{children:\"Pressing on the track moves the nearest thumb to that position.\"}),`\n`,(0,e.jsx)(t.li,{children:\"Supports using the arrow keys, as well as page up/down, home, and end keys.\"}),`\n`,(0,e.jsx)(t.li,{children:\"Support for both horizontal and vertical orientations.\"}),`\n`,(0,e.jsx)(t.li,{children:\"Support for custom min, max, and step values with handling for rounding errors.\"}),`\n`,(0,e.jsx)(t.li,{children:\"Support for disabling the whole slider or individual thumbs.\"}),`\n`,(0,e.jsx)(t.li,{children:\"Prevents text selection while dragging.\"}),`\n`,(0,e.jsx)(t.li,{children:\"Exposed to assistive technology as a group of slider elements via ARIA.\"}),`\n`,(0,e.jsx)(t.li,{children:\"Slider thumbs use hidden native input elements to support touch screen readers.\"}),`\n`,(0,e.jsx)(t.li,{children:\"Support for labeling both the slider as a whole and individual thumbs.\"}),`\n`,(0,e.jsxs)(t.li,{children:[\"Support for displaying the current thumb values using an \",(0,e.jsx)(t.code,{children:\"<output>\"}),\" element.\"]}),`\n`,(0,e.jsx)(t.li,{children:\"Internationalized number formatting as a percentage or value.\"}),`\n`,(0,e.jsx)(t.li,{children:\"Support for mirroring in RTL locales.\"}),`\n`]}),`\n`,(0,e.jsx)(s,{y:4}),`\n`,(0,e.jsx)(t.h2,{id:\"api\",children:\"API\"}),`\n`,(0,e.jsx)(t.h3,{id:\"slider-props\",children:\"Slider Props\"}),`\n`,(0,e.jsx)(o,{data:[{attribute:\"label\",type:\"ReactNode\",description:\"The content to display as the label.\",default:\"-\"},{attribute:\"name\",type:\"string\",description:\"The name of the input element, used when submitting an HTML form.\",default:\"-\"},{attribute:\"size\",type:\"sm | md | lg\",description:\"The size of the Slider filler and thumb.\",default:\"md\"},{attribute:\"color\",type:\"foreground | primary | secondary | success | warning | danger\",description:\"The color of the filler and thumb.\",default:\"primary\"},{attribute:\"radius\",type:\"none | sm | md | lg | full\",description:\"The Slider's thumbs border radius.\",default:\"full\"},{attribute:\"step\",type:\"number\",description:\"The Slider's step value.\",default:\"1\"},{attribute:\"value\",type:\"number\",description:\"The current value (controlled).\",default:\"-\"},{attribute:\"defaultValue\",type:\"number\",description:\"The default value (uncontrolled).\",default:\"-\"},{attribute:\"minValue\",type:\"number\",description:\"The slider's minimum value.\",default:\"0\"},{attribute:\"maxValue\",type:\"number\",description:\"The slider's maximum value.\",default:\"100\"},{attribute:\"orientation\",type:\"horizontal | vertical\",description:\"The orientation of the Slider.\",default:\"horizontal\"},{attribute:\"fillOffset\",type:\"number\",description:\"The offset from which to start the fill.\",default:\"-\"},{attribute:\"showSteps\",type:\"boolean\",description:\"Whether to show the steps indicators.\",default:\"false\"},{attribute:\"showTooltip\",type:\"boolean\",description:\"Whether to show a tooltip with the current thumb value when the user hovers or drags the thumb.\",default:\"false\"},{attribute:\"marks\",type:\"SliderStepMarks\",description:\"The marks to display on the Slider's steps.\",default:\"-\"},{attribute:\"startContent\",type:\"ReactNode\",description:\"The content to display at the beginning of the Slider.\",default:\"-\"},{attribute:\"endContent\",type:\"ReactNode\",description:\"The content to display at the end of the Slider.\",default:\"-\"},{attribute:\"formatOptions\",type:\"Intl.NumberFormat\",description:\"The options to format the value.\",default:\"-\"},{attribute:\"tooltipValueFormatOptions\",type:\"Intl.NumberFormat\",description:\"The options to format the tooltip value.\",default:\"-\"},{attribute:\"tooltipProps\",type:\"TooltipProps\",description:\"The props to pass to the thumbs's tooltip.\",default:\"-\"},{attribute:\"showOutline\",type:\"boolean\",description:\"Whether to show a small outline around the thumbs.\",default:\"false\"},{attribute:\"hideValue\",type:\"boolean\",description:\"Whether to hide the Slider value.\",default:\"false\"},{attribute:\"hideThumb\",type:\"boolean\",description:\"Whether to hide all the Slider thumbs.\",default:\"false\"},{attribute:\"disableThumbScale\",type:\"boolean\",description:\"Whether to disable the thumb scale animation.\",default:\"false\"},{attribute:\"isDisabled\",type:\"boolean\",description:\"Whether the whole Slider is disabled.\",default:\"false\"},{attribute:\"disableAnimation\",type:\"boolean\",description:\"Whether to disable the Slider animations.\",default:\"false\"}]}),`\n`,(0,e.jsx)(t.h3,{id:\"slider-functions\",children:\"Slider Functions\"}),`\n`,(0,e.jsx)(o,{data:[{attribute:\"getValue\",type:\"(value: SliderValue) => string\",description:\"A function to format the value. Overrides default formatted number.\",default:\"-\"},{attribute:\"renderLabel\",type:\"(props: DOMAttributes<HTMLLabelElement>) => ReactNode\",description:\"A function to render the label.\",default:\"-\"},{attribute:\"renderValue\",type:\"(props: DOMAttributes<HTMLOutputElement>) => ReactNode\",description:\"A function to render the value.\",default:\"-\"},{attribute:\"renderThumb\",type:\"(props: DOMAttributes<HTMLDivElement> & {index?: number}) => ReactNode\",description:\"A function to render the thumbs. The index prop will tell you which thumb is being rendered.\",default:\"-\"}]}),`\n`,(0,e.jsx)(t.h3,{id:\"slider-events\",children:\"Slider Events\"}),`\n`,(0,e.jsx)(o,{data:[{attribute:\"onChange\",type:\"(value: SliderValue) => void\",description:\"Callback fired when the value changes.\",default:\"-\"},{attribute:\"onChangeEnd\",type:\"(value: SliderValue) => void\",description:\"Callback fired when the value changes and the user stops dragging the thumb.\",default:\"-\"}]}),`\n`,(0,e.jsx)(t.h3,{id:\"types\",children:\"Types\"}),`\n`,(0,e.jsx)(t.h4,{id:\"slider-value\",children:\"Slider Value\"}),`\n`,(0,e.jsx)(t.pre,{children:(0,e.jsx)(t.code,{className:\"language-ts\",children:`export type SliderValue = number | number[];\n`})}),`\n`,(0,e.jsx)(t.h4,{id:\"slider-step-marks\",children:\"Slider Step Marks\"}),`\n`,(0,e.jsx)(t.pre,{children:(0,e.jsx)(t.code,{className:\"language-ts\",children:`export type SliderStepMarks = {\n  value: number;\n  label: string;\n}[];\n`})})]})}function ve(l={}){let{wrapper:t}=l.components||{};return t?(0,e.jsx)(t,{...l,children:(0,e.jsx)(xe,{...l})}):xe(l)}function i(l,t){throw new Error(\"Expected \"+(t?\"component\":\"object\")+\" `\"+l+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return ke(Ot);})();\n;return Component;"
  },
  "_id": "docs/components/slider.mdx",
  "_raw": {
    "sourceFilePath": "docs/components/slider.mdx",
    "sourceFileName": "slider.mdx",
    "sourceFileDir": "docs/components",
    "contentType": "mdx",
    "flattenedPath": "docs/components/slider"
  },
  "type": "Doc",
  "slug": "/docs/components/slider",
  "slugAsParams": "components/slider",
  "url": "/docs/components/slider"
}