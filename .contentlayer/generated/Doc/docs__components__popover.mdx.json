{
  "title": "Popover",
  "description": "Popover is a non-modal dialog that floats around its disclosure. It's commonly used for displaying additional rich content on top of something.",
  "body": {
    "raw": "\nimport {popoverContent} from \"@/content/components/popover\";\n\n# Popover\n\nPopover is a **non-modal** dialog that floats around its disclosure. It's commonly used for displaying\nadditional rich content on top of something.\n\n<ComponentLinks component=\"popover\" reactAriaHook=\"usePopover\" />\n\n---\n\n<CarbonAd/>\n\n## Installation\n\n<PackageManagers\n  showGlobalInstallWarning\n  commands={{\n    cli: \"npx heroui-cli@latest add popover\",\n    npm: \"npm install @heroui/popover\",\n    yarn: \"yarn add @heroui/popover\",\n    pnpm: \"pnpm add @heroui/popover\",\n    bun: \"bun add @heroui/popover\"\n  }}\n/>\n\n## Import\n\nHeroUI exports 3 popover-related components:\n\n- **Popover**: The main component to display a popover.\n- **PopoverTrigger**: The component that triggers the popover.\n- **PopoverContent**: The component that contains the popover content.\n\n<ImportTabs\n  commands={{\n    main: 'import {Popover, PopoverTrigger, PopoverContent} from \"@heroui/react\";',\n    individual: 'import {Popover, PopoverTrigger, PopoverContent} from \"@heroui/popover\";',\n  }}\n/>\n\n## Usage\n\n<CodeDemo title=\"Usage\" files={popoverContent.usage} />\n\n### With Arrow\n\n<CodeDemo title=\"With Arrow\" files={popoverContent.arrow} />\n\n### Colors\n\n<CodeDemo title=\"Colors\" files={popoverContent.colors} />\n\n### Placements\n\n<CodeDemo title=\"Placements\" files={popoverContent.placements} />\n\n### Offset\n\n<CodeDemo title=\"Offset\" files={popoverContent.offset} />\n\n### Controlled\n\n<CodeDemo title=\"Controlled\" files={popoverContent.controlled} />\n\n### Title Props\n\nTo be sure that the popover exposes the correct title to assistive technologies, you should use the\n`titleProps` prop on the `PopoverContent` component. To use this prop, you must pass a function as a child.\n\n<CodeDemo title=\"Title Props\" files={popoverContent.titleProps} />\n\n### With Form\n\nThe `Popover` handles the focus within the popover content. It means that you can use the popover with\nform elements without any problem. the focus returns to the trigger when the popover closes.\n\n<CodeDemo title=\"With Form\" files={popoverContent.withForm} />\n\n> **Note**: You can add the `autoFocus` prop to the first `Input` component to focus it when the popover opens.\n\n### Backdrop\n\nThe `Popover` component has a `backdrop` prop to show a backdrop behind the popover. The backdrop can be\neither `transparent`, `opaque` or `blur`. The default value is `transparent`.\n\n<CodeDemo title=\"Backdrop\" files={popoverContent.backdrop} />\n\n### Custom Motion\n\nPopover offers a `motionProps` property to customize the `enter` / `exit` animation.\n\n<CodeDemo title=\"Custom Motion\" files={popoverContent.customMotion} />\n\n> Learn more about Framer motion variants [here](https://www.framer.com/motion/animation/#variants).\n\n### Custom Trigger\n\n<CodeDemo title=\"Custom Trigger\" files={popoverContent.customTrigger} />\n\n## Slots\n\n- **base**: The main popover slot, it wraps the popover content and contains the arrow as a pseudo-element (::before).\n- **trigger**: The popover trigger slot, it has small styles to ensure the trigger works correctly.\n- **backdrop**: The backdrop slot, it contains the backdrop styles.\n- **content**: The content slot, it contains the popover content.\n\n### Custom Styles\n\nYou can customize the `Popover` component by passing custom Tailwind CSS classes to the component slots.\n\n<CodeDemo title=\"Custom Styles\" files={popoverContent.customStyles} />\n\n<Spacer y={4} />\n\n## Data Attributes\n\n`Popover` has the following attributes on the `PopoverContent` element:\n\n- **data-open**:\n  When the popover is open. Based on popover state.\n- **data-placement**:\n  The placement of the popover. Based on `placement` prop. The arrow element is positioned based on this attribute.\n- **data-focus**:\n  When the popover is being focused. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).\n- **data-focus-visible**:\n  When the popover is being focused with the keyboard. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).\n\n<Spacer y={4} />\n\n## Accessibility\n\n- The trigger and popover are automatically associated semantically via ARIA.\n- Content outside the popover is hidden from assistive technologies while it is open.\n- The popover closes when interacting outside, or pressing the <Kbd>Escape</Kbd> key.\n- Focus is moved into the popover on mount, and restored to the trigger element on unmount.\n- The popover is positioned relative to the trigger element, and automatically flips and adjusts to avoid overlapping with the edge of the browser window.\n- Scrolling is prevented outside the popover to avoid unintentionally repositioning or closing it.\n\n<Spacer y={4} />\n\n## API\n\n### Popover Props\n\n<APITable\n  data={[\n    {\n      attribute: \"children*\",\n      type: \"ReactNode[]\",\n      description: \"The content of the popover. It's usually the PopoverTrigger and PopoverContent.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"size\",\n      type: \"sm | md | lg\",\n      description: \"The popover content font size.\",\n      default: \"md\"\n    },\n    {\n      attribute: \"color\",\n      type: \"default | primary | secondary | success | warning | danger\",\n      description: \"The popover color theme.\",\n      default: \"default\"\n    },\n    {\n      attribute: \"radius\",\n      type: \"none | sm | md | lg | full\",\n      description: \"The popover border radius.\",\n      default: \"lg\"\n    },\n    {\n      attribute: \"shadow\",\n      type: \"none | sm | md | lg\",\n      description: \"The popover shadow.\",\n      default: \"lg\"\n    },\n    {\n      attribute: \"backdrop\",\n      type: \"transparent | opaque | blur\",\n      description: \"The popover backdrop type.\",\n      default: \"transparent\"\n    },\n    {\n      attribute: \"placement\",\n      type: \"PopoverPlacement\",\n      description: \"The placement of the popover relative to its trigger reference.\",\n      default: \"bottom\"\n    },\n    {\n      attribute: \"state\",\n      type: \"OverlayTriggerState\",\n      description: \"The controlled state of the popover.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"isOpen\",\n      type: \"boolean\",\n      description: \"Whether the popover is open by default (controlled).\",\n      default: \"-\"\n    },\n    {\n      attribute: \"defaultOpen\",\n      type: \"boolean\",\n      description: \"Whether the popover is open by default (uncontrolled).\",\n      default: \"-\"\n    },\n    {\n      attribute: \"offset\",\n      type: \"number\",\n      description: \"The distance or margin between the reference and popper.\",\n      default: \"7\"\n    },\n    {\n      attribute: \"containerPadding\",\n      type: \"number\",\n      description: \"The placement padding between the element and its surrounding container.\",\n      default: \"12\"\n    },\n    {\n      attribute: \"crossOffset\",\n      type: \"number\",\n      description: \"The additional offset applied along the cross axis between the element and its anchor element.\",\n      default: \"0\"\n    },\n    {\n      attribute: \"triggerType\",\n      type: \"dialog | menu | listbox | tree | grid\",\n      description: \"Type of popover that is opened by the trigger.\",\n      default: \"dialog\"\n    },\n    {\n      attribute: \"showArrow\",\n      type: \"boolean\",\n      description: \"Whether the popover should have an arrow.\",\n      default: \"false\"\n    },\n    {\n      attribute: \"shouldFlip\",\n      type: \"boolean\",\n      description: \"Whether the popover should change its placement and flip when it's about to overflow.\",\n      default: \"true\"\n    },\n    {\n      attribute: \"triggerScaleOnOpen\",\n      type: \"boolean\",\n      description: \"Whether the trigger should scale down when the popover is open.\",\n      default: \"true\"\n    },\n    {\n      attribute: \"shouldBlockScroll\",\n      type: \"boolean\",\n      description: \"Whether the popover should block the scroll outside the popover.\",\n      default: \"false\"\n    },\n    {\n      attribute: \"shouldCloseOnScroll\",\n      type: \"boolean\",\n      description: \"Whether the popover should close on scroll.\",\n      default: \"false\"\n    },\n    {\n      attribute: \"isKeyboardDismissDisabled\",\n      type: \"boolean\",\n      description: \"Whether pressing the escape key to close the popover should be disabled.\",\n      default: \"false\"\n    },\n    {\n      attribute: \"shouldCloseOnBlur\",\n      type: \"boolean\",\n      description: \"Whether the popover should close when focus is lost or moves outside it.\",\n      default: \"false\"\n    },\n    {\n      attribute: \"motionProps\",\n      type: \"MotionProps\",\n      description: \"The props to modify the framer motion animation.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"portalContainer\",\n      type: \"HTMLElement\",\n      description: \"The container element in which the overlay portal will be placed.\",\n      default: \"document.body\"\n    },\n    {\n      attribute: \"disableAnimation\",\n      type: \"boolean\",\n      description: \"Whether the popover is animated.\",\n      default: \"false\"\n    },\n    {\n      attribute: \"classNames\",\n      type: \"Partial<Record<'base' | 'trigger' | 'backdrop' | 'content', string>>\",\n      description: \"Allows to set custom class names for the popover slots.\",\n      default: \"-\"\n    }\n  ]}\n/>\n\n### Popover Events\n\n<APITable\n  data={[\n    {\n      attribute: \"onOpenChange\",\n      type: \"(isOpen: boolean) => void\",\n      description: \"Handler that is called when the popover's open state changes.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"shouldCloseOnInteractOutside\",\n      type: \"(e: HTMLElement) => void\",\n      description: \"When user interacts with the argument element outside of the popover ref, return true if onClose should be called.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"onClose\",\n      type: \"() => void\",\n      description: \"Handler that is called when the popover should close.\",\n      default: \"-\"\n    }\n  ]}\n/>\n\n### PopoverTrigger Props\n\n<APITable\n  data={[\n    {\n      attribute: \"children*\",\n      type: \"ReactNode\",\n      description: \"The popover trigger component, ensure the children passed is focusable.\",\n      default: \"-\"\n    }\n  ]}\n/>\n\n### PopoverContent Props\n\n<APITable\n  data={[\n    {\n      attribute: \"children\",\n      type: \"ReactNode\",\n      description: \"The content that is displayed when the trigger is pressed.\",\n      default: \"-\"\n    }\n  ]}\n/>\n\n### Popover types\n\n<Spacer y={1} />\n\n#### Popover Placement\n\n```ts\ntype PopoverPlacement =\n  | \"top\"\n  | \"bottom\"\n  | \"right\"\n  | \"left\"\n  | \"top-start\"\n  | \"top-end\"\n  | \"bottom-start\"\n  | \"bottom-end\"\n  | \"left-start\"\n  | \"left-end\"\n  | \"right-start\"\n  | \"right-end\";\n```\n\n#### Motion Props\n\n```ts\nexport type MotionProps = HTMLMotionProps<\"div\">; // @see https://www.framer.com/motion/\n```\n",
    "code": "var Component=(()=>{var E=Object.create;var l=Object.defineProperty;var K=Object.getOwnPropertyDescriptor;var X=Object.getOwnPropertyNames;var Y=Object.getPrototypeOf,Z=Object.prototype.hasOwnProperty;var G=(t,o)=>()=>(o||t((o={exports:{}}).exports,o),o.exports),J=(t,o)=>{for(var n in o)l(t,n,{get:o[n],enumerable:!0})},m=(t,o,n,a)=>{if(o&&typeof o==\"object\"||typeof o==\"function\")for(let r of X(o))!Z.call(t,r)&&r!==n&&l(t,r,{get:()=>o[r],enumerable:!(a=K(o,r))||a.enumerable});return t};var Q=(t,o,n)=>(n=t!=null?E(Y(t)):{},m(o||!t||!t.__esModule?l(n,\"default\",{value:t,enumerable:!0}):n,t)),$=t=>m(l({},\"__esModule\",{value:!0}),t);var f=G((Ie,v)=>{v.exports=_jsx_runtime});var Be={};J(Be,{default:()=>V,frontmatter:()=>Ae});var e=Q(f());var g=`import {Popover, PopoverTrigger, PopoverContent, Button} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <Popover placement=\"right\">\n      <PopoverTrigger>\n        <Button>Open Popover</Button>\n      </PopoverTrigger>\n      <PopoverContent>\n        <div className=\"px-1 py-2\">\n          <div className=\"text-small font-bold\">Popover Content</div>\n          <div className=\"text-tiny\">This is the popover content</div>\n        </div>\n      </PopoverContent>\n    </Popover>\n  );\n}\n`;var oe={\"/App.jsx\":g},P={...oe};var b=`import {Popover, PopoverTrigger, PopoverContent, Button} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <Popover placement=\"bottom\" showArrow={true}>\n      <PopoverTrigger>\n        <Button>Open Popover</Button>\n      </PopoverTrigger>\n      <PopoverContent>\n        <div className=\"px-1 py-2\">\n          <div className=\"text-small font-bold\">Popover Content</div>\n          <div className=\"text-tiny\">This is the popover content</div>\n        </div>\n      </PopoverContent>\n    </Popover>\n  );\n}\n`;var re={\"/App.jsx\":b},x={...re};var y=`import {Popover, PopoverTrigger, PopoverContent, Button} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <Popover showArrow offset={20} placement=\"bottom\">\n      <PopoverTrigger>\n        <Button>Open Popover</Button>\n      </PopoverTrigger>\n      <PopoverContent>\n        <div className=\"px-1 py-2\">\n          <div className=\"text-small font-bold\">Popover Content</div>\n          <div className=\"text-tiny\">This is the popover content</div>\n        </div>\n      </PopoverContent>\n    </Popover>\n  );\n}\n`;var ie={\"/App.jsx\":y},T={...ie};var w=`import {Popover, PopoverTrigger, PopoverContent, Button} from \"@heroui/react\";\n\nexport default function App() {\n  const content = (\n    <PopoverContent>\n      <div className=\"px-1 py-2\">\n        <div className=\"text-small font-bold\">Popover Content</div>\n        <div className=\"text-tiny\">This is the popover content</div>\n      </div>\n    </PopoverContent>\n  );\n\n  const colors = [\"default\", \"primary\", \"secondary\", \"success\", \"warning\", \"danger\", \"foreground\"];\n\n  return (\n    <div className=\"flex flex-wrap gap-4\">\n      {colors.map((color) => (\n        <Popover key={color} color={color} placement=\"top\">\n          <PopoverTrigger>\n            <Button className=\"capitalize\" color={color}>\n              {color}\n            </Button>\n          </PopoverTrigger>\n          {content}\n        </Popover>\n      ))}\n    </div>\n  );\n}\n`;var ae={\"/App.jsx\":w},C={...ae};var N=`import {Popover, PopoverTrigger, PopoverContent, Button} from \"@heroui/react\";\n\nexport default function App() {\n  const [isOpen, setIsOpen] = React.useState(false);\n\n  return (\n    <div className=\"flex flex-col gap-2\">\n      <Popover isOpen={isOpen} onOpenChange={(open) => setIsOpen(open)}>\n        <PopoverTrigger>\n          <Button>Open Popover</Button>\n        </PopoverTrigger>\n        <PopoverContent>\n          <div className=\"px-1 py-2\">\n            <div className=\"text-small font-bold\">Popover Content</div>\n            <div className=\"text-tiny\">This is the popover content</div>\n          </div>\n        </PopoverContent>\n      </Popover>\n      <p className=\"text-small text-default-400\">Open: {isOpen ? \"true\" : \"false\"}</p>\n    </div>\n  );\n}\n`;var le={\"/App.jsx\":N},A={...le};var B=`import {Popover, PopoverTrigger, PopoverContent, Button} from \"@heroui/react\";\n\nexport default function App() {\n  const content = (\n    <PopoverContent>\n      <div className=\"px-1 py-2\">\n        <div className=\"text-small font-bold\">Popover Content</div>\n        <div className=\"text-tiny\">This is the popover content</div>\n      </div>\n    </PopoverContent>\n  );\n\n  const variants = [\"solid\", \"bordered\", \"flat\", \"faded\", \"shadow\"];\n\n  return (\n    <div className=\"flex gap-2\">\n      {variants.map((variant) => (\n        <Popover key={variant} placement=\"top\" variant={variant}>\n          <PopoverTrigger>\n            <Button className=\"capitalize\" variant={variant}>\n              {variant}\n            </Button>\n          </PopoverTrigger>\n          {content}\n        </Popover>\n      ))}\n    </div>\n  );\n}\n`;var ce={\"/App.jsx\":B},k={...ce};var I=`import {Popover, PopoverTrigger, PopoverContent, Button} from \"@heroui/react\";\n\nexport default function App() {\n  const content = (\n    <PopoverContent>\n      <div className=\"px-1 py-2\">\n        <div className=\"text-small font-bold\">Popover Content</div>\n        <div className=\"text-tiny\">This is the popover content</div>\n      </div>\n    </PopoverContent>\n  );\n\n  const placements = [\n    \"top-start\",\n    \"top\",\n    \"top-end\",\n    \"bottom-start\",\n    \"bottom\",\n    \"bottom-end\",\n    \"right-start\",\n    \"right\",\n    \"right-end\",\n    \"left-start\",\n    \"left\",\n    \"left-end\",\n  ];\n\n  return (\n    <div className=\"flex flex-wrap md:inline-grid md:grid-cols-3 gap-4\">\n      {placements.map((placement) => (\n        <Popover key={placement} color=\"secondary\" placement={placement}>\n          <PopoverTrigger>\n            <Button className=\"capitalize\" color=\"secondary\" variant=\"flat\">\n              {placement.replace(\"-\", \" \")}\n            </Button>\n          </PopoverTrigger>\n          {content}\n        </Popover>\n      ))}\n    </div>\n  );\n}\n`;var ue={\"/App.jsx\":I},O={...ue};var F=`import {Popover, PopoverTrigger, PopoverContent, Button} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <Popover placement=\"right\">\n      <PopoverTrigger>\n        <Button>Open Popover</Button>\n      </PopoverTrigger>\n      <PopoverContent>\n        {(titleProps) => (\n          <div className=\"px-1 py-2\">\n            <h3 className=\"text-small font-bold\" {...titleProps}>\n              Popover Content\n            </h3>\n            <div className=\"text-tiny\">This is the popover content</div>\n          </div>\n        )}\n      </PopoverContent>\n    </Popover>\n  );\n}\n`;var ve={\"/App.jsx\":F},j={...ve};var M=`import {Popover, PopoverTrigger, PopoverContent, Button, Input} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <Popover showArrow offset={10} placement=\"bottom\">\n      <PopoverTrigger>\n        <Button color=\"primary\">Customize</Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-[240px]\">\n        {(titleProps) => (\n          <div className=\"px-1 py-2 w-full\">\n            <p className=\"text-small font-bold text-foreground\" {...titleProps}>\n              Dimensions\n            </p>\n            <div className=\"mt-2 flex flex-col gap-2 w-full\">\n              <Input defaultValue=\"100%\" label=\"Width\" size=\"sm\" variant=\"bordered\" />\n              <Input defaultValue=\"300px\" label=\"Max. width\" size=\"sm\" variant=\"bordered\" />\n              <Input defaultValue=\"24px\" label=\"Height\" size=\"sm\" variant=\"bordered\" />\n              <Input defaultValue=\"30px\" label=\"Max. height\" size=\"sm\" variant=\"bordered\" />\n            </div>\n          </div>\n        )}\n      </PopoverContent>\n    </Popover>\n  );\n}\n`;var ge={\"/App.jsx\":M},W={...ge};var z=`import {Popover, PopoverTrigger, PopoverContent, Button, Input} from \"@heroui/react\";\n\nexport default function App() {\n  const backdrops = [\"opaque\", \"blur\", \"transparent\"];\n\n  const content = (\n    <PopoverContent className=\"w-[240px]\">\n      {(titleProps) => (\n        <div className=\"px-1 py-2 w-full\">\n          <p className=\"text-small font-bold text-foreground\" {...titleProps}>\n            Dimensions\n          </p>\n          <div className=\"mt-2 flex flex-col gap-2 w-full\">\n            <Input defaultValue=\"100%\" label=\"Width\" size=\"sm\" variant=\"bordered\" />\n            <Input defaultValue=\"300px\" label=\"Max. width\" size=\"sm\" variant=\"bordered\" />\n            <Input defaultValue=\"24px\" label=\"Height\" size=\"sm\" variant=\"bordered\" />\n            <Input defaultValue=\"30px\" label=\"Max. height\" size=\"sm\" variant=\"bordered\" />\n          </div>\n        </div>\n      )}\n    </PopoverContent>\n  );\n\n  return (\n    <div className=\"flex flex-wrap gap-4\">\n      {backdrops.map((backdrop) => (\n        <Popover key={backdrop} showArrow backdrop={backdrop} offset={10} placement=\"bottom\">\n          <PopoverTrigger>\n            <Button className=\"capitalize\" color=\"warning\" variant=\"flat\">\n              {backdrop}\n            </Button>\n          </PopoverTrigger>\n          {content}\n        </Popover>\n      ))}\n    </div>\n  );\n}\n`;var be={\"/App.jsx\":z},S={...be};var H=`import {Popover, PopoverTrigger, PopoverContent, Button} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <Popover\n      showArrow\n      motionProps={{\n        variants: {\n          enter: {\n            y: 0,\n            opacity: 1,\n            duration: 0.1,\n            transition: {\n              opacity: {\n                duration: 0.15,\n              },\n            },\n          },\n          exit: {\n            y: \"10%\",\n            opacity: 0,\n            duration: 0,\n            transition: {\n              opacity: {\n                duration: 0.1,\n              },\n            },\n          },\n        },\n      }}\n      offset={10}\n      placement=\"bottom\"\n    >\n      <PopoverTrigger>\n        <Button>Open Popover</Button>\n      </PopoverTrigger>\n      <PopoverContent>\n        <div className=\"px-1 py-2\">\n          <div className=\"text-small font-bold\">Popover Content</div>\n          <div className=\"text-tiny\">This is the popover content</div>\n        </div>\n      </PopoverContent>\n    </Popover>\n  );\n}\n`;var ye={\"/App.jsx\":H},R={...ye};var D=`import {\n  Avatar,\n  Button,\n  Card,\n  CardBody,\n  CardFooter,\n  CardHeader,\n  Popover,\n  PopoverTrigger,\n  PopoverContent,\n  Button,\n  User,\n} from \"@heroui/react\";\n\nexport const UserTwitterCard = () => {\n  const [isFollowed, setIsFollowed] = React.useState(false);\n\n  return (\n    <Card className=\"max-w-[300px] border-none bg-transparent\" shadow=\"none\">\n      <CardHeader className=\"justify-between\">\n        <div className=\"flex gap-3\">\n          <Avatar\n            isBordered\n            radius=\"full\"\n            size=\"md\"\n            src=\"https://i.pravatar.cc/150?u=a04258114e29026702d\"\n          />\n          <div className=\"flex flex-col items-start justify-center\">\n            <h4 className=\"text-small font-semibold leading-none text-default-600\">Zoey Lang</h4>\n            <h5 className=\"text-small tracking-tight text-default-500\">@zoeylang</h5>\n          </div>\n        </div>\n        <Button\n          className={isFollowed ? \"bg-transparent text-foreground border-default-200\" : \"\"}\n          color=\"primary\"\n          radius=\"full\"\n          size=\"sm\"\n          variant={isFollowed ? \"bordered\" : \"solid\"}\n          onPress={() => setIsFollowed(!isFollowed)}\n        >\n          {isFollowed ? \"Unfollow\" : \"Follow\"}\n        </Button>\n      </CardHeader>\n      <CardBody className=\"px-3 py-0\">\n        <p className=\"text-small pl-px text-default-500\">\n          Full-stack developer, @hero_ui lover she/her\n          <span aria-label=\"confetti\" role=\"img\">\n            \\u{1F389}\n          </span>\n        </p>\n      </CardBody>\n      <CardFooter className=\"gap-3\">\n        <div className=\"flex gap-1\">\n          <p className=\"font-semibold text-default-600 text-small\">4</p>\n          <p className=\" text-default-500 text-small\">Following</p>\n        </div>\n        <div className=\"flex gap-1\">\n          <p className=\"font-semibold text-default-600 text-small\">97.1K</p>\n          <p className=\"text-default-500 text-small\">Followers</p>\n        </div>\n      </CardFooter>\n    </Card>\n  );\n};\n\nexport default function App() {\n  return (\n    <Popover showArrow placement=\"bottom\">\n      <PopoverTrigger>\n        <User\n          as=\"button\"\n          avatarProps={{\n            src: \"https://i.pravatar.cc/150?u=a04258114e29026702d\",\n          }}\n          className=\"transition-transform\"\n          description=\"Product Designer\"\n          name=\"Zoe Lang\"\n        />\n      </PopoverTrigger>\n      <PopoverContent className=\"p-1\">\n        <UserTwitterCard />\n      </PopoverContent>\n    </Popover>\n  );\n}\n`;var we={\"/App.jsx\":D},L={...we};var _=`import {Popover, PopoverTrigger, PopoverContent, Button} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <Popover\n      showArrow\n      backdrop=\"opaque\"\n      classNames={{\n        base: [\n          // arrow color\n          \"before:bg-default-200\",\n        ],\n        content: [\n          \"py-3 px-4 border border-default-200\",\n          \"bg-gradient-to-br from-white to-default-300\",\n          \"dark:from-default-100 dark:to-default-50\",\n        ],\n      }}\n      placement=\"right\"\n    >\n      <PopoverTrigger>\n        <Button>Open Popover</Button>\n      </PopoverTrigger>\n      <PopoverContent>\n        {(titleProps) => (\n          <div className=\"px-1 py-2\">\n            <h3 className=\"text-small font-bold\" {...titleProps}>\n              Popover Content\n            </h3>\n            <div className=\"text-tiny\">This is the popover content</div>\n          </div>\n        )}\n      </PopoverContent>\n    </Popover>\n  );\n}\n`;var Ne={\"/App.jsx\":_},q={...Ne};var i={usage:P,arrow:x,offset:T,colors:C,controlled:A,variants:k,placements:O,titleProps:j,withForm:W,backdrop:S,customMotion:R,customTrigger:L,customStyles:q};var Ae={title:\"Popover\",description:\"Popover is a non-modal dialog that floats around its disclosure. It's commonly used for displaying additional rich content on top of something.\"};function U(t){let o={a:\"a\",blockquote:\"blockquote\",code:\"code\",h1:\"h1\",h2:\"h2\",h3:\"h3\",h4:\"h4\",hr:\"hr\",li:\"li\",p:\"p\",pre:\"pre\",strong:\"strong\",ul:\"ul\",...t.components},{APITable:n,CarbonAd:a,CodeDemo:r,ComponentLinks:d,ImportTabs:c,Kbd:h,PackageManagers:u,Spacer:s}=o;return n||p(\"APITable\",!0),a||p(\"CarbonAd\",!0),r||p(\"CodeDemo\",!0),d||p(\"ComponentLinks\",!0),c||p(\"ImportTabs\",!0),h||p(\"Kbd\",!0),u||p(\"PackageManagers\",!0),s||p(\"Spacer\",!0),(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(o.h1,{id:\"popover\",children:\"Popover\"}),`\n`,(0,e.jsxs)(o.p,{children:[\"Popover is a \",(0,e.jsx)(o.strong,{children:\"non-modal\"}),` dialog that floats around its disclosure. It's commonly used for displaying\nadditional rich content on top of something.`]}),`\n`,(0,e.jsx)(d,{component:\"popover\",reactAriaHook:\"usePopover\"}),`\n`,(0,e.jsx)(o.hr,{}),`\n`,(0,e.jsx)(a,{}),`\n`,(0,e.jsx)(o.h2,{id:\"installation\",children:\"Installation\"}),`\n`,(0,e.jsx)(u,{showGlobalInstallWarning:!0,commands:{cli:\"npx heroui-cli@latest add popover\",npm:\"npm install @heroui/popover\",yarn:\"yarn add @heroui/popover\",pnpm:\"pnpm add @heroui/popover\",bun:\"bun add @heroui/popover\"}}),`\n`,(0,e.jsx)(o.h2,{id:\"import\",children:\"Import\"}),`\n`,(0,e.jsx)(o.p,{children:\"HeroUI exports 3 popover-related components:\"}),`\n`,(0,e.jsxs)(o.ul,{children:[`\n`,(0,e.jsxs)(o.li,{children:[(0,e.jsx)(o.strong,{children:\"Popover\"}),\": The main component to display a popover.\"]}),`\n`,(0,e.jsxs)(o.li,{children:[(0,e.jsx)(o.strong,{children:\"PopoverTrigger\"}),\": The component that triggers the popover.\"]}),`\n`,(0,e.jsxs)(o.li,{children:[(0,e.jsx)(o.strong,{children:\"PopoverContent\"}),\": The component that contains the popover content.\"]}),`\n`]}),`\n`,(0,e.jsx)(c,{commands:{main:'import {Popover, PopoverTrigger, PopoverContent} from \"@heroui/react\";',individual:'import {Popover, PopoverTrigger, PopoverContent} from \"@heroui/popover\";'}}),`\n`,(0,e.jsx)(o.h2,{id:\"usage\",children:\"Usage\"}),`\n`,(0,e.jsx)(r,{title:\"Usage\",files:i.usage}),`\n`,(0,e.jsx)(o.h3,{id:\"with-arrow\",children:\"With Arrow\"}),`\n`,(0,e.jsx)(r,{title:\"With Arrow\",files:i.arrow}),`\n`,(0,e.jsx)(o.h3,{id:\"colors\",children:\"Colors\"}),`\n`,(0,e.jsx)(r,{title:\"Colors\",files:i.colors}),`\n`,(0,e.jsx)(o.h3,{id:\"placements\",children:\"Placements\"}),`\n`,(0,e.jsx)(r,{title:\"Placements\",files:i.placements}),`\n`,(0,e.jsx)(o.h3,{id:\"offset\",children:\"Offset\"}),`\n`,(0,e.jsx)(r,{title:\"Offset\",files:i.offset}),`\n`,(0,e.jsx)(o.h3,{id:\"controlled\",children:\"Controlled\"}),`\n`,(0,e.jsx)(r,{title:\"Controlled\",files:i.controlled}),`\n`,(0,e.jsx)(o.h3,{id:\"title-props\",children:\"Title Props\"}),`\n`,(0,e.jsxs)(o.p,{children:[`To be sure that the popover exposes the correct title to assistive technologies, you should use the\n`,(0,e.jsx)(o.code,{children:\"titleProps\"}),\" prop on the \",(0,e.jsx)(o.code,{children:\"PopoverContent\"}),\" component. To use this prop, you must pass a function as a child.\"]}),`\n`,(0,e.jsx)(r,{title:\"Title Props\",files:i.titleProps}),`\n`,(0,e.jsx)(o.h3,{id:\"with-form\",children:\"With Form\"}),`\n`,(0,e.jsxs)(o.p,{children:[\"The \",(0,e.jsx)(o.code,{children:\"Popover\"}),` handles the focus within the popover content. It means that you can use the popover with\nform elements without any problem. the focus returns to the trigger when the popover closes.`]}),`\n`,(0,e.jsx)(r,{title:\"With Form\",files:i.withForm}),`\n`,(0,e.jsxs)(o.blockquote,{children:[`\n`,(0,e.jsxs)(o.p,{children:[(0,e.jsx)(o.strong,{children:\"Note\"}),\": You can add the \",(0,e.jsx)(o.code,{children:\"autoFocus\"}),\" prop to the first \",(0,e.jsx)(o.code,{children:\"Input\"}),\" component to focus it when the popover opens.\"]}),`\n`]}),`\n`,(0,e.jsx)(o.h3,{id:\"backdrop\",children:\"Backdrop\"}),`\n`,(0,e.jsxs)(o.p,{children:[\"The \",(0,e.jsx)(o.code,{children:\"Popover\"}),\" component has a \",(0,e.jsx)(o.code,{children:\"backdrop\"}),` prop to show a backdrop behind the popover. The backdrop can be\neither `,(0,e.jsx)(o.code,{children:\"transparent\"}),\", \",(0,e.jsx)(o.code,{children:\"opaque\"}),\" or \",(0,e.jsx)(o.code,{children:\"blur\"}),\". The default value is \",(0,e.jsx)(o.code,{children:\"transparent\"}),\".\"]}),`\n`,(0,e.jsx)(r,{title:\"Backdrop\",files:i.backdrop}),`\n`,(0,e.jsx)(o.h3,{id:\"custom-motion\",children:\"Custom Motion\"}),`\n`,(0,e.jsxs)(o.p,{children:[\"Popover offers a \",(0,e.jsx)(o.code,{children:\"motionProps\"}),\" property to customize the \",(0,e.jsx)(o.code,{children:\"enter\"}),\" / \",(0,e.jsx)(o.code,{children:\"exit\"}),\" animation.\"]}),`\n`,(0,e.jsx)(r,{title:\"Custom Motion\",files:i.customMotion}),`\n`,(0,e.jsxs)(o.blockquote,{children:[`\n`,(0,e.jsxs)(o.p,{children:[\"Learn more about Framer motion variants \",(0,e.jsx)(o.a,{href:\"https://www.framer.com/motion/animation/#variants\",children:\"here\"}),\".\"]}),`\n`]}),`\n`,(0,e.jsx)(o.h3,{id:\"custom-trigger\",children:\"Custom Trigger\"}),`\n`,(0,e.jsx)(r,{title:\"Custom Trigger\",files:i.customTrigger}),`\n`,(0,e.jsx)(o.h2,{id:\"slots\",children:\"Slots\"}),`\n`,(0,e.jsxs)(o.ul,{children:[`\n`,(0,e.jsxs)(o.li,{children:[(0,e.jsx)(o.strong,{children:\"base\"}),\": The main popover slot, it wraps the popover content and contains the arrow as a pseudo-element (::before).\"]}),`\n`,(0,e.jsxs)(o.li,{children:[(0,e.jsx)(o.strong,{children:\"trigger\"}),\": The popover trigger slot, it has small styles to ensure the trigger works correctly.\"]}),`\n`,(0,e.jsxs)(o.li,{children:[(0,e.jsx)(o.strong,{children:\"backdrop\"}),\": The backdrop slot, it contains the backdrop styles.\"]}),`\n`,(0,e.jsxs)(o.li,{children:[(0,e.jsx)(o.strong,{children:\"content\"}),\": The content slot, it contains the popover content.\"]}),`\n`]}),`\n`,(0,e.jsx)(o.h3,{id:\"custom-styles\",children:\"Custom Styles\"}),`\n`,(0,e.jsxs)(o.p,{children:[\"You can customize the \",(0,e.jsx)(o.code,{children:\"Popover\"}),\" component by passing custom Tailwind CSS classes to the component slots.\"]}),`\n`,(0,e.jsx)(r,{title:\"Custom Styles\",files:i.customStyles}),`\n`,(0,e.jsx)(s,{y:4}),`\n`,(0,e.jsx)(o.h2,{id:\"data-attributes\",children:\"Data Attributes\"}),`\n`,(0,e.jsxs)(o.p,{children:[(0,e.jsx)(o.code,{children:\"Popover\"}),\" has the following attributes on the \",(0,e.jsx)(o.code,{children:\"PopoverContent\"}),\" element:\"]}),`\n`,(0,e.jsxs)(o.ul,{children:[`\n`,(0,e.jsxs)(o.li,{children:[(0,e.jsx)(o.strong,{children:\"data-open\"}),`:\nWhen the popover is open. Based on popover state.`]}),`\n`,(0,e.jsxs)(o.li,{children:[(0,e.jsx)(o.strong,{children:\"data-placement\"}),`:\nThe placement of the popover. Based on `,(0,e.jsx)(o.code,{children:\"placement\"}),\" prop. The arrow element is positioned based on this attribute.\"]}),`\n`,(0,e.jsxs)(o.li,{children:[(0,e.jsx)(o.strong,{children:\"data-focus\"}),`:\nWhen the popover is being focused. Based on `,(0,e.jsx)(o.a,{href:\"https://react-spectrum.adobe.com/react-aria/useFocusRing.html\",children:\"useFocusRing\"}),\".\"]}),`\n`,(0,e.jsxs)(o.li,{children:[(0,e.jsx)(o.strong,{children:\"data-focus-visible\"}),`:\nWhen the popover is being focused with the keyboard. Based on `,(0,e.jsx)(o.a,{href:\"https://react-spectrum.adobe.com/react-aria/useFocusRing.html\",children:\"useFocusRing\"}),\".\"]}),`\n`]}),`\n`,(0,e.jsx)(s,{y:4}),`\n`,(0,e.jsx)(o.h2,{id:\"accessibility\",children:\"Accessibility\"}),`\n`,(0,e.jsxs)(o.ul,{children:[`\n`,(0,e.jsx)(o.li,{children:\"The trigger and popover are automatically associated semantically via ARIA.\"}),`\n`,(0,e.jsx)(o.li,{children:\"Content outside the popover is hidden from assistive technologies while it is open.\"}),`\n`,(0,e.jsxs)(o.li,{children:[\"The popover closes when interacting outside, or pressing the \",(0,e.jsx)(h,{children:\"Escape\"}),\" key.\"]}),`\n`,(0,e.jsx)(o.li,{children:\"Focus is moved into the popover on mount, and restored to the trigger element on unmount.\"}),`\n`,(0,e.jsx)(o.li,{children:\"The popover is positioned relative to the trigger element, and automatically flips and adjusts to avoid overlapping with the edge of the browser window.\"}),`\n`,(0,e.jsx)(o.li,{children:\"Scrolling is prevented outside the popover to avoid unintentionally repositioning or closing it.\"}),`\n`]}),`\n`,(0,e.jsx)(s,{y:4}),`\n`,(0,e.jsx)(o.h2,{id:\"api\",children:\"API\"}),`\n`,(0,e.jsx)(o.h3,{id:\"popover-props\",children:\"Popover Props\"}),`\n`,(0,e.jsx)(n,{data:[{attribute:\"children*\",type:\"ReactNode[]\",description:\"The content of the popover. It's usually the PopoverTrigger and PopoverContent.\",default:\"-\"},{attribute:\"size\",type:\"sm | md | lg\",description:\"The popover content font size.\",default:\"md\"},{attribute:\"color\",type:\"default | primary | secondary | success | warning | danger\",description:\"The popover color theme.\",default:\"default\"},{attribute:\"radius\",type:\"none | sm | md | lg | full\",description:\"The popover border radius.\",default:\"lg\"},{attribute:\"shadow\",type:\"none | sm | md | lg\",description:\"The popover shadow.\",default:\"lg\"},{attribute:\"backdrop\",type:\"transparent | opaque | blur\",description:\"The popover backdrop type.\",default:\"transparent\"},{attribute:\"placement\",type:\"PopoverPlacement\",description:\"The placement of the popover relative to its trigger reference.\",default:\"bottom\"},{attribute:\"state\",type:\"OverlayTriggerState\",description:\"The controlled state of the popover.\",default:\"-\"},{attribute:\"isOpen\",type:\"boolean\",description:\"Whether the popover is open by default (controlled).\",default:\"-\"},{attribute:\"defaultOpen\",type:\"boolean\",description:\"Whether the popover is open by default (uncontrolled).\",default:\"-\"},{attribute:\"offset\",type:\"number\",description:\"The distance or margin between the reference and popper.\",default:\"7\"},{attribute:\"containerPadding\",type:\"number\",description:\"The placement padding between the element and its surrounding container.\",default:\"12\"},{attribute:\"crossOffset\",type:\"number\",description:\"The additional offset applied along the cross axis between the element and its anchor element.\",default:\"0\"},{attribute:\"triggerType\",type:\"dialog | menu | listbox | tree | grid\",description:\"Type of popover that is opened by the trigger.\",default:\"dialog\"},{attribute:\"showArrow\",type:\"boolean\",description:\"Whether the popover should have an arrow.\",default:\"false\"},{attribute:\"shouldFlip\",type:\"boolean\",description:\"Whether the popover should change its placement and flip when it's about to overflow.\",default:\"true\"},{attribute:\"triggerScaleOnOpen\",type:\"boolean\",description:\"Whether the trigger should scale down when the popover is open.\",default:\"true\"},{attribute:\"shouldBlockScroll\",type:\"boolean\",description:\"Whether the popover should block the scroll outside the popover.\",default:\"false\"},{attribute:\"shouldCloseOnScroll\",type:\"boolean\",description:\"Whether the popover should close on scroll.\",default:\"false\"},{attribute:\"isKeyboardDismissDisabled\",type:\"boolean\",description:\"Whether pressing the escape key to close the popover should be disabled.\",default:\"false\"},{attribute:\"shouldCloseOnBlur\",type:\"boolean\",description:\"Whether the popover should close when focus is lost or moves outside it.\",default:\"false\"},{attribute:\"motionProps\",type:\"MotionProps\",description:\"The props to modify the framer motion animation.\",default:\"-\"},{attribute:\"portalContainer\",type:\"HTMLElement\",description:\"The container element in which the overlay portal will be placed.\",default:\"document.body\"},{attribute:\"disableAnimation\",type:\"boolean\",description:\"Whether the popover is animated.\",default:\"false\"},{attribute:\"classNames\",type:\"Partial<Record<'base' | 'trigger' | 'backdrop' | 'content', string>>\",description:\"Allows to set custom class names for the popover slots.\",default:\"-\"}]}),`\n`,(0,e.jsx)(o.h3,{id:\"popover-events\",children:\"Popover Events\"}),`\n`,(0,e.jsx)(n,{data:[{attribute:\"onOpenChange\",type:\"(isOpen: boolean) => void\",description:\"Handler that is called when the popover's open state changes.\",default:\"-\"},{attribute:\"shouldCloseOnInteractOutside\",type:\"(e: HTMLElement) => void\",description:\"When user interacts with the argument element outside of the popover ref, return true if onClose should be called.\",default:\"-\"},{attribute:\"onClose\",type:\"() => void\",description:\"Handler that is called when the popover should close.\",default:\"-\"}]}),`\n`,(0,e.jsx)(o.h3,{id:\"popovertrigger-props\",children:\"PopoverTrigger Props\"}),`\n`,(0,e.jsx)(n,{data:[{attribute:\"children*\",type:\"ReactNode\",description:\"The popover trigger component, ensure the children passed is focusable.\",default:\"-\"}]}),`\n`,(0,e.jsx)(o.h3,{id:\"popovercontent-props\",children:\"PopoverContent Props\"}),`\n`,(0,e.jsx)(n,{data:[{attribute:\"children\",type:\"ReactNode\",description:\"The content that is displayed when the trigger is pressed.\",default:\"-\"}]}),`\n`,(0,e.jsx)(o.h3,{id:\"popover-types\",children:\"Popover types\"}),`\n`,(0,e.jsx)(s,{y:1}),`\n`,(0,e.jsx)(o.h4,{id:\"popover-placement\",children:\"Popover Placement\"}),`\n`,(0,e.jsx)(o.pre,{children:(0,e.jsx)(o.code,{className:\"language-ts\",children:`type PopoverPlacement =\n  | \"top\"\n  | \"bottom\"\n  | \"right\"\n  | \"left\"\n  | \"top-start\"\n  | \"top-end\"\n  | \"bottom-start\"\n  | \"bottom-end\"\n  | \"left-start\"\n  | \"left-end\"\n  | \"right-start\"\n  | \"right-end\";\n`})}),`\n`,(0,e.jsx)(o.h4,{id:\"motion-props\",children:\"Motion Props\"}),`\n`,(0,e.jsx)(o.pre,{children:(0,e.jsx)(o.code,{className:\"language-ts\",children:`export type MotionProps = HTMLMotionProps<\"div\">; // @see https://www.framer.com/motion/\n`})})]})}function V(t={}){let{wrapper:o}=t.components||{};return o?(0,e.jsx)(o,{...t,children:(0,e.jsx)(U,{...t})}):U(t)}function p(t,o){throw new Error(\"Expected \"+(o?\"component\":\"object\")+\" `\"+t+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return $(Be);})();\n;return Component;"
  },
  "_id": "docs/components/popover.mdx",
  "_raw": {
    "sourceFilePath": "docs/components/popover.mdx",
    "sourceFileName": "popover.mdx",
    "sourceFileDir": "docs/components",
    "contentType": "mdx",
    "flattenedPath": "docs/components/popover"
  },
  "type": "Doc",
  "slug": "/docs/components/popover",
  "slugAsParams": "components/popover",
  "url": "/docs/components/popover"
}