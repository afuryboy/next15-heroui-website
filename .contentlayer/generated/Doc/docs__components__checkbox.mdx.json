{
  "title": "Checkbox",
  "description": "Checkboxes allow users to select multiple items from a list of individual items, or to mark one individual item as selected.",
  "body": {
    "raw": "\nimport {checkboxContent} from \"@/content/components/checkbox\";\n\n# Checkbox\n\nCheckboxes allow users to select multiple items from a list of individual items, or to mark one individual item as selected.\n\n<ComponentLinks component=\"checkbox\" reactAriaHook=\"useCheckbox\" />\n\n---\n\n<CarbonAd/>\n\n## Installation\n\n<PackageManagers\n  showGlobalInstallWarning\n  commands={{\n    cli: \"npx heroui-cli@latest add checkbox\",\n    npm: \"npm install @heroui/checkbox\",\n    yarn: \"yarn add @heroui/checkbox\",\n    pnpm: \"pnpm add @heroui/checkbox\",\n    bun: \"bun add @heroui/checkbox\"\n  }}\n/>\n\n\n## Import\n\n<ImportTabs\n  commands={{\n    main: 'import {Checkbox} from \"@heroui/react\";',\n    individual: 'import {Checkbox} from \"@heroui/checkbox\";',\n  }}\n/>\n\n## Usage\n\n<CodeDemo title=\"Usage\" files={checkboxContent.usage} />\n\n### Disabled\n\n<CodeDemo title=\"Disabled\" files={checkboxContent.disabled} />\n\n### Sizes\n\n<CodeDemo title=\"Sizes\" files={checkboxContent.sizes} />\n\n### Colors\n\n<CodeDemo title=\"Colors\" files={checkboxContent.colors} />\n\n### Radius\n\n<CodeDemo title=\"Radius\" files={checkboxContent.radius} />\n\n### Indeterminate\n\nThe `isIndeterminate` prop sets a `Checkbox` to an indeterminate state, overriding its appearance and maintaining it until set to `false`, regardless of user interaction.\n\n<CodeDemo title=\"Indeterminate\" files={checkboxContent.indeterminate} />\n\n### Line Through\n\n<CodeDemo title=\"Line Through\" files={checkboxContent.lineThrough} />\n\n### Custom Check Icon\n\n> By default, `IconProps` will be passed to your icon component.  Please make sure that `isSelected`, `isIndeterminate`, and `disableAnimation` are not passed to a DOM element.\n\n<CodeDemo title=\"Custom Check Icon\" files={checkboxContent.customCheckIcon} />\n\n### Controlled\n\n<CodeDemo title=\"Controlled Checkbox\" files={checkboxContent.controlled} />\n\n> **Note**: HeroUI `Checkbox` also supports native events like `onChange`, useful for form libraries\n> such as [Formik](https://formik.org/) and [React Hook Form](https://react-hook-form.com/).\n\n## Slots\n\n- **base**: Checkbox wrapper, it handles alignment, placement, and general appearance.\n- **wrapper**: An inner container that includes styles for relative positioning, flex properties, overflow handling and managing hover and selected states.\n- **hiddenInput**: The hidden input element that is used to handle the checkbox state.\n- **icon**: Icon within the checkbox, controlling size, visibility, and changes when checked.\n- **label**: The text associated with the checkbox.\n\n### Custom Styles\n\nYou can customize the `Checkbox` component by passing custom Tailwind CSS classes to the component slots.\n\n<CodeDemo title=\"Custom Styles\" files={checkboxContent.customStyles} />\n\n### Custom Implementation\n\nIn case you need to customize the checkbox even further, you can use the `useCheckbox` hook to create your own implementation.\n\n<CodeDemo title=\"Custom Implementation\" files={checkboxContent.customImplementation} />\n\n> **Note**: We used [Tailwind Variants](https://www.tailwind-variants.org/) to implement the styles above, you can use any other library such as [clsx](https://www.npmjs.com/package/clsx) to achieve the same result.\n\n<Spacer y={4} />\n\n## Data Attributes\n\n`Checkbox` has the following attributes on the `base` element:\n\n- **data-selected**:\n  When the checkbox is checked. Based on `isSelected` prop.\n- **data-pressed**:\n  When the checkbox is pressed. Based on [usePress](https://react-spectrum.adobe.com/react-aria/usePress.html)\n- **data-invalid**:\n  When the checkbox is invalid. Based on `validationState` prop.\n- **data-readonly**:\n  When the checkbox is readonly. Based on `isReadOnly` prop.\n- **data-indeterminate**:\n  When the checkbox is indeterminate. Based on `isIndeterminate` prop.\n- **data-hover**:\n  When the checkbox is being hovered. Based on [useHover](https://react-spectrum.adobe.com/react-aria/useHover.html)\n- **data-focus**:\n  When the checkbox is being focused. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).\n- **data-focus-visible**:\n  When the checkbox is being focused with the keyboard. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).\n- **data-disabled**:\n  When the checkbox is disabled. Based on `isDisabled` prop.\n- **data-loading**:\n  When the checkbox is loading. Based on `isLoading` prop.\n\n<Spacer y={4} />\n\n## Accessibility\n\n- Built with a native HTML `<input>` element.\n- Full support for browser features like form autofill.\n- Keyboard focus management and cross browser normalization.\n- Keyboard event support for <Kbd>Tab</Kbd> and <Kbd>Space</Kbd> keys.\n- Labeling support for assistive technology.\n- Indeterminate state support.\n\n<Spacer y={4} />\n\n## API\n\n### Checkbox Props\n\n<APITable\n  data={[\n    {\n      attribute: \"children\",\n      type: \"ReactNode\",\n      description: \"The label of the checkbox.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"icon\",\n      type: \"CheckboxIconProps\",\n      description: \"The icon to be displayed when the checkbox is checked.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"value\",\n      type: \"string\",\n      description: \"The value of the checkbox element, used when submitting an HTML form.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"name\",\n      type: \"string\",\n      description: \"The name of the checkbox element, used when submitting an HTML form.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"size\",\n      type: \"sm | md | lg\",\n      description: \"The size of the checkbox.\",\n      default: \"md\"\n    },\n    {\n      attribute: \"color\",\n      type: \"default | primary | secondary | success | warning | danger\",\n      description: \"The color of the checkbox.\",\n      default: \"primary\"\n    },\n    {\n      attribute: \"radius\",\n      type: \"none | sm | md | lg | full\",\n      description: \"The radius of the checkbox.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"lineThrough\",\n      type: \"boolean\",\n      description: \"Whether the label should be crossed out.\",\n      default: \"false\"\n    },\n    {\n      attribute: \"isSelected\",\n      type: \"boolean\",\n      description: \"Whether the element should be selected (controlled).\",\n      default: \"-\"\n    },\n    {\n      attribute: \"defaultSelected\",\n      type: \"boolean\",\n      description: \"Whether the element should be selected (uncontrolled).\",\n      default: \"-\"\n    },\n    {\n      attribute: \"isRequired\",\n      type: \"boolean\",\n      description: \"Whether user checkbox is required on the checkbox before form submission.\",\n      default: \"false\"\n    },\n    {\n      attribute: \"isReadOnly\",\n      type: \"boolean\",\n      description: \"Whether the checkbox can be selected but not changed by the user.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"isDisabled\",\n      type: \"boolean\",\n      description: \"Whether the checkbox is disabled.\",\n      default: \"false\"\n    },\n    {\n      attribute: \"isIndeterminate\",\n      type: \"boolean\",\n      description: \"Indeterminism is presentational only. The indeterminate visual representation remains regardless of user interaction.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"isInvalid\",\n      type: \"boolean\",\n      description: \"Whether the checkbox is invalid.\",\n      default: \"false\"\n    },\n    {\n      attribute: \"validationState\",\n      type: \"valid | invalid\",\n      description: \"Whether the checkbox should display its \\\"valid\\\" or \\\"invalid\\\" visual styling. (Deprecated) use isInvalid instead.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"disableAnimation\",\n      type: \"boolean\",\n      description: \"Whether the animation should be disabled.\",\n      default: \"false\"\n    },\n    {\n      attribute: \"classNames\",\n      type: \"Partial<Record<\\\"base\\\"｜ \\\"wrapper\\\"｜ \\\"icon\\\"｜ \\\"label\\\", string>>\",\n      description: \"Allows to set custom class names for the checkbox slots.\",\n      default: \"-\"\n    }\n  ]}\n/>\n\n### Checkbox Events\n\n<APITable\n  data={[\n    {\n      attribute: \"onChange\",\n      type: \"React.ChangeEvent<HTMLInputElement>\",\n      description: \"Handler that is called when the element's selection state changes. You can pull out the new checked state by accessing event.target.checked (boolean).\",\n      default: \"-\"\n    },\n    {\n      attribute: \"onValueChange\",\n      type: \"(isSelected: boolean) => void\",\n      description: \"Handler that is called when the element's selection state changes.\",\n      default: \"-\"\n    }\n  ]}\n/>\n\n### Types\n\n#### Checkbox Icon Props\n\n```ts\ntype IconProps = {\n  \"data-checked\": string;\n  isSelected: boolean;\n  isIndeterminate: boolean;\n  disableAnimation: boolean;\n  className: string;\n};\n\ntype CheckboxIconProps = ReactNode | ((props: IconProps) => ReactNode);\n```\n",
    "code": "var Component=(()=>{var V=Object.create;var l=Object.defineProperty;var _=Object.getOwnPropertyDescriptor;var q=Object.getOwnPropertyNames;var E=Object.getPrototypeOf,U=Object.prototype.hasOwnProperty;var K=(o,t)=>()=>(t||o((t={exports:{}}).exports,t),t.exports),G=(o,t)=>{for(var i in t)l(o,i,{get:t[i],enumerable:!0})},m=(o,t,i,c)=>{if(t&&typeof t==\"object\"||typeof t==\"function\")for(let n of q(t))!U.call(o,n)&&n!==i&&l(o,n,{get:()=>t[n],enumerable:!(c=_(t,n))||c.enumerable});return o};var X=(o,t,i)=>(i=o!=null?V(E(o)):{},m(t||!o||!o.__esModule?l(i,\"default\",{value:o,enumerable:!0}):i,o)),Y=o=>m(l({},\"__esModule\",{value:!0}),o);var f=K((ve,b)=>{b.exports=_jsx_runtime});var ge={};G(ge,{default:()=>O,frontmatter:()=>ke});var e=X(f());var x=`import {Checkbox} from \"@heroui/react\";\n\nexport default function App() {\n  return <Checkbox defaultSelected>Option</Checkbox>;\n}\n`;var Z={\"/App.jsx\":x},k={...Z};var g=`import {Checkbox} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <div className=\"flex gap-4\">\n      <Checkbox defaultSelected size=\"sm\">\n        Small\n      </Checkbox>\n      <Checkbox defaultSelected size=\"md\">\n        Medium\n      </Checkbox>\n      <Checkbox defaultSelected size=\"lg\">\n        Large\n      </Checkbox>\n    </div>\n  );\n}\n`;var $={\"/App.jsx\":g},C={...$};var v=`import {Checkbox} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <div className=\"flex gap-4\">\n      <Checkbox defaultSelected color=\"default\">\n        Default\n      </Checkbox>\n      <Checkbox defaultSelected color=\"primary\">\n        Primary\n      </Checkbox>\n      <Checkbox defaultSelected color=\"secondary\">\n        Secondary\n      </Checkbox>\n      <Checkbox defaultSelected color=\"success\">\n        Success\n      </Checkbox>\n      <Checkbox defaultSelected color=\"warning\">\n        Warning\n      </Checkbox>\n      <Checkbox defaultSelected color=\"danger\">\n        Danger\n      </Checkbox>\n    </div>\n  );\n}\n`;var te={\"/App.jsx\":v},y={...te};var S=`import {Checkbox} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <div className=\"flex gap-4\">\n      <Checkbox isDisabled>Option</Checkbox>\n      <Checkbox defaultSelected isDisabled>\n        Option\n      </Checkbox>\n    </div>\n  );\n}\n`;var ne={\"/App.jsx\":S},w={...ne};var I=`import {Checkbox} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <div className=\"flex gap-4\">\n      <Checkbox defaultSelected radius=\"full\">\n        Full\n      </Checkbox>\n      <Checkbox defaultSelected radius=\"lg\">\n        Large\n      </Checkbox>\n      <Checkbox defaultSelected radius=\"md\">\n        Medium\n      </Checkbox>\n      <Checkbox defaultSelected radius=\"sm\">\n        Small\n      </Checkbox>\n      <Checkbox defaultSelected radius=\"none\">\n        None\n      </Checkbox>\n    </div>\n  );\n}\n`;var re={\"/App.jsx\":I},A={...re};var P=`import {Checkbox} from \"@heroui/react\";\n\nexport default function App() {\n  return <Checkbox isIndeterminate>Option</Checkbox>;\n}\n`;var ce={\"/App.jsx\":P},T={...ce};var j=`import {Checkbox} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <Checkbox defaultSelected lineThrough>\n      Option\n    </Checkbox>\n  );\n}\n`;var le={\"/App.jsx\":j},W={...le};var L=`import {Checkbox} from \"@heroui/react\";\n\nexport const HeartIcon = ({size, height, width, ...props}) => {\n  // avoid passing non-DOM attributes to svg\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const {isSelected, isIndeterminate, disableAnimation, ...otherProps} = props;\n\n  return (\n    <svg\n      fill=\"fill\"\n      height={size || height || 24}\n      viewBox=\"0 0 24 24\"\n      width={size || width || 24}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      {...otherProps}\n    >\n      <path\n        d=\"M12.62 20.81c-.34.12-.9.12-1.24 0C8.48 19.82 2 15.69 2 8.69 2 5.6 4.49 3.1 7.56 3.1c1.82 0 3.43.88 4.44 2.24a5.53 5.53 0 0 1 4.44-2.24C19.51 3.1 22 5.6 22 8.69c0 7-6.48 11.13-9.38 12.12Z\"\n        fill=\"currentColor\"\n      />\n    </svg>\n  );\n};\n\nexport const PlusIcon = ({size, height, width, ...props}) => {\n  // avoid passing non-DOM attributes to svg\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const {isSelected, isIndeterminate, disableAnimation, ...otherProps} = props;\n\n  return (\n    <svg\n      fill=\"none\"\n      height={size || height || 24}\n      viewBox=\"0 0 24 24\"\n      width={size || width || 24}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      {...otherProps}\n    >\n      <path\n        d=\"M6 12H18\"\n        stroke=\"currentColor\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth=\"3\"\n      />\n      <path\n        d=\"M12 18V6\"\n        stroke=\"currentColor\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth=\"3\"\n      />\n    </svg>\n  );\n};\n\nexport default function App() {\n  return (\n    <div className=\"flex gap-4\">\n      <Checkbox defaultSelected icon={<HeartIcon />}>\n        Option\n      </Checkbox>\n      <Checkbox defaultSelected color=\"warning\" icon={<PlusIcon />}>\n        Option\n      </Checkbox>\n    </div>\n  );\n}\n`;var he={\"/App.jsx\":L},z={...he};var N=`import {Checkbox} from \"@heroui/react\";\n\nexport default function App() {\n  const [isSelected, setIsSelected] = React.useState(false);\n\n  return (\n    <div className=\"flex flex-col gap-2\">\n      <Checkbox isSelected={isSelected} onValueChange={setIsSelected}>\n        Subscribe (controlled)\n      </Checkbox>\n      <p className=\"text-default-500\">Selected: {isSelected ? \"true\" : \"false\"}</p>\n    </div>\n  );\n}\n`;var ue={\"/App.jsx\":N},D={...ue};var M=`import {Checkbox, Link, User, Chip, cn} from \"@heroui/react\";\n\nexport default function App() {\n  const [isSelected, setIsSelected] = React.useState(false);\n\n  const user = {\n    name: \"Junior Garcia\",\n    avatar: \"https://avatars.githubusercontent.com/u/30373425?v=4\",\n    username: \"jrgarciadev\",\n    url: \"https://x.com/jrgarciadev\",\n    role: \"Software Developer\",\n    status: \"Active\",\n  };\n\n  return (\n    <Checkbox\n      aria-label={user.name}\n      classNames={{\n        base: cn(\n          \"inline-flex w-full max-w-md bg-content1\",\n          \"hover:bg-content2 items-center justify-start\",\n          \"cursor-pointer rounded-lg gap-2 p-4 border-2 border-transparent\",\n          \"data-[selected=true]:border-primary\",\n        ),\n        label: \"w-full\",\n      }}\n      isSelected={isSelected}\n      onValueChange={setIsSelected}\n    >\n      <div className=\"w-full flex justify-between gap-2\">\n        <User\n          avatarProps={{size: \"md\", src: user.avatar}}\n          description={\n            <Link isExternal href={user.url} size=\"sm\">\n              @{user.username}\n            </Link>\n          }\n          name={user.name}\n        />\n        <div className=\"flex flex-col items-end gap-1\">\n          <span className=\"text-tiny text-default-500\">{user.role}</span>\n          <Chip color=\"success\" size=\"sm\" variant=\"flat\">\n            {user.status}\n          </Chip>\n        </div>\n      </div>\n    </Checkbox>\n  );\n}\n`;var be={\"/App.jsx\":M},R={...be};var B=`import {useCheckbox, Chip, VisuallyHidden, tv} from \"@heroui/react\";\n\nexport const CheckIcon = (props) => {\n  return (\n    <svg\n      aria-hidden=\"true\"\n      fill=\"none\"\n      focusable=\"false\"\n      height=\"1em\"\n      stroke=\"currentColor\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth={2}\n      viewBox=\"0 0 24 24\"\n      width=\"1em\"\n      {...props}\n    >\n      <polyline points=\"20 6 9 17 4 12\" />\n    </svg>\n  );\n};\n\nexport default function App() {\n  const {children, isSelected, isFocusVisible, getBaseProps, getLabelProps, getInputProps} =\n    useCheckbox({\n      defaultSelected: true,\n    });\n\n  const checkbox = tv({\n    slots: {\n      base: \"border-default hover:bg-default-200\",\n      content: \"text-default-500\",\n    },\n    variants: {\n      isSelected: {\n        true: {\n          base: \"border-primary bg-primary hover:bg-primary-500 hover:border-primary-500\",\n          content: \"text-primary-foreground pl-1\",\n        },\n      },\n      isFocusVisible: {\n        true: {\n          base: \"outline-none ring-2 ring-focus ring-offset-2 ring-offset-background\",\n        },\n      },\n    },\n  });\n\n  const styles = checkbox({isSelected, isFocusVisible});\n\n  return (\n    <label {...getBaseProps()}>\n      <VisuallyHidden>\n        <input {...getInputProps()} />\n      </VisuallyHidden>\n      <Chip\n        classNames={{\n          base: styles.base(),\n          content: styles.content(),\n        }}\n        color=\"primary\"\n        startContent={isSelected ? <CheckIcon className=\"ml-1\" /> : null}\n        variant=\"faded\"\n        {...getLabelProps()}\n      >\n        {children ? children : isSelected ? \"Enabled\" : \"Disabled\"}\n      </Chip>\n    </label>\n  );\n}\n`;var xe={\"/App.jsx\":B},H={...xe};var r={usage:k,sizes:C,colors:y,disabled:w,radius:A,indeterminate:T,lineThrough:W,customCheckIcon:z,controlled:D,customStyles:R,customImplementation:H};var ke={title:\"Checkbox\",description:\"Checkboxes allow users to select multiple items from a list of individual items, or to mark one individual item as selected.\"};function F(o){let t={a:\"a\",blockquote:\"blockquote\",code:\"code\",h1:\"h1\",h2:\"h2\",h3:\"h3\",h4:\"h4\",hr:\"hr\",li:\"li\",p:\"p\",pre:\"pre\",strong:\"strong\",ul:\"ul\",...o.components},{APITable:i,CarbonAd:c,CodeDemo:n,ComponentLinks:h,ImportTabs:p,Kbd:d,PackageManagers:u,Spacer:a}=t;return i||s(\"APITable\",!0),c||s(\"CarbonAd\",!0),n||s(\"CodeDemo\",!0),h||s(\"ComponentLinks\",!0),p||s(\"ImportTabs\",!0),d||s(\"Kbd\",!0),u||s(\"PackageManagers\",!0),a||s(\"Spacer\",!0),(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(t.h1,{id:\"checkbox\",children:\"Checkbox\"}),`\n`,(0,e.jsx)(t.p,{children:\"Checkboxes allow users to select multiple items from a list of individual items, or to mark one individual item as selected.\"}),`\n`,(0,e.jsx)(h,{component:\"checkbox\",reactAriaHook:\"useCheckbox\"}),`\n`,(0,e.jsx)(t.hr,{}),`\n`,(0,e.jsx)(c,{}),`\n`,(0,e.jsx)(t.h2,{id:\"installation\",children:\"Installation\"}),`\n`,(0,e.jsx)(u,{showGlobalInstallWarning:!0,commands:{cli:\"npx heroui-cli@latest add checkbox\",npm:\"npm install @heroui/checkbox\",yarn:\"yarn add @heroui/checkbox\",pnpm:\"pnpm add @heroui/checkbox\",bun:\"bun add @heroui/checkbox\"}}),`\n`,(0,e.jsx)(t.h2,{id:\"import\",children:\"Import\"}),`\n`,(0,e.jsx)(p,{commands:{main:'import {Checkbox} from \"@heroui/react\";',individual:'import {Checkbox} from \"@heroui/checkbox\";'}}),`\n`,(0,e.jsx)(t.h2,{id:\"usage\",children:\"Usage\"}),`\n`,(0,e.jsx)(n,{title:\"Usage\",files:r.usage}),`\n`,(0,e.jsx)(t.h3,{id:\"disabled\",children:\"Disabled\"}),`\n`,(0,e.jsx)(n,{title:\"Disabled\",files:r.disabled}),`\n`,(0,e.jsx)(t.h3,{id:\"sizes\",children:\"Sizes\"}),`\n`,(0,e.jsx)(n,{title:\"Sizes\",files:r.sizes}),`\n`,(0,e.jsx)(t.h3,{id:\"colors\",children:\"Colors\"}),`\n`,(0,e.jsx)(n,{title:\"Colors\",files:r.colors}),`\n`,(0,e.jsx)(t.h3,{id:\"radius\",children:\"Radius\"}),`\n`,(0,e.jsx)(n,{title:\"Radius\",files:r.radius}),`\n`,(0,e.jsx)(t.h3,{id:\"indeterminate\",children:\"Indeterminate\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"The \",(0,e.jsx)(t.code,{children:\"isIndeterminate\"}),\" prop sets a \",(0,e.jsx)(t.code,{children:\"Checkbox\"}),\" to an indeterminate state, overriding its appearance and maintaining it until set to \",(0,e.jsx)(t.code,{children:\"false\"}),\", regardless of user interaction.\"]}),`\n`,(0,e.jsx)(n,{title:\"Indeterminate\",files:r.indeterminate}),`\n`,(0,e.jsx)(t.h3,{id:\"line-through\",children:\"Line Through\"}),`\n`,(0,e.jsx)(n,{title:\"Line Through\",files:r.lineThrough}),`\n`,(0,e.jsx)(t.h3,{id:\"custom-check-icon\",children:\"Custom Check Icon\"}),`\n`,(0,e.jsxs)(t.blockquote,{children:[`\n`,(0,e.jsxs)(t.p,{children:[\"By default, \",(0,e.jsx)(t.code,{children:\"IconProps\"}),\" will be passed to your icon component.  Please make sure that \",(0,e.jsx)(t.code,{children:\"isSelected\"}),\", \",(0,e.jsx)(t.code,{children:\"isIndeterminate\"}),\", and \",(0,e.jsx)(t.code,{children:\"disableAnimation\"}),\" are not passed to a DOM element.\"]}),`\n`]}),`\n`,(0,e.jsx)(n,{title:\"Custom Check Icon\",files:r.customCheckIcon}),`\n`,(0,e.jsx)(t.h3,{id:\"controlled\",children:\"Controlled\"}),`\n`,(0,e.jsx)(n,{title:\"Controlled Checkbox\",files:r.controlled}),`\n`,(0,e.jsxs)(t.blockquote,{children:[`\n`,(0,e.jsxs)(t.p,{children:[(0,e.jsx)(t.strong,{children:\"Note\"}),\": HeroUI \",(0,e.jsx)(t.code,{children:\"Checkbox\"}),\" also supports native events like \",(0,e.jsx)(t.code,{children:\"onChange\"}),`, useful for form libraries\nsuch as `,(0,e.jsx)(t.a,{href:\"https://formik.org/\",children:\"Formik\"}),\" and \",(0,e.jsx)(t.a,{href:\"https://react-hook-form.com/\",children:\"React Hook Form\"}),\".\"]}),`\n`]}),`\n`,(0,e.jsx)(t.h2,{id:\"slots\",children:\"Slots\"}),`\n`,(0,e.jsxs)(t.ul,{children:[`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"base\"}),\": Checkbox wrapper, it handles alignment, placement, and general appearance.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"wrapper\"}),\": An inner container that includes styles for relative positioning, flex properties, overflow handling and managing hover and selected states.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"hiddenInput\"}),\": The hidden input element that is used to handle the checkbox state.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"icon\"}),\": Icon within the checkbox, controlling size, visibility, and changes when checked.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"label\"}),\": The text associated with the checkbox.\"]}),`\n`]}),`\n`,(0,e.jsx)(t.h3,{id:\"custom-styles\",children:\"Custom Styles\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"You can customize the \",(0,e.jsx)(t.code,{children:\"Checkbox\"}),\" component by passing custom Tailwind CSS classes to the component slots.\"]}),`\n`,(0,e.jsx)(n,{title:\"Custom Styles\",files:r.customStyles}),`\n`,(0,e.jsx)(t.h3,{id:\"custom-implementation\",children:\"Custom Implementation\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"In case you need to customize the checkbox even further, you can use the \",(0,e.jsx)(t.code,{children:\"useCheckbox\"}),\" hook to create your own implementation.\"]}),`\n`,(0,e.jsx)(n,{title:\"Custom Implementation\",files:r.customImplementation}),`\n`,(0,e.jsxs)(t.blockquote,{children:[`\n`,(0,e.jsxs)(t.p,{children:[(0,e.jsx)(t.strong,{children:\"Note\"}),\": We used \",(0,e.jsx)(t.a,{href:\"https://www.tailwind-variants.org/\",children:\"Tailwind Variants\"}),\" to implement the styles above, you can use any other library such as \",(0,e.jsx)(t.a,{href:\"https://www.npmjs.com/package/clsx\",children:\"clsx\"}),\" to achieve the same result.\"]}),`\n`]}),`\n`,(0,e.jsx)(a,{y:4}),`\n`,(0,e.jsx)(t.h2,{id:\"data-attributes\",children:\"Data Attributes\"}),`\n`,(0,e.jsxs)(t.p,{children:[(0,e.jsx)(t.code,{children:\"Checkbox\"}),\" has the following attributes on the \",(0,e.jsx)(t.code,{children:\"base\"}),\" element:\"]}),`\n`,(0,e.jsxs)(t.ul,{children:[`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-selected\"}),`:\nWhen the checkbox is checked. Based on `,(0,e.jsx)(t.code,{children:\"isSelected\"}),\" prop.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-pressed\"}),`:\nWhen the checkbox is pressed. Based on `,(0,e.jsx)(t.a,{href:\"https://react-spectrum.adobe.com/react-aria/usePress.html\",children:\"usePress\"})]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-invalid\"}),`:\nWhen the checkbox is invalid. Based on `,(0,e.jsx)(t.code,{children:\"validationState\"}),\" prop.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-readonly\"}),`:\nWhen the checkbox is readonly. Based on `,(0,e.jsx)(t.code,{children:\"isReadOnly\"}),\" prop.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-indeterminate\"}),`:\nWhen the checkbox is indeterminate. Based on `,(0,e.jsx)(t.code,{children:\"isIndeterminate\"}),\" prop.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-hover\"}),`:\nWhen the checkbox is being hovered. Based on `,(0,e.jsx)(t.a,{href:\"https://react-spectrum.adobe.com/react-aria/useHover.html\",children:\"useHover\"})]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-focus\"}),`:\nWhen the checkbox is being focused. Based on `,(0,e.jsx)(t.a,{href:\"https://react-spectrum.adobe.com/react-aria/useFocusRing.html\",children:\"useFocusRing\"}),\".\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-focus-visible\"}),`:\nWhen the checkbox is being focused with the keyboard. Based on `,(0,e.jsx)(t.a,{href:\"https://react-spectrum.adobe.com/react-aria/useFocusRing.html\",children:\"useFocusRing\"}),\".\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-disabled\"}),`:\nWhen the checkbox is disabled. Based on `,(0,e.jsx)(t.code,{children:\"isDisabled\"}),\" prop.\"]}),`\n`,(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:\"data-loading\"}),`:\nWhen the checkbox is loading. Based on `,(0,e.jsx)(t.code,{children:\"isLoading\"}),\" prop.\"]}),`\n`]}),`\n`,(0,e.jsx)(a,{y:4}),`\n`,(0,e.jsx)(t.h2,{id:\"accessibility\",children:\"Accessibility\"}),`\n`,(0,e.jsxs)(t.ul,{children:[`\n`,(0,e.jsxs)(t.li,{children:[\"Built with a native HTML \",(0,e.jsx)(t.code,{children:\"<input>\"}),\" element.\"]}),`\n`,(0,e.jsx)(t.li,{children:\"Full support for browser features like form autofill.\"}),`\n`,(0,e.jsx)(t.li,{children:\"Keyboard focus management and cross browser normalization.\"}),`\n`,(0,e.jsxs)(t.li,{children:[\"Keyboard event support for \",(0,e.jsx)(d,{children:\"Tab\"}),\" and \",(0,e.jsx)(d,{children:\"Space\"}),\" keys.\"]}),`\n`,(0,e.jsx)(t.li,{children:\"Labeling support for assistive technology.\"}),`\n`,(0,e.jsx)(t.li,{children:\"Indeterminate state support.\"}),`\n`]}),`\n`,(0,e.jsx)(a,{y:4}),`\n`,(0,e.jsx)(t.h2,{id:\"api\",children:\"API\"}),`\n`,(0,e.jsx)(t.h3,{id:\"checkbox-props\",children:\"Checkbox Props\"}),`\n`,(0,e.jsx)(i,{data:[{attribute:\"children\",type:\"ReactNode\",description:\"The label of the checkbox.\",default:\"-\"},{attribute:\"icon\",type:\"CheckboxIconProps\",description:\"The icon to be displayed when the checkbox is checked.\",default:\"-\"},{attribute:\"value\",type:\"string\",description:\"The value of the checkbox element, used when submitting an HTML form.\",default:\"-\"},{attribute:\"name\",type:\"string\",description:\"The name of the checkbox element, used when submitting an HTML form.\",default:\"-\"},{attribute:\"size\",type:\"sm | md | lg\",description:\"The size of the checkbox.\",default:\"md\"},{attribute:\"color\",type:\"default | primary | secondary | success | warning | danger\",description:\"The color of the checkbox.\",default:\"primary\"},{attribute:\"radius\",type:\"none | sm | md | lg | full\",description:\"The radius of the checkbox.\",default:\"-\"},{attribute:\"lineThrough\",type:\"boolean\",description:\"Whether the label should be crossed out.\",default:\"false\"},{attribute:\"isSelected\",type:\"boolean\",description:\"Whether the element should be selected (controlled).\",default:\"-\"},{attribute:\"defaultSelected\",type:\"boolean\",description:\"Whether the element should be selected (uncontrolled).\",default:\"-\"},{attribute:\"isRequired\",type:\"boolean\",description:\"Whether user checkbox is required on the checkbox before form submission.\",default:\"false\"},{attribute:\"isReadOnly\",type:\"boolean\",description:\"Whether the checkbox can be selected but not changed by the user.\",default:\"-\"},{attribute:\"isDisabled\",type:\"boolean\",description:\"Whether the checkbox is disabled.\",default:\"false\"},{attribute:\"isIndeterminate\",type:\"boolean\",description:\"Indeterminism is presentational only. The indeterminate visual representation remains regardless of user interaction.\",default:\"-\"},{attribute:\"isInvalid\",type:\"boolean\",description:\"Whether the checkbox is invalid.\",default:\"false\"},{attribute:\"validationState\",type:\"valid | invalid\",description:'Whether the checkbox should display its \"valid\" or \"invalid\" visual styling. (Deprecated) use isInvalid instead.',default:\"-\"},{attribute:\"disableAnimation\",type:\"boolean\",description:\"Whether the animation should be disabled.\",default:\"false\"},{attribute:\"classNames\",type:'Partial<Record<\"base\"\\uFF5C \"wrapper\"\\uFF5C \"icon\"\\uFF5C \"label\", string>>',description:\"Allows to set custom class names for the checkbox slots.\",default:\"-\"}]}),`\n`,(0,e.jsx)(t.h3,{id:\"checkbox-events\",children:\"Checkbox Events\"}),`\n`,(0,e.jsx)(i,{data:[{attribute:\"onChange\",type:\"React.ChangeEvent<HTMLInputElement>\",description:\"Handler that is called when the element's selection state changes. You can pull out the new checked state by accessing event.target.checked (boolean).\",default:\"-\"},{attribute:\"onValueChange\",type:\"(isSelected: boolean) => void\",description:\"Handler that is called when the element's selection state changes.\",default:\"-\"}]}),`\n`,(0,e.jsx)(t.h3,{id:\"types\",children:\"Types\"}),`\n`,(0,e.jsx)(t.h4,{id:\"checkbox-icon-props\",children:\"Checkbox Icon Props\"}),`\n`,(0,e.jsx)(t.pre,{children:(0,e.jsx)(t.code,{className:\"language-ts\",children:`type IconProps = {\n  \"data-checked\": string;\n  isSelected: boolean;\n  isIndeterminate: boolean;\n  disableAnimation: boolean;\n  className: string;\n};\n\ntype CheckboxIconProps = ReactNode | ((props: IconProps) => ReactNode);\n`})})]})}function O(o={}){let{wrapper:t}=o.components||{};return t?(0,e.jsx)(t,{...o,children:(0,e.jsx)(F,{...o})}):F(o)}function s(o,t){throw new Error(\"Expected \"+(t?\"component\":\"object\")+\" `\"+o+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return Y(ge);})();\n;return Component;"
  },
  "_id": "docs/components/checkbox.mdx",
  "_raw": {
    "sourceFilePath": "docs/components/checkbox.mdx",
    "sourceFileName": "checkbox.mdx",
    "sourceFileDir": "docs/components",
    "contentType": "mdx",
    "flattenedPath": "docs/components/checkbox"
  },
  "type": "Doc",
  "slug": "/docs/components/checkbox",
  "slugAsParams": "components/checkbox",
  "url": "/docs/components/checkbox"
}