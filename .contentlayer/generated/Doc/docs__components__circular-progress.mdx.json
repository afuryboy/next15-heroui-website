{
  "title": "Circular Progress",
  "description": "Circular progress indicators are utilized to indicate an undetermined wait period or visually represent the duration of a process.",
  "body": {
    "raw": "\nimport {circularProgressContent} from \"@/content/components/circular-progress\";\n\n# Circular Progress\n\nCircular progress indicators are utilized to indicate an undetermined wait period or visually represent the duration of a process.\n\n<ComponentLinks component=\"progress\" styles=\"circular-progress\" storybook=\"circularprogress\" reactAriaHook=\"useProgressBar\" />\n\n---\n\n<CarbonAd/>\n\n## Installation\n\n<PackageManagers\n  showGlobalInstallWarning\n  commands={{\n    cli: \"npx heroui-cli@latest add progress\",\n    npm: \"npm install @heroui/progress\",\n    yarn: \"yarn add @heroui/progress\",\n    pnpm: \"pnpm add @heroui/progress\",\n    bun: \"bun add @heroui/progress\"\n  }}\n/>\n\n\n## Import\n\n<ImportTabs\n  commands={{\n    main: 'import {CircularProgress} from \"@heroui/react\";',\n    individual: 'import {CircularProgress} from \"@heroui/progress\";',\n  }}\n/>\n\n## Usage\n\n<CodeDemo title=\"Usage\" files={circularProgressContent.usage} />\n\n> **Note**: Make sure to pass the `aria-label` prop when the `label` prop is not provided. This is required for accessibility.\n\n### Sizes\n\n<CodeDemo title=\"Sizes\" files={circularProgressContent.sizes} />\n\n### Colors\n\n<CodeDemo title=\"Colors\" files={circularProgressContent.colors} />\n\n### With Label\n\n<CodeDemo title=\"With Label\" files={circularProgressContent.label} />\n\n### With Value\n\n<CodeDemo title=\"With Value\" files={circularProgressContent.value} />\n\n### Value Formatting\n\nValues are formatted as a percentage by default, but this can be modified by using the\n`formatOptions` prop to specify a different format. `formatOptions` is compatible with the\noption parameter of [Intl.NumberFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat) and is applied based on the current locale.\n\n<CodeDemo\n  title=\"Value Formatting\"\n  files={circularProgressContent.valueFormatting}\n  highlightedLines=\"10\"\n/>\n\n## Slots\n\n- **base**: The base slot of the circular progress, it is the main container.\n- **svgWrapper**: The wrapper of the svg circles and the value label.\n- **svg**: The svg element of the circles.\n- **track**: The track is the background circle of the circular progress.\n- **indicator**: The indicator is the one that is filled according to the `value`.\n- **value**: The value content.\n- **label**: The label content.\n\n### Custom Styles\n\nYou can customize the `CircularProgress` component by passing custom Tailwind CSS classes to the component slots.\n\n<CodeDemo\n  title=\"Custom Styles\"\n  files={circularProgressContent.customStyles}\n  highlightedLines=\"9-12\"\n/>\n\n<Spacer y={4} />\n\n## Data Attributes\n\n`CircularProgress` has the following attributes on the `base` element:\n\n- **data-indeterminate**:\n  Indicates whether the progress is indeterminate.\n- **data-disabled**:\n  Indicates whether the progress is disabled. Based on `isDisabled` prop.\n\n<Spacer y={4} />\n\n## Accessibility\n\n- Exposed to assistive technology as a progress bar via ARIA.\n- Labeling support for accessibility.\n- Internationalized number formatting as a percentage or value.\n- Determinate and indeterminate progress support.\n- Exposes the `aria-valuenow`, `aria-valuemin`, `aria-valuemax` and `aria-valuetext` attributes.\n\n<Spacer y={4} />\n\n## API\n\n### Circular Progress Props\n\n<APITable\n  data={[\n    {\n      attribute: \"label\",\n      type: \"ReactNode\",\n      description: \"The content to display as the label.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"size\",\n      type: \"sm | md | lg\",\n      description: \"The size of the indicator.\",\n      default: \"md\"\n    },\n    {\n      attribute: \"color\",\n      type: \"default | primary | secondary | success | warning | danger\",\n      description: \"The color of the indicator.\",\n      default: \"primary\"\n    },\n    {\n      attribute: \"value\",\n      type: \"number\",\n      description: \"The current value (controlled).\",\n      default: \"-\"\n    },\n    {\n      attribute: \"valueLabel\",\n      type: \"ReactNode\",\n      description: \"The content to display as the value's label (e.g. 1 of 4).\",\n      default: \"-\"\n    },\n    {\n      attribute: \"minValue\",\n      type: \"number\",\n      description: \"The smallest value allowed for the input.\",\n      default: \"0\"\n    },\n    {\n      attribute: \"maxValue\",\n      type: \"number\",\n      description: \"The largest value allowed for the input.\",\n      default: \"100\"\n    },\n    {\n      attribute: \"formatOptions\",\n      type: \"Intl.NumberFormat\",\n      description: \"The options to format the value.\",\n      default: \"{style: 'percent'}\"\n    },\n    {\n      attribute: \"isIndeterminate\",\n      type: \"boolean\",\n      description: \"Whether the progress is indeterminate.\",\n      default: \"true\"\n    },\n    {\n      attribute: \"showValueLabel\",\n      type: \"boolean\",\n      description: \"Whether to show the value label.\",\n      default: \"true\"\n    },\n    {\n      attribute: \"strokeWidth\",\n      type: \"number\",\n      description: \"The width of the progress stroke.\",\n      default: \"2\"\n    },\n    {\n      attribute: \"isDisabled\",\n      type: \"boolean\",\n      description: \"Whether the progress is disabled.\",\n      default: \"false\"\n    },\n    {\n      attribute: \"disableAnimation\",\n      type: \"boolean\",\n      description: \"Whether to disable the animation.\",\n      default: \"false\"\n    },\n    {\n      attribute: \"classNames\",\n      type: \"Partial<Record<'base'｜'svgWrapper'｜'svg'｜'track'｜'indicator'｜'value'｜'label', string>>\",\n      description: \"Allows to set custom class names for the circular progress slots.\",\n      default: \"-\"\n    }\n  ]}\n/>\n",
    "code": "var Component=(()=>{var N=Object.create;var c=Object.defineProperty;var W=Object.getOwnPropertyDescriptor;var V=Object.getOwnPropertyNames;var F=Object.getPrototypeOf,D=Object.prototype.hasOwnProperty;var _=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),R=(t,e)=>{for(var o in e)c(t,o,{get:e[o],enumerable:!0})},h=(t,e,o,l)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of V(e))!D.call(t,i)&&i!==o&&c(t,i,{get:()=>e[i],enumerable:!(l=W(e,i))||l.enumerable});return t};var M=(t,e,o)=>(o=t!=null?N(F(t)):{},h(e||!t||!t.__esModule?c(o,\"default\",{value:t,enumerable:!0}):o,t)),B=t=>h(c({},\"__esModule\",{value:!0}),t);var g=_((oe,m)=>{m.exports=_jsx_runtime});var te={};R(te,{default:()=>S,frontmatter:()=>re});var r=M(g());var f=`import {CircularProgress} from \"@heroui/react\";\n\nexport default function App() {\n  return <CircularProgress aria-label=\"Loading...\" />;\n}\n`;var O={\"/App.jsx\":f},b={...O};var v=`import {CircularProgress} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <div className=\"flex gap-4\">\n      <CircularProgress aria-label=\"Loading...\" size=\"sm\" />\n      <CircularProgress aria-label=\"Loading...\" size=\"md\" />\n      <CircularProgress aria-label=\"Loading...\" size=\"lg\" />\n    </div>\n  );\n}\n`;var U={\"/App.jsx\":v},C={...U};var y=`import {CircularProgress} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <div className=\"flex gap-4\">\n      <CircularProgress aria-label=\"Loading...\" color=\"default\" />\n      <CircularProgress aria-label=\"Loading...\" color=\"primary\" />\n      <CircularProgress aria-label=\"Loading...\" color=\"secondary\" />\n      <CircularProgress aria-label=\"Loading...\" color=\"success\" />\n      <CircularProgress aria-label=\"Loading...\" color=\"warning\" />\n      <CircularProgress aria-label=\"Loading...\" color=\"danger\" />\n    </div>\n  );\n}\n`;var X={\"/App.jsx\":y},x={...X};var P=`import {CircularProgress} from \"@heroui/react\";\n\nexport default function App() {\n  return <CircularProgress label=\"Loading...\" />;\n}\n`;var J={\"/App.jsx\":P},w={...J};var A=`import {CircularProgress} from \"@heroui/react\";\n\nexport default function App() {\n  const [value, setValue] = React.useState(0);\n\n  React.useEffect(() => {\n    const interval = setInterval(() => {\n      setValue((v) => (v >= 100 ? 0 : v + 10));\n    }, 500);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <CircularProgress\n      aria-label=\"Loading...\"\n      color=\"warning\"\n      showValueLabel={true}\n      size=\"lg\"\n      value={value}\n    />\n  );\n}\n`;var K={\"/App.jsx\":A},L={...K};var k=`import {CircularProgress} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <CircularProgress\n      color=\"success\"\n      formatOptions={{style: \"unit\", unit: \"kilometer\"}}\n      label=\"Speed\"\n      showValueLabel={true}\n      size=\"lg\"\n      value={70}\n    />\n  );\n}\n`;var Z={\"/App.jsx\":k},T={...Z};var I=`import {CircularProgress, Card, CardBody, CardFooter, Chip} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <Card className=\"w-[240px] h-[240px] border-none bg-gradient-to-br from-violet-500 to-fuchsia-500\">\n      <CardBody className=\"justify-center items-center pb-0\">\n        <CircularProgress\n          classNames={{\n            svg: \"w-36 h-36 drop-shadow-md\",\n            indicator: \"stroke-white\",\n            track: \"stroke-white/10\",\n            value: \"text-3xl font-semibold text-white\",\n          }}\n          showValueLabel={true}\n          strokeWidth={4}\n          value={70}\n        />\n      </CardBody>\n      <CardFooter className=\"justify-center items-center pt-0\">\n        <Chip\n          classNames={{\n            base: \"border-1 border-white/30\",\n            content: \"text-white/90 text-small font-semibold\",\n          }}\n          variant=\"bordered\"\n        >\n          2800 Data points\n        </Chip>\n      </CardFooter>\n    </Card>\n  );\n}\n`;var ee={\"/App.jsx\":I},z={...ee};var a={usage:b,sizes:C,colors:x,label:w,value:L,valueFormatting:T,customStyles:z};var re={title:\"Circular Progress\",description:\"Circular progress indicators are utilized to indicate an undetermined wait period or visually represent the duration of a process.\"};function j(t){let e={a:\"a\",blockquote:\"blockquote\",code:\"code\",h1:\"h1\",h2:\"h2\",h3:\"h3\",hr:\"hr\",li:\"li\",p:\"p\",strong:\"strong\",ul:\"ul\",...t.components},{APITable:o,CarbonAd:l,CodeDemo:i,ComponentLinks:d,ImportTabs:u,PackageManagers:p,Spacer:n}=e;return o||s(\"APITable\",!0),l||s(\"CarbonAd\",!0),i||s(\"CodeDemo\",!0),d||s(\"ComponentLinks\",!0),u||s(\"ImportTabs\",!0),p||s(\"PackageManagers\",!0),n||s(\"Spacer\",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h1,{id:\"circular-progress\",children:\"Circular Progress\"}),`\n`,(0,r.jsx)(e.p,{children:\"Circular progress indicators are utilized to indicate an undetermined wait period or visually represent the duration of a process.\"}),`\n`,(0,r.jsx)(d,{component:\"progress\",styles:\"circular-progress\",storybook:\"circularprogress\",reactAriaHook:\"useProgressBar\"}),`\n`,(0,r.jsx)(e.hr,{}),`\n`,(0,r.jsx)(l,{}),`\n`,(0,r.jsx)(e.h2,{id:\"installation\",children:\"Installation\"}),`\n`,(0,r.jsx)(p,{showGlobalInstallWarning:!0,commands:{cli:\"npx heroui-cli@latest add progress\",npm:\"npm install @heroui/progress\",yarn:\"yarn add @heroui/progress\",pnpm:\"pnpm add @heroui/progress\",bun:\"bun add @heroui/progress\"}}),`\n`,(0,r.jsx)(e.h2,{id:\"import\",children:\"Import\"}),`\n`,(0,r.jsx)(u,{commands:{main:'import {CircularProgress} from \"@heroui/react\";',individual:'import {CircularProgress} from \"@heroui/progress\";'}}),`\n`,(0,r.jsx)(e.h2,{id:\"usage\",children:\"Usage\"}),`\n`,(0,r.jsx)(i,{title:\"Usage\",files:a.usage}),`\n`,(0,r.jsxs)(e.blockquote,{children:[`\n`,(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:\"Note\"}),\": Make sure to pass the \",(0,r.jsx)(e.code,{children:\"aria-label\"}),\" prop when the \",(0,r.jsx)(e.code,{children:\"label\"}),\" prop is not provided. This is required for accessibility.\"]}),`\n`]}),`\n`,(0,r.jsx)(e.h3,{id:\"sizes\",children:\"Sizes\"}),`\n`,(0,r.jsx)(i,{title:\"Sizes\",files:a.sizes}),`\n`,(0,r.jsx)(e.h3,{id:\"colors\",children:\"Colors\"}),`\n`,(0,r.jsx)(i,{title:\"Colors\",files:a.colors}),`\n`,(0,r.jsx)(e.h3,{id:\"with-label\",children:\"With Label\"}),`\n`,(0,r.jsx)(i,{title:\"With Label\",files:a.label}),`\n`,(0,r.jsx)(e.h3,{id:\"with-value\",children:\"With Value\"}),`\n`,(0,r.jsx)(i,{title:\"With Value\",files:a.value}),`\n`,(0,r.jsx)(e.h3,{id:\"value-formatting\",children:\"Value Formatting\"}),`\n`,(0,r.jsxs)(e.p,{children:[`Values are formatted as a percentage by default, but this can be modified by using the\n`,(0,r.jsx)(e.code,{children:\"formatOptions\"}),\" prop to specify a different format. \",(0,r.jsx)(e.code,{children:\"formatOptions\"}),` is compatible with the\noption parameter of `,(0,r.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\",children:\"Intl.NumberFormat\"}),\" and is applied based on the current locale.\"]}),`\n`,(0,r.jsx)(i,{title:\"Value Formatting\",files:a.valueFormatting,highlightedLines:\"10\"}),`\n`,(0,r.jsx)(e.h2,{id:\"slots\",children:\"Slots\"}),`\n`,(0,r.jsxs)(e.ul,{children:[`\n`,(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:\"base\"}),\": The base slot of the circular progress, it is the main container.\"]}),`\n`,(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:\"svgWrapper\"}),\": The wrapper of the svg circles and the value label.\"]}),`\n`,(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:\"svg\"}),\": The svg element of the circles.\"]}),`\n`,(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:\"track\"}),\": The track is the background circle of the circular progress.\"]}),`\n`,(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:\"indicator\"}),\": The indicator is the one that is filled according to the \",(0,r.jsx)(e.code,{children:\"value\"}),\".\"]}),`\n`,(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:\"value\"}),\": The value content.\"]}),`\n`,(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:\"label\"}),\": The label content.\"]}),`\n`]}),`\n`,(0,r.jsx)(e.h3,{id:\"custom-styles\",children:\"Custom Styles\"}),`\n`,(0,r.jsxs)(e.p,{children:[\"You can customize the \",(0,r.jsx)(e.code,{children:\"CircularProgress\"}),\" component by passing custom Tailwind CSS classes to the component slots.\"]}),`\n`,(0,r.jsx)(i,{title:\"Custom Styles\",files:a.customStyles,highlightedLines:\"9-12\"}),`\n`,(0,r.jsx)(n,{y:4}),`\n`,(0,r.jsx)(e.h2,{id:\"data-attributes\",children:\"Data Attributes\"}),`\n`,(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:\"CircularProgress\"}),\" has the following attributes on the \",(0,r.jsx)(e.code,{children:\"base\"}),\" element:\"]}),`\n`,(0,r.jsxs)(e.ul,{children:[`\n`,(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:\"data-indeterminate\"}),`:\nIndicates whether the progress is indeterminate.`]}),`\n`,(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:\"data-disabled\"}),`:\nIndicates whether the progress is disabled. Based on `,(0,r.jsx)(e.code,{children:\"isDisabled\"}),\" prop.\"]}),`\n`]}),`\n`,(0,r.jsx)(n,{y:4}),`\n`,(0,r.jsx)(e.h2,{id:\"accessibility\",children:\"Accessibility\"}),`\n`,(0,r.jsxs)(e.ul,{children:[`\n`,(0,r.jsx)(e.li,{children:\"Exposed to assistive technology as a progress bar via ARIA.\"}),`\n`,(0,r.jsx)(e.li,{children:\"Labeling support for accessibility.\"}),`\n`,(0,r.jsx)(e.li,{children:\"Internationalized number formatting as a percentage or value.\"}),`\n`,(0,r.jsx)(e.li,{children:\"Determinate and indeterminate progress support.\"}),`\n`,(0,r.jsxs)(e.li,{children:[\"Exposes the \",(0,r.jsx)(e.code,{children:\"aria-valuenow\"}),\", \",(0,r.jsx)(e.code,{children:\"aria-valuemin\"}),\", \",(0,r.jsx)(e.code,{children:\"aria-valuemax\"}),\" and \",(0,r.jsx)(e.code,{children:\"aria-valuetext\"}),\" attributes.\"]}),`\n`]}),`\n`,(0,r.jsx)(n,{y:4}),`\n`,(0,r.jsx)(e.h2,{id:\"api\",children:\"API\"}),`\n`,(0,r.jsx)(e.h3,{id:\"circular-progress-props\",children:\"Circular Progress Props\"}),`\n`,(0,r.jsx)(o,{data:[{attribute:\"label\",type:\"ReactNode\",description:\"The content to display as the label.\",default:\"-\"},{attribute:\"size\",type:\"sm | md | lg\",description:\"The size of the indicator.\",default:\"md\"},{attribute:\"color\",type:\"default | primary | secondary | success | warning | danger\",description:\"The color of the indicator.\",default:\"primary\"},{attribute:\"value\",type:\"number\",description:\"The current value (controlled).\",default:\"-\"},{attribute:\"valueLabel\",type:\"ReactNode\",description:\"The content to display as the value's label (e.g. 1 of 4).\",default:\"-\"},{attribute:\"minValue\",type:\"number\",description:\"The smallest value allowed for the input.\",default:\"0\"},{attribute:\"maxValue\",type:\"number\",description:\"The largest value allowed for the input.\",default:\"100\"},{attribute:\"formatOptions\",type:\"Intl.NumberFormat\",description:\"The options to format the value.\",default:\"{style: 'percent'}\"},{attribute:\"isIndeterminate\",type:\"boolean\",description:\"Whether the progress is indeterminate.\",default:\"true\"},{attribute:\"showValueLabel\",type:\"boolean\",description:\"Whether to show the value label.\",default:\"true\"},{attribute:\"strokeWidth\",type:\"number\",description:\"The width of the progress stroke.\",default:\"2\"},{attribute:\"isDisabled\",type:\"boolean\",description:\"Whether the progress is disabled.\",default:\"false\"},{attribute:\"disableAnimation\",type:\"boolean\",description:\"Whether to disable the animation.\",default:\"false\"},{attribute:\"classNames\",type:\"Partial<Record<'base'\\uFF5C'svgWrapper'\\uFF5C'svg'\\uFF5C'track'\\uFF5C'indicator'\\uFF5C'value'\\uFF5C'label', string>>\",description:\"Allows to set custom class names for the circular progress slots.\",default:\"-\"}]})]})}function S(t={}){let{wrapper:e}=t.components||{};return e?(0,r.jsx)(e,{...t,children:(0,r.jsx)(j,{...t})}):j(t)}function s(t,e){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+t+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return B(te);})();\n;return Component;"
  },
  "_id": "docs/components/circular-progress.mdx",
  "_raw": {
    "sourceFilePath": "docs/components/circular-progress.mdx",
    "sourceFileName": "circular-progress.mdx",
    "sourceFileDir": "docs/components",
    "contentType": "mdx",
    "flattenedPath": "docs/components/circular-progress"
  },
  "type": "Doc",
  "slug": "/docs/components/circular-progress",
  "slugAsParams": "components/circular-progress",
  "url": "/docs/components/circular-progress"
}