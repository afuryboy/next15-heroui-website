{
  "title": "Skeleton",
  "description": "Skeleton is a placeholder to show a loading state and the expected shape of a component.",
  "body": {
    "raw": "\nimport {skeletonContent} from \"@/content/components/skeleton\";\n\n# Skeleton\n\nSkeleton is a placeholder to show a loading state and the expected shape of a component.\n\n<ComponentLinks component=\"skeleton\" />\n\n---\n\n<CarbonAd/>\n\n## Installation\n\n<PackageManagers\n  showGlobalInstallWarning\n  commands={{\n    cli: \"npx heroui-cli@latest add skeleton\",\n    npm: \"npm install @heroui/skeleton\",\n    yarn: \"yarn add @heroui/skeleton\",\n    pnpm: \"pnpm add @heroui/skeleton\",\n    bun: \"bun add @heroui/skeleton\"\n  }}\n/>\n\n## Import\n\n<ImportTabs\n  commands={{\n    main: 'import {Skeleton} from \"@heroui/react\";',\n    individual: 'import {Skeleton} from \"@heroui/skeleton\";',\n  }}\n/>\n\n## Usage\n\n<CodeDemo title=\"Usage\" files={skeletonContent.usage} />\n\n### Standalone\n\nSkeleton takes the shape of its `children` component by default, but you can also use\nit as a standalone component.\n\n<CodeDemo title=\"Standalone\" files={skeletonContent.standalone} />\n\n### Loaded State\n\nYou can use the `isLoaded` prop to stop the skeleton animation and show the children component.\n\n<CodeDemo title=\"Loaded State\" files={skeletonContent.loaded} />\n\n## Slots\n\n- **base**: The base slot of the skeleton, it contains the `before` and `after` pseudo elements to create the animation.\n- **content**: The wrapped component to show the skeleton shape. It is visible only when the `isLoaded` prop is `true`.\n\n<Spacer y={4}/>  \n\n## Data Attributes\n\n`Skeleton` has the following attributes on the `base` element:\n\n- **data-loaded**:\n  Indicates the loaded state of the skeleton. Based on the `isLoaded` prop.\n\n<Spacer y={4}/>  \n\n## API\n\n### Skeleton Props\n\n<APITable\n  data={[\n    {\n      attribute: \"children\",\n      type: \"ReactNode\",\n      description: \"The content of the skeleton.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"isLoaded\", \n      type: \"boolean\",\n      description: \"Whether the skeleton is loaded.\",\n      default: \"false\"\n    },\n    {\n      attribute: \"disableAnimation\",\n      type: \"boolean\", \n      description: \"Whether to disable the animations.\",\n      default: \"false\"\n    },\n    {\n      attribute: \"classNames\",\n      type: \"Partial<Record<\\\"base\\\" | \\\"content\\\", string>>\",\n      description: \"Allows to set custom class names for the skeleton slots.\",\n      default: \"-\"\n    }\n  ]}\n/>\n",
    "code": "var Component=(()=>{var L=Object.create;var s=Object.defineProperty;var y=Object.getOwnPropertyDescriptor;var A=Object.getOwnPropertyNames;var C=Object.getPrototypeOf,I=Object.prototype.hasOwnProperty;var j=(o,e)=>()=>(e||o((e={exports:{}}).exports,e),e.exports),P=(o,e)=>{for(var n in e)s(o,n,{get:e[n],enumerable:!0})},u=(o,e,n,l)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of A(e))!I.call(o,a)&&a!==n&&s(o,a,{get:()=>e[a],enumerable:!(l=y(e,a))||l.enumerable});return o};var _=(o,e,n)=>(n=o!=null?L(C(o)):{},u(e||!o||!o.__esModule?s(n,\"default\",{value:o,enumerable:!0}):n,o)),T=o=>u(s({},\"__esModule\",{value:!0}),o);var f=j((z,m)=>{m.exports=_jsx_runtime});var U={};P(U,{default:()=>v,frontmatter:()=>F});var t=_(f());var g=`import {Card, Skeleton} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <Card className=\"w-[200px] space-y-5 p-4\" radius=\"lg\">\n      <Skeleton className=\"rounded-lg\">\n        <div className=\"h-24 rounded-lg bg-default-300\" />\n      </Skeleton>\n      <div className=\"space-y-3\">\n        <Skeleton className=\"w-3/5 rounded-lg\">\n          <div className=\"h-3 w-3/5 rounded-lg bg-default-200\" />\n        </Skeleton>\n        <Skeleton className=\"w-4/5 rounded-lg\">\n          <div className=\"h-3 w-4/5 rounded-lg bg-default-200\" />\n        </Skeleton>\n        <Skeleton className=\"w-2/5 rounded-lg\">\n          <div className=\"h-3 w-2/5 rounded-lg bg-default-300\" />\n        </Skeleton>\n      </div>\n    </Card>\n  );\n}\n`;var D={\"/App.jsx\":g},k={...D};var S=`import {Skeleton} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <div className=\"max-w-[300px] w-full flex items-center gap-3\">\n      <div>\n        <Skeleton className=\"flex rounded-full w-12 h-12\" />\n      </div>\n      <div className=\"w-full flex flex-col gap-2\">\n        <Skeleton className=\"h-3 w-3/5 rounded-lg\" />\n        <Skeleton className=\"h-3 w-4/5 rounded-lg\" />\n      </div>\n    </div>\n  );\n}\n`;var R={\"/App.jsx\":S},b={...R};var x=`import {Card, Skeleton, Button} from \"@heroui/react\";\n\nexport default function App() {\n  const [isLoaded, setIsLoaded] = React.useState(false);\n\n  const toggleLoad = () => {\n    setIsLoaded(!isLoaded);\n  };\n\n  return (\n    <div className=\"flex flex-col gap-3\">\n      <Card className=\"w-[200px] space-y-5 p-4\" radius=\"lg\">\n        <Skeleton className=\"rounded-lg\" isLoaded={isLoaded}>\n          <div className=\"h-24 rounded-lg bg-secondary\" />\n        </Skeleton>\n        <div className=\"space-y-3\">\n          <Skeleton className=\"w-3/5 rounded-lg\" isLoaded={isLoaded}>\n            <div className=\"h-3 w-full rounded-lg bg-secondary\" />\n          </Skeleton>\n          <Skeleton className=\"w-4/5 rounded-lg\" isLoaded={isLoaded}>\n            <div className=\"h-3 w-full rounded-lg bg-secondary-300\" />\n          </Skeleton>\n          <Skeleton className=\"w-2/5 rounded-lg\" isLoaded={isLoaded}>\n            <div className=\"h-3 w-full rounded-lg bg-secondary-200\" />\n          </Skeleton>\n        </div>\n      </Card>\n      <Button color=\"secondary\" size=\"sm\" variant=\"flat\" onPress={toggleLoad}>\n        {isLoaded ? \"Show\" : \"Hide\"} Skeleton\n      </Button>\n    </div>\n  );\n}\n`;var E={\"/App.jsx\":x},w={...E};var r={usage:k,standalone:b,loaded:w};var F={title:\"Skeleton\",description:\"Skeleton is a placeholder to show a loading state and the expected shape of a component.\"};function N(o){let e={code:\"code\",h1:\"h1\",h2:\"h2\",h3:\"h3\",hr:\"hr\",li:\"li\",p:\"p\",strong:\"strong\",ul:\"ul\",...o.components},{APITable:n,CarbonAd:l,CodeDemo:a,ComponentLinks:c,ImportTabs:h,PackageManagers:p,Spacer:i}=e;return n||d(\"APITable\",!0),l||d(\"CarbonAd\",!0),a||d(\"CodeDemo\",!0),c||d(\"ComponentLinks\",!0),h||d(\"ImportTabs\",!0),p||d(\"PackageManagers\",!0),i||d(\"Spacer\",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h1,{id:\"skeleton\",children:\"Skeleton\"}),`\n`,(0,t.jsx)(e.p,{children:\"Skeleton is a placeholder to show a loading state and the expected shape of a component.\"}),`\n`,(0,t.jsx)(c,{component:\"skeleton\"}),`\n`,(0,t.jsx)(e.hr,{}),`\n`,(0,t.jsx)(l,{}),`\n`,(0,t.jsx)(e.h2,{id:\"installation\",children:\"Installation\"}),`\n`,(0,t.jsx)(p,{showGlobalInstallWarning:!0,commands:{cli:\"npx heroui-cli@latest add skeleton\",npm:\"npm install @heroui/skeleton\",yarn:\"yarn add @heroui/skeleton\",pnpm:\"pnpm add @heroui/skeleton\",bun:\"bun add @heroui/skeleton\"}}),`\n`,(0,t.jsx)(e.h2,{id:\"import\",children:\"Import\"}),`\n`,(0,t.jsx)(h,{commands:{main:'import {Skeleton} from \"@heroui/react\";',individual:'import {Skeleton} from \"@heroui/skeleton\";'}}),`\n`,(0,t.jsx)(e.h2,{id:\"usage\",children:\"Usage\"}),`\n`,(0,t.jsx)(a,{title:\"Usage\",files:r.usage}),`\n`,(0,t.jsx)(e.h3,{id:\"standalone\",children:\"Standalone\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"Skeleton takes the shape of its \",(0,t.jsx)(e.code,{children:\"children\"}),` component by default, but you can also use\nit as a standalone component.`]}),`\n`,(0,t.jsx)(a,{title:\"Standalone\",files:r.standalone}),`\n`,(0,t.jsx)(e.h3,{id:\"loaded-state\",children:\"Loaded State\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"You can use the \",(0,t.jsx)(e.code,{children:\"isLoaded\"}),\" prop to stop the skeleton animation and show the children component.\"]}),`\n`,(0,t.jsx)(a,{title:\"Loaded State\",files:r.loaded}),`\n`,(0,t.jsx)(e.h2,{id:\"slots\",children:\"Slots\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"base\"}),\": The base slot of the skeleton, it contains the \",(0,t.jsx)(e.code,{children:\"before\"}),\" and \",(0,t.jsx)(e.code,{children:\"after\"}),\" pseudo elements to create the animation.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"content\"}),\": The wrapped component to show the skeleton shape. It is visible only when the \",(0,t.jsx)(e.code,{children:\"isLoaded\"}),\" prop is \",(0,t.jsx)(e.code,{children:\"true\"}),\".\"]}),`\n`]}),`\n`,(0,t.jsx)(i,{y:4}),`\n`,(0,t.jsx)(e.h2,{id:\"data-attributes\",children:\"Data Attributes\"}),`\n`,(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.code,{children:\"Skeleton\"}),\" has the following attributes on the \",(0,t.jsx)(e.code,{children:\"base\"}),\" element:\"]}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"data-loaded\"}),`:\nIndicates the loaded state of the skeleton. Based on the `,(0,t.jsx)(e.code,{children:\"isLoaded\"}),\" prop.\"]}),`\n`]}),`\n`,(0,t.jsx)(i,{y:4}),`\n`,(0,t.jsx)(e.h2,{id:\"api\",children:\"API\"}),`\n`,(0,t.jsx)(e.h3,{id:\"skeleton-props\",children:\"Skeleton Props\"}),`\n`,(0,t.jsx)(n,{data:[{attribute:\"children\",type:\"ReactNode\",description:\"The content of the skeleton.\",default:\"-\"},{attribute:\"isLoaded\",type:\"boolean\",description:\"Whether the skeleton is loaded.\",default:\"false\"},{attribute:\"disableAnimation\",type:\"boolean\",description:\"Whether to disable the animations.\",default:\"false\"},{attribute:\"classNames\",type:'Partial<Record<\"base\" | \"content\", string>>',description:\"Allows to set custom class names for the skeleton slots.\",default:\"-\"}]})]})}function v(o={}){let{wrapper:e}=o.components||{};return e?(0,t.jsx)(e,{...o,children:(0,t.jsx)(N,{...o})}):N(o)}function d(o,e){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+o+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return T(U);})();\n;return Component;"
  },
  "_id": "docs/components/skeleton.mdx",
  "_raw": {
    "sourceFilePath": "docs/components/skeleton.mdx",
    "sourceFileName": "skeleton.mdx",
    "sourceFileDir": "docs/components",
    "contentType": "mdx",
    "flattenedPath": "docs/components/skeleton"
  },
  "type": "Doc",
  "slug": "/docs/components/skeleton",
  "slugAsParams": "components/skeleton",
  "url": "/docs/components/skeleton"
}