{
  "title": "Radio",
  "description": "Radio Group allow users to select a single option from a list of mutually exclusive options",
  "body": {
    "raw": "\nimport {radioGroupContent} from \"@/content/components/radio-group\";\n\n# Radio group\n\nRadio Group allow users to select a single option from a list of mutually exclusive options.\n\n<ComponentLinks component=\"radiogroup\" reactAriaHook=\"useRadioGroup\" npm=\"radio\" styles=\"radio\" source=\"radio\" />\n\n---\n\n<CarbonAd/>\n\n## Installation\n\n<PackageManagers\n  showGlobalInstallWarning\n  commands={{\n    cli: \"npx heroui-cli@latest add radio\",\n    npm: \"npm install @heroui/radio\",\n    yarn: \"yarn add @heroui/radio\",\n    pnpm: \"pnpm add @heroui/radio\",\n    bun: \"bun add @heroui/radio\"\n  }}\n/>\n\n## Import\n\n<ImportTabs\n  commands={{\n    main: 'import {RadioGroup, Radio} from \"@heroui/react\";',\n    individual: 'import {RadioGroup, Radio} from \"@heroui/radio\";',\n  }}\n/>\n\n## Usage\n\n<CodeDemo title=\"Usage\" files={radioGroupContent.usage} />\n\n### Disabled\n\n<CodeDemo title=\"Disabled\" files={radioGroupContent.disabled} />\n\n### Default Value\n\n<CodeDemo title=\"Default Value\" files={radioGroupContent.defaultValue} />\n\n### With Description\n\n<CodeDemo title=\"With Description\" files={radioGroupContent.withDescription} />\n\n### Horizontal\n\n<CodeDemo title=\"Horizontal\" files={radioGroupContent.horizontal} />\n\n### Controlled\n\nYou can use the `value` and `onValueChange` properties to control the radio input value.\n\n<CodeDemo title=\"Controlled\" files={radioGroupContent.controlled} />\n\n> **Note**: HeroUI `Radio` also supports native events like `onChange`, useful for form libraries\n> such as [Formik](https://formik.org/) and [React Hook Form](https://react-hook-form.com/).\n\n### Invalid\n\n<CodeDemo title=\"Invalid\" files={radioGroupContent.invalid} />\n\n## Slots\n\n- RadioGroup Slots\n\n  - **base**: Radio group root wrapper, it wraps the label and the wrapper.\n  - **wrapper**: Radio group wrapper, it wraps all Radios.\n  - **label**: Radio group label, it is placed before the wrapper.\n  - **description**: Description slot for the radio group.\n  - **errorMessage**: Error message slot for the radio group.\n\n- Radio Slots\n  - **base**: Radio root wrapper, it wraps all elements.\n  - **wrapper**: Radio wrapper, it wraps the control element.\n  - **hiddenInput**: The hidden input element that is used to handle the radio state.\n  - **labelWrapper**: Label and description wrapper.\n  - **label**: Label slot for the radio.\n  - **control**: Control element, it is the circle element.\n  - **description**: Description slot for the radio.\n\n### Custom Styles\n\nYou can customize the `RadioGroup` and `Radio` component by passing custom Tailwind CSS classes to the component slots.\n\n<CodeDemo title=\"Custom Styles\" files={radioGroupContent.customStyles} />\n\n### Custom Implementation\n\nIn case you need to customize the radio group even further, you can use the `useRadio` hook to create your own implementation.\n\n<CodeDemo title=\"Custom Implementation\" files={radioGroupContent.customImpl} />\n\n<Spacer y={4} />\n\n## Data Attributes\n\n- RadioGroup has the following attributes on the `base` element:\n\n  - **data-orientation**:\n    The orientation of the radio group. Based on `orientation` prop.\n\n- Radio has the following attributes on the `base` element:\n\n  - **data-selected**:\n    When the radio is checked. Based on `isSelected` prop.\n  - **data-pressed**:\n    When the radio is pressed. Based on [usePress](https://react-spectrum.adobe.com/react-aria/usePress.html).\n  - **data-invalid**:\n    When the radio is invalid. Based on `validationState` prop.\n  - **data-readonly**:\n    When the radio is readonly. Based on `isReadOnly` prop.\n  - **data-hover-unselected**:\n    When the radio is being hovered and unchecked. Based on [useHover](https://react-spectrum.adobe.com/react-aria/useHover.html).\n  - **data-hover**:\n    When the radio is being hovered. Based on [useHover](https://react-spectrum.adobe.com/react-aria/useHover.html).\n  - **data-focus**:\n    When the radio is being focused. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).\n  - **data-focus-visible**:\n    When the radio is being focused with the keyboard. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).\n  - **data-disabled**:\n    When the radio is disabled. Based on `isDisabled` prop.\n\n<Spacer y={4} />\n\n## Accessibility\n\n- Radio groups are exposed to assistive technology via ARIA.\n- Each radio is built with a native HTML `<input>` element, which can be optionally visually hidden to allow custom styling.\n- Full support for browser features like form autofill.\n- Keyboard event support for arrows keys.\n- Keyboard focus management and cross browser normalization.\n- Group and radio labeling support for assistive technology.\n\n<Spacer y={4} />\n\n## API\n\n### RadioGroup Props\n\n<APITable\n  data={[\n    {\n      attribute: \"children\",\n      type: \"ReactNode | ReactNode[]\", \n      description: \"The list of radio elements.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"label\",\n      type: \"ReactNode\",\n      description: \"The label of the radio group.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"size\", \n      type: \"sm | md | lg\",\n      description: \"The size of the radios.\",\n      default: \"md\"\n    },\n    {\n      attribute: \"color\",\n      type: \"default | primary | secondary | success | warning | danger\",\n      description: \"The color of the radios.\",\n      default: \"primary\"\n    },\n    {\n      attribute: \"orientation\",\n      type: \"horizontal | vertical\",\n      description: \"The orientation of the radio group.\",\n      default: \"vertical\"\n    },\n    {\n      attribute: \"name\",\n      type: \"string\",\n      description: \"The name of the RadioGroup, used when submitting an HTML form. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#name_and_radio_buttons).\",\n      default: \"-\"\n    },\n    {\n      attribute: \"value\",\n      type: \"string[]\",\n      description: \"The current selected value. (controlled)\",\n      default: \"-\"\n    },\n    {\n      attribute: \"defaultValue\",\n      type: \"string[]\", \n      description: \"The default selected value. (uncontrolled)\",\n      default: \"-\"\n    },\n    {\n      attribute: \"description\",\n      type: \"ReactNode\",\n      description: \"Radio group description.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"errorMessage\",\n      type: \"ReactNode | ((v: ValidationResult) => ReactNode)\",\n      description: \"Radio group error message.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"validate\",\n      type: \"(value: string) => ValidationError | true | null | undefined\",\n      description: \"Validate input values when committing (e.g. on blur), returning error messages for invalid values. Validation errors are displayed upon form submission if `validationBehavior` is set to `native`. For real-time validation, use the `isInvalid` prop.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"validationBehavior\",\n      type: \"native | aria\",\n      description: \"Whether to use native HTML form validation or ARIA validation. When wrapped in a Form component, the default is `aria`. Otherwise, the default is `native`.\",\n      default: \"native\"\n    },\n    {\n      attribute: \"isDisabled\",\n      type: \"boolean\",\n      description: \"Whether the radio group is disabled.\",\n      default: \"false\"\n    },\n    {\n      attribute: \"isRequired\",\n      type: \"boolean\", \n      description: \"Whether user checkboxes are required on the input before form submission.\",\n      default: \"false\"\n    },\n    {\n      attribute: \"isReadOnly\",\n      type: \"boolean\",\n      description: \"Whether the checkboxes can be selected but not changed by the user.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"isInvalid\",\n      type: \"boolean\",\n      description: \"Whether the radio group is invalid.\",\n      default: \"false\"\n    },\n    {\n      attribute: \"validationState\",\n      type: \"valid | invalid\",\n      description: \"Whether the inputs should display its \\\"valid\\\" or \\\"invalid\\\" visual styling. (Deprecated) use isInvalid instead.\",\n      default: \"false\"\n    },\n    {\n      attribute: \"disableAnimation\",\n      type: \"boolean\",\n      description: \"Whether the animation should be disabled.\",\n      default: \"false\"\n    },\n    {\n      attribute: \"classNames\",\n      type: \"Partial<Record<\\\"base\\\" | \\\"wrapper\\\" | \\\"label\\\", string>>\",\n      description: \"Allows to set custom class names for the radio group slots.\",\n      default: \"-\"\n    }\n  ]}\n/>\n\n### RadioGroup Events\n\n<APITable\n  data={[\n    {\n      attribute: \"onChange\",\n      type: \"React.ChangeEvent<HTMLInputElement>\",\n      description: \"Handler that is called when the element's value changes. You can pull out the new value by accessing event.target.value (string).\",\n      default: \"-\"\n    },\n    {\n      attribute: \"onValueChange\",\n      type: \"((value: string) => void)\",\n      description: \"Handler that is called when the value changes.\",\n      default: \"-\"\n    }\n  ]}\n/>\n\n### Radio Props\n\n<APITable\n  data={[\n    {\n      attribute: \"children\",\n      type: \"ReactNode\",\n      description: \"The label of the radio.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"label\",\n      type: \"ReactNode\",\n      description: \"The label of the radio.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"size\",\n      type: \"sm | md | lg\",\n      description: \"The size of the radio.\",\n      default: \"md\"\n    },\n    {\n      attribute: \"color\",\n      type: \"default | primary | secondary | success | warning | danger\",\n      description: \"The color of the radio.\",\n      default: \"primary\"\n    },\n    {\n      attribute: \"description\",\n      type: \"ReactNode\",\n      description: \"A description for the field. Provides a hint such as specific requirements for what to choose.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"isDisabled\",\n      type: \"boolean\",\n      description: \"Whether the radio is disabled.\",\n      default: \"false\"\n    },\n    {\n      attribute: \"isRequired\",\n      type: \"boolean\",\n      description: \"Whether user checkboxes are required on the input before form submission.\",\n      default: \"false\"\n    },\n    {\n      attribute: \"isReadOnly\",\n      type: \"boolean\",\n      description: \"Whether the checkboxes can be selected but not changed by the user.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"isInvalid\",\n      type: \"boolean\",\n      description: \"Whether the radio is invalid. This is based on the radio group validationState prop.\",\n      default: \"false\"\n    },\n    {\n      attribute: \"disableAnimation\",\n      type: \"boolean\",\n      description: \"Whether the animation should be disabled.\",\n      default: \"false\"\n    },\n    {\n      attribute: \"classNames\",\n      type: \"Partial<Record<\\\"base\\\" | \\\"wrapper\\\" | \\\"labelWrapper\\\" | \\\"label\\\" | \\\"control\\\" | \\\"description\\\", string>>\",\n      description: \"Allows to set custom class names for the radio slots.\",\n      default: \"-\"\n    }\n  ]}\n/>\n",
    "code": "var Component=(()=>{var F=Object.create;var s=Object.defineProperty;var V=Object.getOwnPropertyDescriptor;var j=Object.getOwnPropertyNames;var z=Object.getPrototypeOf,M=Object.prototype.hasOwnProperty;var E=(t,o)=>()=>(o||t((o={exports:{}}).exports,o),o.exports),_=(t,o)=>{for(var r in o)s(t,r,{get:o[r],enumerable:!0})},h=(t,o,r,d)=>{if(o&&typeof o==\"object\"||typeof o==\"function\")for(let i of j(o))!M.call(t,i)&&i!==r&&s(t,i,{get:()=>o[i],enumerable:!(d=V(o,i))||d.enumerable});return t};var U=(t,o,r)=>(r=t!=null?F(z(t)):{},h(o||!t||!t.__esModule?s(r,\"default\",{value:t,enumerable:!0}):r,t)),q=t=>h(s({},\"__esModule\",{value:!0}),t);var f=E((fe,m)=>{m.exports=_jsx_runtime});var he={};_(he,{default:()=>D,frontmatter:()=>ue});var e=U(f());var R=`import {RadioGroup, Radio} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <RadioGroup label=\"Select your favorite city\">\n      <Radio value=\"buenos-aires\">Buenos Aires</Radio>\n      <Radio value=\"sydney\">Sydney</Radio>\n      <Radio value=\"san-francisco\">San Francisco</Radio>\n      <Radio value=\"london\">London</Radio>\n      <Radio value=\"tokyo\">Tokyo</Radio>\n    </RadioGroup>\n  );\n}\n`;var Y={\"/App.jsx\":R},b={...Y};var g=`import {RadioGroup, Radio} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <RadioGroup isDisabled label=\"Select your favorite city\">\n      <Radio value=\"buenos-aires\">Buenos Aires</Radio>\n      <Radio value=\"sydney\">Sydney</Radio>\n      <Radio value=\"san-francisco\">San Francisco</Radio>\n      <Radio value=\"london\">London</Radio>\n      <Radio value=\"tokyo\">Tokyo</Radio>\n    </RadioGroup>\n  );\n}\n`;var K={\"/App.jsx\":g},v={...K};var y=`import {RadioGroup, Radio} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <RadioGroup label=\"Select your favorite city\" orientation=\"horizontal\">\n      <Radio value=\"buenos-aires\">Buenos Aires</Radio>\n      <Radio value=\"sydney\">Sydney</Radio>\n      <Radio value=\"san-francisco\">San Francisco</Radio>\n      <Radio value=\"london\">London</Radio>\n      <Radio value=\"tokyo\">Tokyo</Radio>\n    </RadioGroup>\n  );\n}\n`;var J={\"/App.jsx\":y},x={...J};var C=`import {RadioGroup, Radio} from \"@heroui/react\";\n\nexport default function App() {\n  const [selected, setSelected] = React.useState(\"london\");\n\n  return (\n    <div className=\"flex flex-col gap-3\">\n      <RadioGroup label=\"Select your favorite city\" value={selected} onValueChange={setSelected}>\n        <Radio value=\"buenos-aires\">Buenos Aires</Radio>\n        <Radio value=\"sydney\">Sydney</Radio>\n        <Radio value=\"san-francisco\">San Francisco</Radio>\n        <Radio value=\"london\">London</Radio>\n        <Radio value=\"tokyo\">Tokyo</Radio>\n      </RadioGroup>\n      <p className=\"text-default-500 text-small\">Selected: {selected}</p>\n    </div>\n  );\n}\n`;var Z={\"/App.jsx\":C},w={...Z};var A=`import {RadioGroup, Radio} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <RadioGroup color=\"secondary\" defaultValue=\"london\" label=\"Select your favorite city\">\n      <Radio value=\"buenos-aires\">Buenos Aires</Radio>\n      <Radio value=\"sydney\">Sydney</Radio>\n      <Radio value=\"san-francisco\">San Francisco</Radio>\n      <Radio value=\"london\">London</Radio>\n      <Radio value=\"tokyo\">Tokyo</Radio>\n    </RadioGroup>\n  );\n}\n`;var oe={\"/App.jsx\":A},P={...oe};var G=`import {RadioGroup, Radio} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <RadioGroup color=\"warning\" label=\"Select your favorite city\">\n      <Radio description=\"The capital of Argentina\" value=\"buenos-aires\">\n        Buenos Aires\n      </Radio>\n      <Radio description=\"The capital of Australia\" value=\"canberra\">\n        Canberra\n      </Radio>\n      <Radio description=\"The capital of England\" value=\"london\">\n        London\n      </Radio>\n      <Radio description=\"The capital of Japan\" value=\"tokyo\">\n        Tokyo\n      </Radio>\n    </RadioGroup>\n  );\n}\n`;var ie={\"/App.jsx\":G},S={...ie};var k=`import {RadioGroup, Radio, cn} from \"@heroui/react\";\n\nexport const CustomRadio = (props) => {\n  const {children, ...otherProps} = props;\n\n  return (\n    <Radio\n      {...otherProps}\n      classNames={{\n        base: cn(\n          \"inline-flex m-0 bg-content1 hover:bg-content2 items-center justify-between\",\n          \"flex-row-reverse max-w-[300px] cursor-pointer rounded-lg gap-4 p-4 border-2 border-transparent\",\n          \"data-[selected=true]:border-primary\",\n        ),\n      }}\n    >\n      {children}\n    </Radio>\n  );\n};\n\nexport default function App() {\n  return (\n    <RadioGroup description=\"Selected plan can be changed at any time.\" label=\"Plans\">\n      <CustomRadio description=\"Up to 20 items\" value=\"free\">\n        Free\n      </CustomRadio>\n      <CustomRadio description=\"Unlimited items. $10 per month.\" value=\"pro\">\n        Pro\n      </CustomRadio>\n      <CustomRadio description=\"24/7 support. Contact us for pricing.\" value=\"enterprise\">\n        Enterprise\n      </CustomRadio>\n    </RadioGroup>\n  );\n}\n`;var ae={\"/App.jsx\":k},T={...ae};var W=`import {RadioGroup, useRadio, VisuallyHidden, cn} from \"@heroui/react\";\n\nexport const CustomRadio = (props) => {\n  const {\n    Component,\n    children,\n    description,\n    getBaseProps,\n    getWrapperProps,\n    getInputProps,\n    getLabelProps,\n    getLabelWrapperProps,\n    getControlProps,\n  } = useRadio(props);\n\n  return (\n    <Component\n      {...getBaseProps()}\n      className={cn(\n        \"group inline-flex items-center hover:opacity-70 active:opacity-50 justify-between flex-row-reverse tap-highlight-transparent\",\n        \"max-w-[300px] cursor-pointer border-2 border-default rounded-lg gap-4 p-4\",\n        \"data-[selected=true]:border-primary\",\n      )}\n    >\n      <VisuallyHidden>\n        <input {...getInputProps()} />\n      </VisuallyHidden>\n      <span {...getWrapperProps()}>\n        <span {...getControlProps()} />\n      </span>\n      <div {...getLabelWrapperProps()}>\n        {children && <span {...getLabelProps()}>{children}</span>}\n        {description && (\n          <span className=\"text-small text-foreground opacity-70\">{description}</span>\n        )}\n      </div>\n    </Component>\n  );\n};\n\nexport default function App() {\n  return (\n    <RadioGroup label=\"Plans\">\n      <CustomRadio description=\"Up to 20 items\" value=\"free\">\n        Free\n      </CustomRadio>\n      <CustomRadio description=\"Unlimited items. $10 per month.\" value=\"pro\">\n        Pro\n      </CustomRadio>\n      <CustomRadio description=\"24/7 support. Contact us for pricing.\" value=\"enterprise\">\n        Enterprise\n      </CustomRadio>\n    </RadioGroup>\n  );\n}\n`;var I=`import React from \"react\";\nimport {RadioGroup, useRadio, VisuallyHidden, RadioProps, cn} from \"@heroui/react\";\n\nexport const CustomRadio = (props: RadioProps) => {\n  const {\n    Component,\n    children,\n    description,\n    getBaseProps,\n    getWrapperProps,\n    getInputProps,\n    getLabelProps,\n    getLabelWrapperProps,\n    getControlProps,\n  } = useRadio(props);\n\n  return (\n    <Component\n      {...getBaseProps()}\n      className={cn(\n        \"group inline-flex items-center justify-between hover:bg-content2 flex-row-reverse\",\n        \"max-w-[300px] cursor-pointer border-2 border-default rounded-lg gap-4 p-4\",\n        \"data-[selected=true]:border-primary\",\n      )}\n    >\n      <VisuallyHidden>\n        <input {...getInputProps()} />\n      </VisuallyHidden>\n      <span {...getWrapperProps()}>\n        <span {...getControlProps()} />\n      </span>\n      <div {...getLabelWrapperProps()}>\n        {children && <span {...getLabelProps()}>{children}</span>}\n        {description && (\n          <span className=\"text-small text-foreground opacity-70\">{description}</span>\n        )}\n      </div>\n    </Component>\n  );\n};\n\nexport default function App() {\n  return (\n    <RadioGroup label=\"Plans\">\n      <CustomRadio description=\"Up to 20 items\" value=\"free\">\n        Free\n      </CustomRadio>\n      <CustomRadio description=\"Unlimited items. $10 per month.\" value=\"pro\">\n        Pro\n      </CustomRadio>\n      <CustomRadio description=\"24/7 support. Contact us for pricing.\" value=\"enterprise\">\n        Enterprise\n      </CustomRadio>\n    </RadioGroup>\n  );\n}\n`;var le={\"/App.jsx\":W},se={\"/App.tsx\":I},L={...le,...se};var B=`import {RadioGroup, Radio} from \"@heroui/react\";\n\nexport default function App() {\n  const [selected, setSelected] = React.useState(\"london\");\n\n  const validOptions = [\"buenos-aires\", \"san-francisco\", \"tokyo\"];\n\n  const isInvalid = !validOptions.includes(selected);\n\n  return (\n    <div className=\"flex flex-col gap-3\">\n      <RadioGroup\n        isInvalid={isInvalid}\n        label=\"Select your favorite city\"\n        value={selected}\n        onValueChange={setSelected}\n      >\n        <Radio value=\"buenos-aires\">Buenos Aires</Radio>\n        <Radio value=\"sydney\">Sydney</Radio>\n        <Radio value=\"san-francisco\">San Francisco</Radio>\n        <Radio value=\"london\">London</Radio>\n        <Radio value=\"tokyo\">Tokyo</Radio>\n      </RadioGroup>\n      <p className=\"text-default-500 text-small\">Selected: {selected}</p>\n    </div>\n  );\n}\n`;var ce={\"/App.jsx\":B},H={...ce};var a={usage:b,disabled:v,horizontal:x,controlled:w,invalid:H,defaultValue:P,withDescription:S,customStyles:T,customImpl:L};var ue={title:\"Radio\",description:\"Radio Group allow users to select a single option from a list of mutually exclusive options\"};function N(t){let o={a:\"a\",blockquote:\"blockquote\",code:\"code\",h1:\"h1\",h2:\"h2\",h3:\"h3\",hr:\"hr\",li:\"li\",p:\"p\",strong:\"strong\",ul:\"ul\",...t.components},{APITable:r,CarbonAd:d,CodeDemo:i,ComponentLinks:p,ImportTabs:c,PackageManagers:u,Spacer:l}=o;return r||n(\"APITable\",!0),d||n(\"CarbonAd\",!0),i||n(\"CodeDemo\",!0),p||n(\"ComponentLinks\",!0),c||n(\"ImportTabs\",!0),u||n(\"PackageManagers\",!0),l||n(\"Spacer\",!0),(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(o.h1,{id:\"radio-group\",children:\"Radio group\"}),`\n`,(0,e.jsx)(o.p,{children:\"Radio Group allow users to select a single option from a list of mutually exclusive options.\"}),`\n`,(0,e.jsx)(p,{component:\"radiogroup\",reactAriaHook:\"useRadioGroup\",npm:\"radio\",styles:\"radio\",source:\"radio\"}),`\n`,(0,e.jsx)(o.hr,{}),`\n`,(0,e.jsx)(d,{}),`\n`,(0,e.jsx)(o.h2,{id:\"installation\",children:\"Installation\"}),`\n`,(0,e.jsx)(u,{showGlobalInstallWarning:!0,commands:{cli:\"npx heroui-cli@latest add radio\",npm:\"npm install @heroui/radio\",yarn:\"yarn add @heroui/radio\",pnpm:\"pnpm add @heroui/radio\",bun:\"bun add @heroui/radio\"}}),`\n`,(0,e.jsx)(o.h2,{id:\"import\",children:\"Import\"}),`\n`,(0,e.jsx)(c,{commands:{main:'import {RadioGroup, Radio} from \"@heroui/react\";',individual:'import {RadioGroup, Radio} from \"@heroui/radio\";'}}),`\n`,(0,e.jsx)(o.h2,{id:\"usage\",children:\"Usage\"}),`\n`,(0,e.jsx)(i,{title:\"Usage\",files:a.usage}),`\n`,(0,e.jsx)(o.h3,{id:\"disabled\",children:\"Disabled\"}),`\n`,(0,e.jsx)(i,{title:\"Disabled\",files:a.disabled}),`\n`,(0,e.jsx)(o.h3,{id:\"default-value\",children:\"Default Value\"}),`\n`,(0,e.jsx)(i,{title:\"Default Value\",files:a.defaultValue}),`\n`,(0,e.jsx)(o.h3,{id:\"with-description\",children:\"With Description\"}),`\n`,(0,e.jsx)(i,{title:\"With Description\",files:a.withDescription}),`\n`,(0,e.jsx)(o.h3,{id:\"horizontal\",children:\"Horizontal\"}),`\n`,(0,e.jsx)(i,{title:\"Horizontal\",files:a.horizontal}),`\n`,(0,e.jsx)(o.h3,{id:\"controlled\",children:\"Controlled\"}),`\n`,(0,e.jsxs)(o.p,{children:[\"You can use the \",(0,e.jsx)(o.code,{children:\"value\"}),\" and \",(0,e.jsx)(o.code,{children:\"onValueChange\"}),\" properties to control the radio input value.\"]}),`\n`,(0,e.jsx)(i,{title:\"Controlled\",files:a.controlled}),`\n`,(0,e.jsxs)(o.blockquote,{children:[`\n`,(0,e.jsxs)(o.p,{children:[(0,e.jsx)(o.strong,{children:\"Note\"}),\": HeroUI \",(0,e.jsx)(o.code,{children:\"Radio\"}),\" also supports native events like \",(0,e.jsx)(o.code,{children:\"onChange\"}),`, useful for form libraries\nsuch as `,(0,e.jsx)(o.a,{href:\"https://formik.org/\",children:\"Formik\"}),\" and \",(0,e.jsx)(o.a,{href:\"https://react-hook-form.com/\",children:\"React Hook Form\"}),\".\"]}),`\n`]}),`\n`,(0,e.jsx)(o.h3,{id:\"invalid\",children:\"Invalid\"}),`\n`,(0,e.jsx)(i,{title:\"Invalid\",files:a.invalid}),`\n`,(0,e.jsx)(o.h2,{id:\"slots\",children:\"Slots\"}),`\n`,(0,e.jsxs)(o.ul,{children:[`\n`,(0,e.jsxs)(o.li,{children:[`\n`,(0,e.jsx)(o.p,{children:\"RadioGroup Slots\"}),`\n`,(0,e.jsxs)(o.ul,{children:[`\n`,(0,e.jsxs)(o.li,{children:[(0,e.jsx)(o.strong,{children:\"base\"}),\": Radio group root wrapper, it wraps the label and the wrapper.\"]}),`\n`,(0,e.jsxs)(o.li,{children:[(0,e.jsx)(o.strong,{children:\"wrapper\"}),\": Radio group wrapper, it wraps all Radios.\"]}),`\n`,(0,e.jsxs)(o.li,{children:[(0,e.jsx)(o.strong,{children:\"label\"}),\": Radio group label, it is placed before the wrapper.\"]}),`\n`,(0,e.jsxs)(o.li,{children:[(0,e.jsx)(o.strong,{children:\"description\"}),\": Description slot for the radio group.\"]}),`\n`,(0,e.jsxs)(o.li,{children:[(0,e.jsx)(o.strong,{children:\"errorMessage\"}),\": Error message slot for the radio group.\"]}),`\n`]}),`\n`]}),`\n`,(0,e.jsxs)(o.li,{children:[`\n`,(0,e.jsx)(o.p,{children:\"Radio Slots\"}),`\n`,(0,e.jsxs)(o.ul,{children:[`\n`,(0,e.jsxs)(o.li,{children:[(0,e.jsx)(o.strong,{children:\"base\"}),\": Radio root wrapper, it wraps all elements.\"]}),`\n`,(0,e.jsxs)(o.li,{children:[(0,e.jsx)(o.strong,{children:\"wrapper\"}),\": Radio wrapper, it wraps the control element.\"]}),`\n`,(0,e.jsxs)(o.li,{children:[(0,e.jsx)(o.strong,{children:\"hiddenInput\"}),\": The hidden input element that is used to handle the radio state.\"]}),`\n`,(0,e.jsxs)(o.li,{children:[(0,e.jsx)(o.strong,{children:\"labelWrapper\"}),\": Label and description wrapper.\"]}),`\n`,(0,e.jsxs)(o.li,{children:[(0,e.jsx)(o.strong,{children:\"label\"}),\": Label slot for the radio.\"]}),`\n`,(0,e.jsxs)(o.li,{children:[(0,e.jsx)(o.strong,{children:\"control\"}),\": Control element, it is the circle element.\"]}),`\n`,(0,e.jsxs)(o.li,{children:[(0,e.jsx)(o.strong,{children:\"description\"}),\": Description slot for the radio.\"]}),`\n`]}),`\n`]}),`\n`]}),`\n`,(0,e.jsx)(o.h3,{id:\"custom-styles\",children:\"Custom Styles\"}),`\n`,(0,e.jsxs)(o.p,{children:[\"You can customize the \",(0,e.jsx)(o.code,{children:\"RadioGroup\"}),\" and \",(0,e.jsx)(o.code,{children:\"Radio\"}),\" component by passing custom Tailwind CSS classes to the component slots.\"]}),`\n`,(0,e.jsx)(i,{title:\"Custom Styles\",files:a.customStyles}),`\n`,(0,e.jsx)(o.h3,{id:\"custom-implementation\",children:\"Custom Implementation\"}),`\n`,(0,e.jsxs)(o.p,{children:[\"In case you need to customize the radio group even further, you can use the \",(0,e.jsx)(o.code,{children:\"useRadio\"}),\" hook to create your own implementation.\"]}),`\n`,(0,e.jsx)(i,{title:\"Custom Implementation\",files:a.customImpl}),`\n`,(0,e.jsx)(l,{y:4}),`\n`,(0,e.jsx)(o.h2,{id:\"data-attributes\",children:\"Data Attributes\"}),`\n`,(0,e.jsxs)(o.ul,{children:[`\n`,(0,e.jsxs)(o.li,{children:[`\n`,(0,e.jsxs)(o.p,{children:[\"RadioGroup has the following attributes on the \",(0,e.jsx)(o.code,{children:\"base\"}),\" element:\"]}),`\n`,(0,e.jsxs)(o.ul,{children:[`\n`,(0,e.jsxs)(o.li,{children:[(0,e.jsx)(o.strong,{children:\"data-orientation\"}),`:\nThe orientation of the radio group. Based on `,(0,e.jsx)(o.code,{children:\"orientation\"}),\" prop.\"]}),`\n`]}),`\n`]}),`\n`,(0,e.jsxs)(o.li,{children:[`\n`,(0,e.jsxs)(o.p,{children:[\"Radio has the following attributes on the \",(0,e.jsx)(o.code,{children:\"base\"}),\" element:\"]}),`\n`,(0,e.jsxs)(o.ul,{children:[`\n`,(0,e.jsxs)(o.li,{children:[(0,e.jsx)(o.strong,{children:\"data-selected\"}),`:\nWhen the radio is checked. Based on `,(0,e.jsx)(o.code,{children:\"isSelected\"}),\" prop.\"]}),`\n`,(0,e.jsxs)(o.li,{children:[(0,e.jsx)(o.strong,{children:\"data-pressed\"}),`:\nWhen the radio is pressed. Based on `,(0,e.jsx)(o.a,{href:\"https://react-spectrum.adobe.com/react-aria/usePress.html\",children:\"usePress\"}),\".\"]}),`\n`,(0,e.jsxs)(o.li,{children:[(0,e.jsx)(o.strong,{children:\"data-invalid\"}),`:\nWhen the radio is invalid. Based on `,(0,e.jsx)(o.code,{children:\"validationState\"}),\" prop.\"]}),`\n`,(0,e.jsxs)(o.li,{children:[(0,e.jsx)(o.strong,{children:\"data-readonly\"}),`:\nWhen the radio is readonly. Based on `,(0,e.jsx)(o.code,{children:\"isReadOnly\"}),\" prop.\"]}),`\n`,(0,e.jsxs)(o.li,{children:[(0,e.jsx)(o.strong,{children:\"data-hover-unselected\"}),`:\nWhen the radio is being hovered and unchecked. Based on `,(0,e.jsx)(o.a,{href:\"https://react-spectrum.adobe.com/react-aria/useHover.html\",children:\"useHover\"}),\".\"]}),`\n`,(0,e.jsxs)(o.li,{children:[(0,e.jsx)(o.strong,{children:\"data-hover\"}),`:\nWhen the radio is being hovered. Based on `,(0,e.jsx)(o.a,{href:\"https://react-spectrum.adobe.com/react-aria/useHover.html\",children:\"useHover\"}),\".\"]}),`\n`,(0,e.jsxs)(o.li,{children:[(0,e.jsx)(o.strong,{children:\"data-focus\"}),`:\nWhen the radio is being focused. Based on `,(0,e.jsx)(o.a,{href:\"https://react-spectrum.adobe.com/react-aria/useFocusRing.html\",children:\"useFocusRing\"}),\".\"]}),`\n`,(0,e.jsxs)(o.li,{children:[(0,e.jsx)(o.strong,{children:\"data-focus-visible\"}),`:\nWhen the radio is being focused with the keyboard. Based on `,(0,e.jsx)(o.a,{href:\"https://react-spectrum.adobe.com/react-aria/useFocusRing.html\",children:\"useFocusRing\"}),\".\"]}),`\n`,(0,e.jsxs)(o.li,{children:[(0,e.jsx)(o.strong,{children:\"data-disabled\"}),`:\nWhen the radio is disabled. Based on `,(0,e.jsx)(o.code,{children:\"isDisabled\"}),\" prop.\"]}),`\n`]}),`\n`]}),`\n`]}),`\n`,(0,e.jsx)(l,{y:4}),`\n`,(0,e.jsx)(o.h2,{id:\"accessibility\",children:\"Accessibility\"}),`\n`,(0,e.jsxs)(o.ul,{children:[`\n`,(0,e.jsx)(o.li,{children:\"Radio groups are exposed to assistive technology via ARIA.\"}),`\n`,(0,e.jsxs)(o.li,{children:[\"Each radio is built with a native HTML \",(0,e.jsx)(o.code,{children:\"<input>\"}),\" element, which can be optionally visually hidden to allow custom styling.\"]}),`\n`,(0,e.jsx)(o.li,{children:\"Full support for browser features like form autofill.\"}),`\n`,(0,e.jsx)(o.li,{children:\"Keyboard event support for arrows keys.\"}),`\n`,(0,e.jsx)(o.li,{children:\"Keyboard focus management and cross browser normalization.\"}),`\n`,(0,e.jsx)(o.li,{children:\"Group and radio labeling support for assistive technology.\"}),`\n`]}),`\n`,(0,e.jsx)(l,{y:4}),`\n`,(0,e.jsx)(o.h2,{id:\"api\",children:\"API\"}),`\n`,(0,e.jsx)(o.h3,{id:\"radiogroup-props\",children:\"RadioGroup Props\"}),`\n`,(0,e.jsx)(r,{data:[{attribute:\"children\",type:\"ReactNode | ReactNode[]\",description:\"The list of radio elements.\",default:\"-\"},{attribute:\"label\",type:\"ReactNode\",description:\"The label of the radio group.\",default:\"-\"},{attribute:\"size\",type:\"sm | md | lg\",description:\"The size of the radios.\",default:\"md\"},{attribute:\"color\",type:\"default | primary | secondary | success | warning | danger\",description:\"The color of the radios.\",default:\"primary\"},{attribute:\"orientation\",type:\"horizontal | vertical\",description:\"The orientation of the radio group.\",default:\"vertical\"},{attribute:\"name\",type:\"string\",description:\"The name of the RadioGroup, used when submitting an HTML form. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#name_and_radio_buttons).\",default:\"-\"},{attribute:\"value\",type:\"string[]\",description:\"The current selected value. (controlled)\",default:\"-\"},{attribute:\"defaultValue\",type:\"string[]\",description:\"The default selected value. (uncontrolled)\",default:\"-\"},{attribute:\"description\",type:\"ReactNode\",description:\"Radio group description.\",default:\"-\"},{attribute:\"errorMessage\",type:\"ReactNode | ((v: ValidationResult) => ReactNode)\",description:\"Radio group error message.\",default:\"-\"},{attribute:\"validate\",type:\"(value: string) => ValidationError | true | null | undefined\",description:\"Validate input values when committing (e.g. on blur), returning error messages for invalid values. Validation errors are displayed upon form submission if `validationBehavior` is set to `native`. For real-time validation, use the `isInvalid` prop.\",default:\"-\"},{attribute:\"validationBehavior\",type:\"native | aria\",description:\"Whether to use native HTML form validation or ARIA validation. When wrapped in a Form component, the default is `aria`. Otherwise, the default is `native`.\",default:\"native\"},{attribute:\"isDisabled\",type:\"boolean\",description:\"Whether the radio group is disabled.\",default:\"false\"},{attribute:\"isRequired\",type:\"boolean\",description:\"Whether user checkboxes are required on the input before form submission.\",default:\"false\"},{attribute:\"isReadOnly\",type:\"boolean\",description:\"Whether the checkboxes can be selected but not changed by the user.\",default:\"-\"},{attribute:\"isInvalid\",type:\"boolean\",description:\"Whether the radio group is invalid.\",default:\"false\"},{attribute:\"validationState\",type:\"valid | invalid\",description:'Whether the inputs should display its \"valid\" or \"invalid\" visual styling. (Deprecated) use isInvalid instead.',default:\"false\"},{attribute:\"disableAnimation\",type:\"boolean\",description:\"Whether the animation should be disabled.\",default:\"false\"},{attribute:\"classNames\",type:'Partial<Record<\"base\" | \"wrapper\" | \"label\", string>>',description:\"Allows to set custom class names for the radio group slots.\",default:\"-\"}]}),`\n`,(0,e.jsx)(o.h3,{id:\"radiogroup-events\",children:\"RadioGroup Events\"}),`\n`,(0,e.jsx)(r,{data:[{attribute:\"onChange\",type:\"React.ChangeEvent<HTMLInputElement>\",description:\"Handler that is called when the element's value changes. You can pull out the new value by accessing event.target.value (string).\",default:\"-\"},{attribute:\"onValueChange\",type:\"((value: string) => void)\",description:\"Handler that is called when the value changes.\",default:\"-\"}]}),`\n`,(0,e.jsx)(o.h3,{id:\"radio-props\",children:\"Radio Props\"}),`\n`,(0,e.jsx)(r,{data:[{attribute:\"children\",type:\"ReactNode\",description:\"The label of the radio.\",default:\"-\"},{attribute:\"label\",type:\"ReactNode\",description:\"The label of the radio.\",default:\"-\"},{attribute:\"size\",type:\"sm | md | lg\",description:\"The size of the radio.\",default:\"md\"},{attribute:\"color\",type:\"default | primary | secondary | success | warning | danger\",description:\"The color of the radio.\",default:\"primary\"},{attribute:\"description\",type:\"ReactNode\",description:\"A description for the field. Provides a hint such as specific requirements for what to choose.\",default:\"-\"},{attribute:\"isDisabled\",type:\"boolean\",description:\"Whether the radio is disabled.\",default:\"false\"},{attribute:\"isRequired\",type:\"boolean\",description:\"Whether user checkboxes are required on the input before form submission.\",default:\"false\"},{attribute:\"isReadOnly\",type:\"boolean\",description:\"Whether the checkboxes can be selected but not changed by the user.\",default:\"-\"},{attribute:\"isInvalid\",type:\"boolean\",description:\"Whether the radio is invalid. This is based on the radio group validationState prop.\",default:\"false\"},{attribute:\"disableAnimation\",type:\"boolean\",description:\"Whether the animation should be disabled.\",default:\"false\"},{attribute:\"classNames\",type:'Partial<Record<\"base\" | \"wrapper\" | \"labelWrapper\" | \"label\" | \"control\" | \"description\", string>>',description:\"Allows to set custom class names for the radio slots.\",default:\"-\"}]})]})}function D(t={}){let{wrapper:o}=t.components||{};return o?(0,e.jsx)(o,{...t,children:(0,e.jsx)(N,{...t})}):N(t)}function n(t,o){throw new Error(\"Expected \"+(o?\"component\":\"object\")+\" `\"+t+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return q(he);})();\n;return Component;"
  },
  "_id": "docs/components/radio-group.mdx",
  "_raw": {
    "sourceFilePath": "docs/components/radio-group.mdx",
    "sourceFileName": "radio-group.mdx",
    "sourceFileDir": "docs/components",
    "contentType": "mdx",
    "flattenedPath": "docs/components/radio-group"
  },
  "type": "Doc",
  "slug": "/docs/components/radio-group",
  "slugAsParams": "components/radio-group",
  "url": "/docs/components/radio-group"
}