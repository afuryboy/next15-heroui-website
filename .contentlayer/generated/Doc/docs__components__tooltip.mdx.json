{
  "title": "Tooltip",
  "description": "Tooltips display a brief, informative message that appears when a user interacts with an element.",
  "body": {
    "raw": "\nimport {tooltipContent} from \"@/content/components/tooltip\";\n\n# Tooltip\n\nTooltips display a brief, informative message that appears when a user interacts with an element.\n\n<ComponentLinks component=\"tooltip\" styles=\"popover\" reactAriaHook=\"useTooltipTrigger\" />\n\n---\n\n<CarbonAd/>\n\n## Installation\n\n<PackageManagers\n  showGlobalInstallWarning\n  commands={{\n    cli: \"npx heroui-cli@latest add tooltip\",\n    npm: \"npm install @heroui/tooltip\",\n    yarn: \"yarn add @heroui/tooltip\",\n    pnpm: \"pnpm add @heroui/tooltip\",\n    bun: \"bun add @heroui/tooltip\"\n  }}\n/>\n\n## Import\n\n<ImportTabs\n  commands={{\n    main: 'import {Tooltip} from \"@heroui/react\";',\n    individual: 'import {Tooltip} from \"@heroui/tooltip\";',\n  }}\n/>\n\n> For individual installation, please note that you should add `./node_modules/@heroui/theme/dist/components/popover.js` to your `tailwind.config.js` file instead since tooltip reuses popover styles.\n\n## Usage\n\n<CodeDemo title=\"Usage\" files={tooltipContent.usage} />\n\n### With Arrow\n\n<CodeDemo title=\"With Arrow\" files={tooltipContent.arrow} />\n\n### Colors\n\n<CodeDemo title=\"Colors\" files={tooltipContent.colors} />\n\n### Placements\n\n<CodeDemo title=\"Placements\" files={tooltipContent.placements} />\n\n### Offset\n\n<CodeDemo title=\"Offset\" files={tooltipContent.offset} />\n\n### Controlled\n\n<CodeDemo title=\"Controlled\" files={tooltipContent.controlled} />\n\n### With Delay\n\nYou can control the `open` and `close` delay of the tooltip with `delay` and `closeDelay` props.\n\n<CodeDemo title=\"With Delay\" files={tooltipContent.delay} />\n\nHovering over the second button shows the tooltip immediately. If you wait for a delay before hovering\nanother element, the delay restarts.\n\n<CodeDemo title=\"With Delay Multiple\" files={tooltipContent.delayMultiple} />\n\n### Custom Content\n\n<CodeDemo title=\"Custom Content\" files={tooltipContent.customContent} />\n\n### Custom Motion\n\nTooltip offers a `motionProps` property to customize the `enter` / `exit` animation.\n\n<CodeDemo title=\"Custom Motion\" files={tooltipContent.customMotion} />\n\n> Learn more about Framer motion variants [here](https://www.framer.com/motion/animation/#variants).\n\n## Slots\n\n- **base**: The main tooltip slot, it wraps the tooltip content.\n- **arrow**: The arrow slot, it wraps the tooltip arrow, the placement of the arrow is based on the tooltip placement, e.g. `data-[placement=top]:...`.\n\n### Custom Styles\n\nYou can customize the `Tooltip` component by passing custom Tailwind CSS classes to the component slots.\n\n<CodeDemo title=\"Custom Styles\" files={tooltipContent.customStyles} />\n\n<Spacer y={4} />\n\n## Data Attributes\n\n`Tooltip` has the following attributes on the `base` element:\n\n- **data-open**:\n  When the tooltip is open. Based on tooltip state.\n- **data-placement**:\n  The placement of the tooltip. Based on `placement` prop. The arrow element is positioned based on this attribute.\n- **data-disabled**:\n  When the tooltip is disabled. Based on `isDisabled` prop.\n\n<Spacer y={4} />\n\n## Accessibility\n\n- Keyboard focus management and cross browser normalization.\n- Hover management and cross browser normalization.\n- Labeling support for screen readers (aria-describedby).\n- Exposed as a tooltip to assistive technology via ARIA.\n- Matches native tooltip behavior with delay on hover of first tooltip and no delay on subsequent tooltips.\n\n<Spacer y={4} />\n\n## API\n\n### Tooltip Props\n\n<APITable\n  data={[\n    {\n      attribute: \"children*\",\n      type: \"ReactNode[]\",\n      description: \"The children to render. Usually a trigger element.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"content\",\n      type: \"ReactNode\",\n      description: \"The content to render inside the tooltip.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"size\",\n      type: \"sm | md | lg\",\n      description: \"The tooltip size. This change the content font size.\",\n      default: \"md\"\n    },\n    {\n      attribute: \"color\",\n      type: \"default | primary | secondary | success | warning | danger\",\n      description: \"The tooltip color theme.\",\n      default: \"default\"\n    },\n    {\n      attribute: \"radius\",\n      type: \"none | sm | md | lg | full\",\n      description: \"The tooltip border radius.\",\n      default: \"md\"\n    },\n    {\n      attribute: \"shadow\",\n      type: \"none | sm | md | lg\",\n      description: \"The tooltip shadow.\",\n      default: \"sm\"\n    },\n    {\n      attribute: \"placement\",\n      type: \"TooltipPlacement\",\n      description: \"The placement of the tooltip relative to its trigger reference.\",\n      default: \"top\"\n    },\n    {\n      attribute: \"delay\",\n      type: \"number\",\n      description: \"The delay in milliseconds before the tooltip opens.\",\n      default: \"0\"\n    },\n    {\n      attribute: \"closeDelay\",\n      type: \"number\",\n      description: \"The delay in milliseconds before the tooltip closes.\",\n      default: \"500\"\n    },\n    {\n      attribute: \"isOpen\",\n      type: \"boolean\",\n      description: \"Whether the tooltip is open by default (controlled).\",\n      default: \"-\"\n    },\n    {\n      attribute: \"defaultOpen\",\n      type: \"boolean\",\n      description: \"Whether the tooltip is open by default (uncontrolled).\",\n      default: \"-\"\n    },\n    {\n      attribute: \"offset\",\n      type: \"number\",\n      description: \"The distance or margin between the reference and popper. It is used internally to create an offset modifier.\",\n      default: \"7\"\n    },\n    {\n      attribute: \"containerPadding\",\n      type: \"number\",\n      description: \"The placement padding that should be applied between the element and its surrounding container.\",\n      default: \"12\"\n    },\n    {\n      attribute: \"crossOffset\",\n      type: \"number\",\n      description: \"The additional offset applied along the cross axis between the element and its anchor element.\",\n      default: \"0\"\n    },\n    {\n      attribute: \"showArrow\",\n      type: \"boolean\",\n      description: \"Whether the tooltip should have an arrow.\",\n      default: \"false\"\n    },\n    {\n      attribute: \"shouldFlip\",\n      type: \"boolean\",\n      description: \"Whether the tooltip should change its placement and flip when it's about to overflow its boundary area.\",\n      default: \"true\"\n    },\n    {\n      attribute: \"triggerScaleOnOpen\",\n      type: \"boolean\",\n      description: \"Whether the trigger should scale down when the tooltip is open.\",\n      default: \"true\"\n    },\n    {\n      attribute: \"isKeyboardDismissDisabled\",\n      type: \"boolean\",\n      description: \"Whether pressing the escape key to close the tooltip should be disabled.\",\n      default: \"false\"\n    },\n    {\n      attribute: \"isDismissable\",\n      type: \"boolean\",\n      description: \"Whether to close the overlay when the user interacts outside it.\",\n      default: \"false\"\n    },\n    {\n      attribute: \"shouldCloseOnBlur\",\n      type: \"boolean\",\n      description: \"Whether the tooltip should close when focus is lost or moves outside it.\",\n      default: \"true\"\n    },\n    {\n      attribute: \"motionProps\",\n      type: \"MotionProps\",\n      description: \"The props to modify the framer motion animation. Use the variants API to create your own animation.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"portalContainer\",\n      type: \"HTMLElement\",\n      description: \"The container element in which the overlay portal will be placed.\",\n      default: \"document.body\"\n    },\n    {\n      attribute: \"updatePositionDeps\",\n      type: \"any[]\",\n      description: \"The dependencies to force the tooltip position update.\",\n      default: \"[]\"\n    },\n    {\n      attribute: \"isDisabled\",\n      type: \"boolean\",\n      description: \"Whether the tooltip is disabled.\",\n      default: \"false\"\n    },\n    {\n      attribute: \"disableAnimation\",\n      type: \"boolean\",\n      description: \"Whether the tooltip is animated.\",\n      default: \"false\"\n    },\n    {\n      attribute: \"classNames\",\n      type: \"Partial<Record<\\\"base\\\"ï½œ\\\"content\\\", string>>\",\n      description: \"Allows to set custom class names for the tooltip slots.\",\n      default: \"-\"\n    }\n  ]}\n/>\n\n### Tooltip Events\n\n<APITable\n  data={[\n    {\n      attribute: \"onOpenChange\",\n      type: \"(isOpen: boolean) => void\",\n      description: \"Handler that is called when the tooltip's open state changes.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"shouldCloseOnInteractOutside\",\n      type: \"(e: HTMLElement) => void\",\n      description: \"When user interacts with the argument element outside of the tooltip ref, return true if onClose should be called. This gives you a chance to filter out interaction with elements that should not dismiss the tooltip. By default, onClose will always be called on interaction outside the overlay ref.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"onClose\",\n      type: \"() => void\",\n      description: \"Handler that is called when the tooltip should close.\",\n      default: \"-\"\n    }\n  ]}\n/>\n\n### Tooltip types\n\n<Spacer y={1} />\n\n#### Tooltip Placement\n\n```ts\ntype TooltipPlacement =\n  | \"top\"\n  | \"bottom\"\n  | \"right\"\n  | \"left\"\n  | \"top-start\"\n  | \"top-end\"\n  | \"bottom-start\"\n  | \"bottom-end\"\n  | \"left-start\"\n  | \"left-end\"\n  | \"right-start\"\n  | \"right-end\";\n```\n\n#### Motion Props\n\n```ts\nexport type MotionProps = HTMLMotionProps<\"div\">; // @see https://www.framer.com/motion/\n```\n",
    "code": "var Component=(()=>{var E=Object.create;var p=Object.defineProperty;var R=Object.getOwnPropertyDescriptor;var q=Object.getOwnPropertyNames;var F=Object.getPrototypeOf,U=Object.prototype.hasOwnProperty;var K=(o,e)=>()=>(e||o((e={exports:{}}).exports,e),e.exports),X=(o,e)=>{for(var i in e)p(o,i,{get:e[i],enumerable:!0})},h=(o,e,i,a)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let n of q(e))!U.call(o,n)&&n!==i&&p(o,n,{get:()=>e[n],enumerable:!(a=R(e,n))||a.enumerable});return o};var Y=(o,e,i)=>(i=o!=null?E(F(o)):{},h(e||!o||!o.__esModule?p(i,\"default\",{value:o,enumerable:!0}):i,o)),G=o=>h(p({},\"__esModule\",{value:!0}),o);var f=K((wt,m)=>{m.exports=_jsx_runtime});var Tt={};X(Tt,{default:()=>L,frontmatter:()=>yt});var t=Y(f());var b=`import {Tooltip, Button} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <Tooltip content=\"I am a tooltip\">\n      <Button>Hover me</Button>\n    </Tooltip>\n  );\n}\n`;var Q={\"/App.jsx\":b},y={...Q};var T=`import {Tooltip, Button} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <Tooltip content=\"I am a tooltip\" showArrow={true}>\n      <Button>Hover me</Button>\n    </Tooltip>\n  );\n}\n`;var Z={\"/App.jsx\":T},g={...Z};var w=`import {Tooltip, Button} from \"@heroui/react\";\n\nexport default function App() {\n  const colors = [\"default\", \"primary\", \"secondary\", \"success\", \"warning\", \"danger\", \"foreground\"];\n\n  return (\n    <div className=\"flex flex-wrap gap-4\">\n      {colors.map((color) => {\n        return (\n          <Tooltip key={color} className=\"capitalize\" color={color} content={color}>\n            <Button className=\"capitalize\" color={color} variant=\"flat\">\n              {color}\n            </Button>\n          </Tooltip>\n        );\n      })}\n    </div>\n  );\n}\n`;var tt={\"/App.jsx\":w},v={...tt};var x=`import {Tooltip, Button} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <div className=\"flex gap-2\">\n      <Tooltip color=\"success\" content=\"Tooltip 1\">\n        <Button color=\"success\" variant=\"faded\">\n          Default offset (7)\n        </Button>\n      </Tooltip>\n      <Tooltip color=\"success\" content=\"Tooltip 2\" offset={15}>\n        <Button color=\"success\" variant=\"faded\">\n          15 offset\n        </Button>\n      </Tooltip>\n      <Tooltip color=\"success\" content=\"Tooltip 3\" offset={-7}>\n        <Button color=\"success\" variant=\"faded\">\n          -7 offset\n        </Button>\n      </Tooltip>\n    </div>\n  );\n}\n`;var ot={\"/App.jsx\":x},A={...ot};var B=`import {Tooltip, Button} from \"@heroui/react\";\n\nexport default function App() {\n  const placements = [\n    \"top-start\",\n    \"top\",\n    \"top-end\",\n    \"bottom-start\",\n    \"bottom\",\n    \"bottom-end\",\n    \"left-start\",\n    \"left\",\n    \"left-end\",\n    \"right-start\",\n    \"right\",\n    \"right-end\",\n  ];\n\n  return (\n    <div className=\"flex flex-wrap md:inline-grid md:grid-cols-3 gap-4\">\n      {placements.map((placement) => (\n        <Tooltip key={placement} color=\"secondary\" content={placement} placement={placement}>\n          <Button className=\"capitalize\" color=\"secondary\" variant=\"flat\">\n            {placement}\n          </Button>\n        </Tooltip>\n      ))}\n    </div>\n  );\n}\n`;var it={\"/App.jsx\":B},C={...it};var O=`import {Tooltip, Button} from \"@heroui/react\";\n\nexport default function App() {\n  const [isOpen, setIsOpen] = React.useState(false);\n\n  return (\n    <div className=\"flex flex-col gap-2\">\n      <Tooltip content=\"I am a tooltip\" isOpen={isOpen} onOpenChange={(open) => setIsOpen(open)}>\n        <Button>Hover me</Button>\n      </Tooltip>\n      <p className=\"text-small text-default-500\">Open: {isOpen ? \"true\" : \"false\"}</p>\n    </div>\n  );\n}\n`;var lt={\"/App.jsx\":O},P={...lt};var D=`import {Tooltip, Button} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <div className=\"flex gap-2\">\n      <Tooltip color=\"warning\" content=\"Tooltip 1\" delay={1000}>\n        <Button color=\"warning\" variant=\"flat\">\n          Delay Open (1000ms)\n        </Button>\n      </Tooltip>\n      <Tooltip closeDelay={2000} color=\"warning\" content=\"Tooltip 2\">\n        <Button color=\"warning\" variant=\"flat\">\n          Delay Close (2000ms)\n        </Button>\n      </Tooltip>\n    </div>\n  );\n}\n`;var st={\"/App.jsx\":D},I={...st};var M=`import {Tooltip, Button} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <div className=\"flex gap-2\">\n      <Tooltip color=\"primary\" content=\"Tooltip 1\" delay={1000}>\n        <Button color=\"primary\" variant=\"flat\">\n          Hover me (delay 1000ms)\n        </Button>\n      </Tooltip>\n      <Tooltip color=\"primary\" content=\"Tooltip 2\">\n        <Button color=\"primary\" variant=\"flat\">\n          Then hover me\n        </Button>\n      </Tooltip>\n    </div>\n  );\n}\n`;var dt={\"/App.jsx\":M},j={...dt};var N=`import {Tooltip, Button} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <Tooltip\n      content={\n        <div className=\"px-1 py-2\">\n          <div className=\"text-small font-bold\">Custom Content</div>\n          <div className=\"text-tiny\">This is a custom tooltip content</div>\n        </div>\n      }\n    >\n      <Button variant=\"bordered\">Hover me</Button>\n    </Tooltip>\n  );\n}\n`;var ut={\"/App.jsx\":N},W={...ut};var k=`import {Tooltip, Button} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <Tooltip\n      closeDelay={0}\n      content=\"I am a tooltip\"\n      delay={0}\n      motionProps={{\n        variants: {\n          exit: {\n            opacity: 0,\n            transition: {\n              duration: 0.1,\n              ease: \"easeIn\",\n            },\n          },\n          enter: {\n            opacity: 1,\n            transition: {\n              duration: 0.15,\n              ease: \"easeOut\",\n            },\n          },\n        },\n      }}\n    >\n      <Button variant=\"flat\">Hover me</Button>\n    </Tooltip>\n  );\n}\n`;var mt={\"/App.jsx\":k},H={...mt};var S=`import {Tooltip, Button} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <Tooltip\n      showArrow\n      classNames={{\n        base: [\n          // arrow color\n          \"before:bg-neutral-400 dark:before:bg-white\",\n        ],\n        content: [\"py-2 px-4 shadow-xl\", \"text-black bg-gradient-to-br from-white to-neutral-400\"],\n      }}\n      content=\"I am a tooltip\"\n      placement=\"right\"\n    >\n      <Button variant=\"flat\">Hover me</Button>\n    </Tooltip>\n  );\n}\n`;var bt={\"/App.jsx\":S},z={...bt};var r={usage:y,arrow:g,colors:v,offset:A,placements:C,controlled:P,delay:I,delayMultiple:j,customContent:W,customMotion:H,customStyles:z};var yt={title:\"Tooltip\",description:\"Tooltips display a brief, informative message that appears when a user interacts with an element.\"};function _(o){let e={a:\"a\",blockquote:\"blockquote\",code:\"code\",h1:\"h1\",h2:\"h2\",h3:\"h3\",h4:\"h4\",hr:\"hr\",li:\"li\",p:\"p\",pre:\"pre\",strong:\"strong\",ul:\"ul\",...o.components},{APITable:i,CarbonAd:a,CodeDemo:n,ComponentLinks:d,ImportTabs:c,PackageManagers:u,Spacer:s}=e;return i||l(\"APITable\",!0),a||l(\"CarbonAd\",!0),n||l(\"CodeDemo\",!0),d||l(\"ComponentLinks\",!0),c||l(\"ImportTabs\",!0),u||l(\"PackageManagers\",!0),s||l(\"Spacer\",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h1,{id:\"tooltip\",children:\"Tooltip\"}),`\n`,(0,t.jsx)(e.p,{children:\"Tooltips display a brief, informative message that appears when a user interacts with an element.\"}),`\n`,(0,t.jsx)(d,{component:\"tooltip\",styles:\"popover\",reactAriaHook:\"useTooltipTrigger\"}),`\n`,(0,t.jsx)(e.hr,{}),`\n`,(0,t.jsx)(a,{}),`\n`,(0,t.jsx)(e.h2,{id:\"installation\",children:\"Installation\"}),`\n`,(0,t.jsx)(u,{showGlobalInstallWarning:!0,commands:{cli:\"npx heroui-cli@latest add tooltip\",npm:\"npm install @heroui/tooltip\",yarn:\"yarn add @heroui/tooltip\",pnpm:\"pnpm add @heroui/tooltip\",bun:\"bun add @heroui/tooltip\"}}),`\n`,(0,t.jsx)(e.h2,{id:\"import\",children:\"Import\"}),`\n`,(0,t.jsx)(c,{commands:{main:'import {Tooltip} from \"@heroui/react\";',individual:'import {Tooltip} from \"@heroui/tooltip\";'}}),`\n`,(0,t.jsxs)(e.blockquote,{children:[`\n`,(0,t.jsxs)(e.p,{children:[\"For individual installation, please note that you should add \",(0,t.jsx)(e.code,{children:\"./node_modules/@heroui/theme/dist/components/popover.js\"}),\" to your \",(0,t.jsx)(e.code,{children:\"tailwind.config.js\"}),\" file instead since tooltip reuses popover styles.\"]}),`\n`]}),`\n`,(0,t.jsx)(e.h2,{id:\"usage\",children:\"Usage\"}),`\n`,(0,t.jsx)(n,{title:\"Usage\",files:r.usage}),`\n`,(0,t.jsx)(e.h3,{id:\"with-arrow\",children:\"With Arrow\"}),`\n`,(0,t.jsx)(n,{title:\"With Arrow\",files:r.arrow}),`\n`,(0,t.jsx)(e.h3,{id:\"colors\",children:\"Colors\"}),`\n`,(0,t.jsx)(n,{title:\"Colors\",files:r.colors}),`\n`,(0,t.jsx)(e.h3,{id:\"placements\",children:\"Placements\"}),`\n`,(0,t.jsx)(n,{title:\"Placements\",files:r.placements}),`\n`,(0,t.jsx)(e.h3,{id:\"offset\",children:\"Offset\"}),`\n`,(0,t.jsx)(n,{title:\"Offset\",files:r.offset}),`\n`,(0,t.jsx)(e.h3,{id:\"controlled\",children:\"Controlled\"}),`\n`,(0,t.jsx)(n,{title:\"Controlled\",files:r.controlled}),`\n`,(0,t.jsx)(e.h3,{id:\"with-delay\",children:\"With Delay\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"You can control the \",(0,t.jsx)(e.code,{children:\"open\"}),\" and \",(0,t.jsx)(e.code,{children:\"close\"}),\" delay of the tooltip with \",(0,t.jsx)(e.code,{children:\"delay\"}),\" and \",(0,t.jsx)(e.code,{children:\"closeDelay\"}),\" props.\"]}),`\n`,(0,t.jsx)(n,{title:\"With Delay\",files:r.delay}),`\n`,(0,t.jsx)(e.p,{children:`Hovering over the second button shows the tooltip immediately. If you wait for a delay before hovering\nanother element, the delay restarts.`}),`\n`,(0,t.jsx)(n,{title:\"With Delay Multiple\",files:r.delayMultiple}),`\n`,(0,t.jsx)(e.h3,{id:\"custom-content\",children:\"Custom Content\"}),`\n`,(0,t.jsx)(n,{title:\"Custom Content\",files:r.customContent}),`\n`,(0,t.jsx)(e.h3,{id:\"custom-motion\",children:\"Custom Motion\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"Tooltip offers a \",(0,t.jsx)(e.code,{children:\"motionProps\"}),\" property to customize the \",(0,t.jsx)(e.code,{children:\"enter\"}),\" / \",(0,t.jsx)(e.code,{children:\"exit\"}),\" animation.\"]}),`\n`,(0,t.jsx)(n,{title:\"Custom Motion\",files:r.customMotion}),`\n`,(0,t.jsxs)(e.blockquote,{children:[`\n`,(0,t.jsxs)(e.p,{children:[\"Learn more about Framer motion variants \",(0,t.jsx)(e.a,{href:\"https://www.framer.com/motion/animation/#variants\",children:\"here\"}),\".\"]}),`\n`]}),`\n`,(0,t.jsx)(e.h2,{id:\"slots\",children:\"Slots\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"base\"}),\": The main tooltip slot, it wraps the tooltip content.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"arrow\"}),\": The arrow slot, it wraps the tooltip arrow, the placement of the arrow is based on the tooltip placement, e.g. \",(0,t.jsx)(e.code,{children:\"data-[placement=top]:...\"}),\".\"]}),`\n`]}),`\n`,(0,t.jsx)(e.h3,{id:\"custom-styles\",children:\"Custom Styles\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"You can customize the \",(0,t.jsx)(e.code,{children:\"Tooltip\"}),\" component by passing custom Tailwind CSS classes to the component slots.\"]}),`\n`,(0,t.jsx)(n,{title:\"Custom Styles\",files:r.customStyles}),`\n`,(0,t.jsx)(s,{y:4}),`\n`,(0,t.jsx)(e.h2,{id:\"data-attributes\",children:\"Data Attributes\"}),`\n`,(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.code,{children:\"Tooltip\"}),\" has the following attributes on the \",(0,t.jsx)(e.code,{children:\"base\"}),\" element:\"]}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"data-open\"}),`:\nWhen the tooltip is open. Based on tooltip state.`]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"data-placement\"}),`:\nThe placement of the tooltip. Based on `,(0,t.jsx)(e.code,{children:\"placement\"}),\" prop. The arrow element is positioned based on this attribute.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"data-disabled\"}),`:\nWhen the tooltip is disabled. Based on `,(0,t.jsx)(e.code,{children:\"isDisabled\"}),\" prop.\"]}),`\n`]}),`\n`,(0,t.jsx)(s,{y:4}),`\n`,(0,t.jsx)(e.h2,{id:\"accessibility\",children:\"Accessibility\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:\"Keyboard focus management and cross browser normalization.\"}),`\n`,(0,t.jsx)(e.li,{children:\"Hover management and cross browser normalization.\"}),`\n`,(0,t.jsx)(e.li,{children:\"Labeling support for screen readers (aria-describedby).\"}),`\n`,(0,t.jsx)(e.li,{children:\"Exposed as a tooltip to assistive technology via ARIA.\"}),`\n`,(0,t.jsx)(e.li,{children:\"Matches native tooltip behavior with delay on hover of first tooltip and no delay on subsequent tooltips.\"}),`\n`]}),`\n`,(0,t.jsx)(s,{y:4}),`\n`,(0,t.jsx)(e.h2,{id:\"api\",children:\"API\"}),`\n`,(0,t.jsx)(e.h3,{id:\"tooltip-props\",children:\"Tooltip Props\"}),`\n`,(0,t.jsx)(i,{data:[{attribute:\"children*\",type:\"ReactNode[]\",description:\"The children to render. Usually a trigger element.\",default:\"-\"},{attribute:\"content\",type:\"ReactNode\",description:\"The content to render inside the tooltip.\",default:\"-\"},{attribute:\"size\",type:\"sm | md | lg\",description:\"The tooltip size. This change the content font size.\",default:\"md\"},{attribute:\"color\",type:\"default | primary | secondary | success | warning | danger\",description:\"The tooltip color theme.\",default:\"default\"},{attribute:\"radius\",type:\"none | sm | md | lg | full\",description:\"The tooltip border radius.\",default:\"md\"},{attribute:\"shadow\",type:\"none | sm | md | lg\",description:\"The tooltip shadow.\",default:\"sm\"},{attribute:\"placement\",type:\"TooltipPlacement\",description:\"The placement of the tooltip relative to its trigger reference.\",default:\"top\"},{attribute:\"delay\",type:\"number\",description:\"The delay in milliseconds before the tooltip opens.\",default:\"0\"},{attribute:\"closeDelay\",type:\"number\",description:\"The delay in milliseconds before the tooltip closes.\",default:\"500\"},{attribute:\"isOpen\",type:\"boolean\",description:\"Whether the tooltip is open by default (controlled).\",default:\"-\"},{attribute:\"defaultOpen\",type:\"boolean\",description:\"Whether the tooltip is open by default (uncontrolled).\",default:\"-\"},{attribute:\"offset\",type:\"number\",description:\"The distance or margin between the reference and popper. It is used internally to create an offset modifier.\",default:\"7\"},{attribute:\"containerPadding\",type:\"number\",description:\"The placement padding that should be applied between the element and its surrounding container.\",default:\"12\"},{attribute:\"crossOffset\",type:\"number\",description:\"The additional offset applied along the cross axis between the element and its anchor element.\",default:\"0\"},{attribute:\"showArrow\",type:\"boolean\",description:\"Whether the tooltip should have an arrow.\",default:\"false\"},{attribute:\"shouldFlip\",type:\"boolean\",description:\"Whether the tooltip should change its placement and flip when it's about to overflow its boundary area.\",default:\"true\"},{attribute:\"triggerScaleOnOpen\",type:\"boolean\",description:\"Whether the trigger should scale down when the tooltip is open.\",default:\"true\"},{attribute:\"isKeyboardDismissDisabled\",type:\"boolean\",description:\"Whether pressing the escape key to close the tooltip should be disabled.\",default:\"false\"},{attribute:\"isDismissable\",type:\"boolean\",description:\"Whether to close the overlay when the user interacts outside it.\",default:\"false\"},{attribute:\"shouldCloseOnBlur\",type:\"boolean\",description:\"Whether the tooltip should close when focus is lost or moves outside it.\",default:\"true\"},{attribute:\"motionProps\",type:\"MotionProps\",description:\"The props to modify the framer motion animation. Use the variants API to create your own animation.\",default:\"-\"},{attribute:\"portalContainer\",type:\"HTMLElement\",description:\"The container element in which the overlay portal will be placed.\",default:\"document.body\"},{attribute:\"updatePositionDeps\",type:\"any[]\",description:\"The dependencies to force the tooltip position update.\",default:\"[]\"},{attribute:\"isDisabled\",type:\"boolean\",description:\"Whether the tooltip is disabled.\",default:\"false\"},{attribute:\"disableAnimation\",type:\"boolean\",description:\"Whether the tooltip is animated.\",default:\"false\"},{attribute:\"classNames\",type:'Partial<Record<\"base\"\\uFF5C\"content\", string>>',description:\"Allows to set custom class names for the tooltip slots.\",default:\"-\"}]}),`\n`,(0,t.jsx)(e.h3,{id:\"tooltip-events\",children:\"Tooltip Events\"}),`\n`,(0,t.jsx)(i,{data:[{attribute:\"onOpenChange\",type:\"(isOpen: boolean) => void\",description:\"Handler that is called when the tooltip's open state changes.\",default:\"-\"},{attribute:\"shouldCloseOnInteractOutside\",type:\"(e: HTMLElement) => void\",description:\"When user interacts with the argument element outside of the tooltip ref, return true if onClose should be called. This gives you a chance to filter out interaction with elements that should not dismiss the tooltip. By default, onClose will always be called on interaction outside the overlay ref.\",default:\"-\"},{attribute:\"onClose\",type:\"() => void\",description:\"Handler that is called when the tooltip should close.\",default:\"-\"}]}),`\n`,(0,t.jsx)(e.h3,{id:\"tooltip-types\",children:\"Tooltip types\"}),`\n`,(0,t.jsx)(s,{y:1}),`\n`,(0,t.jsx)(e.h4,{id:\"tooltip-placement\",children:\"Tooltip Placement\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-ts\",children:`type TooltipPlacement =\n  | \"top\"\n  | \"bottom\"\n  | \"right\"\n  | \"left\"\n  | \"top-start\"\n  | \"top-end\"\n  | \"bottom-start\"\n  | \"bottom-end\"\n  | \"left-start\"\n  | \"left-end\"\n  | \"right-start\"\n  | \"right-end\";\n`})}),`\n`,(0,t.jsx)(e.h4,{id:\"motion-props\",children:\"Motion Props\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-ts\",children:`export type MotionProps = HTMLMotionProps<\"div\">; // @see https://www.framer.com/motion/\n`})})]})}function L(o={}){let{wrapper:e}=o.components||{};return e?(0,t.jsx)(e,{...o,children:(0,t.jsx)(_,{...o})}):_(o)}function l(o,e){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+o+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return G(Tt);})();\n;return Component;"
  },
  "_id": "docs/components/tooltip.mdx",
  "_raw": {
    "sourceFilePath": "docs/components/tooltip.mdx",
    "sourceFileName": "tooltip.mdx",
    "sourceFileDir": "docs/components",
    "contentType": "mdx",
    "flattenedPath": "docs/components/tooltip"
  },
  "type": "Doc",
  "slug": "/docs/components/tooltip",
  "slugAsParams": "components/tooltip",
  "url": "/docs/components/tooltip"
}