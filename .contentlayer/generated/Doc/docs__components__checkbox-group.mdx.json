{
  "title": "Checkbox Group",
  "description": "A CheckboxGroup allows users to select one or more items from a list of choices.",
  "body": {
    "raw": "\nimport {checkboxGroupContent} from \"@/content/components/checkbox-group\";\n\n# Checkbox Group\n\nA CheckboxGroup allows users to select one or more items from a list of choices.\n\n<ComponentLinks component=\"checkbox\" storybook=\"checkboxgroup\" reactAriaHook=\"useCheckboxGroup\" />\n\n---\n\n<CarbonAd/>\n\n## Installation\n\n<PackageManagers\n  showGlobalInstallWarning\n  commands={{\n    cli: \"npx heroui-cli@latest add checkbox\",\n    npm: \"npm install @heroui/checkbox\",\n    yarn: \"yarn add @heroui/checkbox\",\n    pnpm: \"pnpm add @heroui/checkbox\",\n    bun: \"bun add @heroui/checkbox\"\n  }}\n/>\n\n\n## Import\n\nHeroUI exports 2 checkbox-related components:\n\n- **CheckboxGroup**: The root component, it wraps the label and the wrapper.\n- **Checkbox**: The checkbox component.\n\n<ImportTabs\n  commands={{\n    main: 'import {CheckboxGroup, Checkbox} from \"@heroui/react\";',\n    individual: 'import {CheckboxGroup, Checkbox} from \"@heroui/checkbox\";',\n  }}\n/>\n\n## Usage\n\n<CodeDemo title=\"Usage\" files={checkboxGroupContent.usage} />\n\n### Disabled\n\n<CodeDemo title=\"Disabled\" files={checkboxGroupContent.disabled} />\n\n### Horizontal\n\n<CodeDemo title=\"Horizontal\" files={checkboxGroupContent.horizontal} />\n\n### Controlled\n\nYou can use the `value` and `onValueChange` properties to control the checkbox input value.\n\n<CodeDemo title=\"Controlled\" files={checkboxGroupContent.controlled} />\n\n### Invalid\n\n<CodeDemo title=\"Invalid\" files={checkboxGroupContent.invalid} />\n\n## Slots\n\n- **base**: Checkbox group root wrapper, it wraps the label and the wrapper.\n- **wrapper**: Checkbox group wrapper, it wraps all checkboxes.\n- **label**: Checkbox group label, it is placed before the wrapper.\n- **description**: The description of the checkbox group.\n- **errorMessage**: The error message of the checkbox group.\n\n### Custom Styles\n\nYou can customize the `CheckboxGroup` component by passing custom Tailwind CSS classes to the component slots.\n\n<CodeDemo title=\"Custom Styles\" files={checkboxGroupContent.customStyles} />\n\n### Custom Implementation\n\nIn case you need to customize the checkbox even further, you can use the `useCheckboxGroup` hook to create your own implementation.\n\n<CodeDemo title=\"Custom Implementation\" files={checkboxGroupContent.customImplementation} />\n\n> **Note**: We used [Tailwind Variants](https://www.tailwind-variants.org/) to implement the styles above, you can use any other library such as [clsx](https://www.npmjs.com/package/clsx) to achieve the same result.\n\n<Spacer y={4} />\n\n## API\n\n### Checkbox Group Props\n\n<APITable\n  data={[\n    {\n      attribute: \"children\",\n      type: \"ReactNode[] | ReactNode[]\",\n      description: \"The checkboxes items.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"orientation\",\n      type: \"vertical | horizontal\",\n      description: \"The axis the checkbox group items should align with.\",\n      default: \"vertical\"\n    },\n    {\n      attribute: \"color\",\n      type: \"default | primary | secondary | success | warning | danger\",\n      description: \"The color of the checkboxes.\",\n      default: \"primary\"\n    },\n    {\n      attribute: \"size\",\n      type: \"xs | sm | md | lg | xl\",\n      description: \"The size of the checkboxes.\",\n      default: \"md\"\n    },\n    {\n      attribute: \"radius\",\n      type: \"none | base | xs | sm | md | lg | xl | full\",\n      description: \"The radius of the checkboxes.\",\n      default: \"md\"\n    },\n    {\n      attribute: \"name\",\n      type: \"string\",\n      description: \"The name of the CheckboxGroup, used when submitting an HTML form.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"label\",\n      type: \"string\",\n      description: \"The label of the CheckboxGroup.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"value\",\n      type: \"string[]\",\n      description: \"The current selected values. (controlled)\",\n      default: \"-\"\n    },\n    {\n      attribute: \"lineThrough\",\n      type: \"boolean\",\n      description: \"Whether the checkboxes label should be crossed out.\",\n      default: \"false\"\n    },\n    {\n      attribute: \"defaultValue\",\n      type: \"string[]\",\n      description: \"The default selected values. (uncontrolled)\",\n      default: \"-\"\n    },\n    {\n      attribute: \"isInvalid\",\n      type: \"boolean\",\n      description: \"Whether the checkbox group is invalid.\",\n      default: \"false\"\n    },\n    {\n      attribute: \"validationState\",\n      type: \"valid | invalid\",\n      description: \"Whether the inputs should display its \\\"valid\\\" or \\\"invalid\\\" visual styling. (Deprecated) use isInvalid instead.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"description\",\n      type: \"ReactNode\",\n      description: \"The checkbox group description.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"errorMessage\",\n      type: \"ReactNode | ((v: ValidationResult) => ReactNode)\",\n      description: \"The checkbox group error message.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"validate\",\n      type: \"(value: string[]) => ValidationError | true | null | undefined\",\n      description: \"Validate input values when committing (e.g. on blur), returning error messages for invalid values. Validation errors are displayed upon form submission if validationBehavior is set to native. For real-time validation, use the isInvalid prop.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"validationBehavior\",\n      type: \"native | aria\",\n      description: \"Whether to use native HTML form validation or ARIA validation. When wrapped in a Form component, the default is `aria`. Otherwise, the default is `native`.\",\n      default: \"native\"\n    },\n    {\n      attribute: \"isDisabled\",\n      type: \"boolean\",\n      description: \"Whether the checkbox group is disabled.\",\n      default: \"false\"\n    },\n    {\n      attribute: \"isRequired\",\n      type: \"boolean\",\n      description: \"Whether user checkboxes are required on the input before form submission.\",\n      default: \"false\"\n    },\n    {\n      attribute: \"isReadOnly\",\n      type: \"boolean\",\n      description: \"Whether the checkboxes can be selected but not changed by the user.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"disableAnimation\",\n      type: \"boolean\",\n      description: \"Whether the animation should be disabled.\",\n      default: \"false\"\n    },\n    {\n      attribute: \"classNames\",\n      type: \"Partial<Record<\\\"base\\\" | \\\"wrapper\\\" | \\\"label\\\", string>>\",\n      description: \"Allows to set custom class names for the checkbox group slots.\",\n      default: \"-\"\n    }\n  ]}\n/>\n\n### Checkbox Group Events\n\n<APITable\n  data={[\n    {\n      attribute: \"onChange\",\n      type: \"(value: string[]) => void\",\n      description: \"Handler that is called when the value changes.\",\n      default: \"-\"\n    }\n  ]}\n/>\n",
    "code": "var Component=(()=>{var z=Object.create;var l=Object.defineProperty;var L=Object.getOwnPropertyDescriptor;var P=Object.getOwnPropertyNames;var R=Object.getPrototypeOf,W=Object.prototype.hasOwnProperty;var D=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),F=(t,e)=>{for(var a in e)l(t,a,{get:e[a],enumerable:!0})},p=(t,e,a,s)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of P(e))!W.call(t,r)&&r!==a&&l(t,r,{get:()=>e[r],enumerable:!(s=L(e,r))||s.enumerable});return t};var H=(t,e,a)=>(a=t!=null?z(R(t)):{},p(e||!t||!t.__esModule?l(a,\"default\",{value:t,enumerable:!0}):a,t)),M=t=>p(l({},\"__esModule\",{value:!0}),t);var m=D((ae,b)=>{b.exports=_jsx_runtime});var te={};F(te,{default:()=>V,frontmatter:()=>oe});var o=H(m());var x=`import {CheckboxGroup, Checkbox} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <CheckboxGroup defaultValue={[\"buenos-aires\", \"london\"]} label=\"Select cities\">\n      <Checkbox value=\"buenos-aires\">Buenos Aires</Checkbox>\n      <Checkbox value=\"sydney\">Sydney</Checkbox>\n      <Checkbox value=\"san-francisco\">San Francisco</Checkbox>\n      <Checkbox value=\"london\">London</Checkbox>\n      <Checkbox value=\"tokyo\">Tokyo</Checkbox>\n    </CheckboxGroup>\n  );\n}\n`;var _={\"/App.jsx\":x},k={..._};var f=`import {CheckboxGroup, Checkbox} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <CheckboxGroup isDisabled defaultValue={[\"buenos-aires\", \"london\"]} label=\"Select cities\">\n      <Checkbox value=\"buenos-aires\">Buenos Aires</Checkbox>\n      <Checkbox value=\"sydney\">Sydney</Checkbox>\n      <Checkbox value=\"san-francisco\">San Francisco</Checkbox>\n      <Checkbox value=\"london\">London</Checkbox>\n      <Checkbox value=\"tokyo\">Tokyo</Checkbox>\n    </CheckboxGroup>\n  );\n}\n`;var E={\"/App.jsx\":f},C={...E};var v=`import {CheckboxGroup, Checkbox} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <CheckboxGroup\n      color=\"secondary\"\n      defaultValue={[\"buenos-aires\", \"san-francisco\"]}\n      label=\"Select cities\"\n      orientation=\"horizontal\"\n    >\n      <Checkbox value=\"buenos-aires\">Buenos Aires</Checkbox>\n      <Checkbox value=\"sydney\">Sydney</Checkbox>\n      <Checkbox value=\"san-francisco\">San Francisco</Checkbox>\n      <Checkbox value=\"london\">London</Checkbox>\n      <Checkbox value=\"tokyo\">Tokyo</Checkbox>\n    </CheckboxGroup>\n  );\n}\n`;var O={\"/App.jsx\":v},g={...O};var y=`import {CheckboxGroup, Checkbox} from \"@heroui/react\";\n\nexport default function App() {\n  const [selected, setSelected] = React.useState([\"buenos-aires\", \"sydney\"]);\n\n  return (\n    <div className=\"flex flex-col gap-3\">\n      <CheckboxGroup\n        color=\"warning\"\n        label=\"Select cities\"\n        value={selected}\n        onValueChange={setSelected}\n      >\n        <Checkbox value=\"buenos-aires\">Buenos Aires</Checkbox>\n        <Checkbox value=\"sydney\">Sydney</Checkbox>\n        <Checkbox value=\"san-francisco\">San Francisco</Checkbox>\n      </CheckboxGroup>\n      <p className=\"text-default-500 text-small\">Selected: {selected.join(\", \")}</p>\n    </div>\n  );\n}\n`;var X={\"/App.jsx\":y},S={...X};var w=`import {Checkbox, CheckboxGroup, Link, User, Chip, cn} from \"@heroui/react\";\n\nexport const CustomCheckbox = ({user, statusColor, value}) => {\n  return (\n    <Checkbox\n      aria-label={user.name}\n      classNames={{\n        base: cn(\n          \"inline-flex max-w-md w-full bg-content1 m-0\",\n          \"hover:bg-content2 items-center justify-start\",\n          \"cursor-pointer rounded-lg gap-2 p-4 border-2 border-transparent\",\n          \"data-[selected=true]:border-primary\",\n        ),\n        label: \"w-full\",\n      }}\n      value={value}\n    >\n      <div className=\"w-full flex justify-between gap-2\">\n        <User\n          avatarProps={{size: \"md\", src: user.avatar}}\n          description={\n            <Link isExternal href={user.url} size=\"sm\">\n              @{user.username}\n            </Link>\n          }\n          name={user.name}\n        />\n        <div className=\"flex flex-col items-end gap-1\">\n          <span className=\"text-tiny text-default-500\">{user.role}</span>\n          <Chip color={statusColor} size=\"sm\" variant=\"flat\">\n            {user.status}\n          </Chip>\n        </div>\n      </div>\n    </Checkbox>\n  );\n};\n\nexport default function App() {\n  const [groupSelected, setGroupSelected] = React.useState([]);\n\n  return (\n    <div className=\"flex flex-col gap-1 w-full\">\n      <CheckboxGroup\n        classNames={{\n          base: \"w-full\",\n        }}\n        label=\"Select employees\"\n        value={groupSelected}\n        onChange={setGroupSelected}\n      >\n        <CustomCheckbox\n          statusColor=\"secondary\"\n          user={{\n            name: \"Junior Garcia\",\n            avatar: \"https://avatars.githubusercontent.com/u/30373425?v=4\",\n            username: \"jrgarciadev\",\n            url: \"https://x.com/jrgarciadev\",\n            role: \"Software Developer\",\n            status: \"Active\",\n          }}\n          value=\"junior\"\n        />\n        <CustomCheckbox\n          statusColor=\"warning\"\n          user={{\n            name: \"John Doe\",\n            avatar: \"https://i.pravatar.cc/300?u=a042581f4e29026707d\",\n            username: \"johndoe\",\n            url: \"#\",\n            role: \"Product Designer\",\n            status: \"Vacation\",\n          }}\n          value=\"johndoe\"\n        />\n        <CustomCheckbox\n          statusColor=\"danger\"\n          user={{\n            name: \"Zoey Lang\",\n            avatar: \"https://i.pravatar.cc/300?u=a042581f4e29026704d\",\n            username: \"zoeylang\",\n            url: \"#\",\n            role: \"Technical Writer\",\n            status: \"Out of office\",\n          }}\n          value=\"zoeylang\"\n        />\n        <CustomCheckbox\n          statusColor=\"secondary\"\n          user={{\n            name: \"William Howard\",\n            avatar: \"https://i.pravatar.cc/300?u=a048581f4e29026701d\",\n            username: \"william\",\n            url: \"#\",\n            role: \"Sales Manager\",\n            status: \"Active\",\n          }}\n          value=\"william\"\n        />\n      </CheckboxGroup>\n      <p className=\"mt-4 ml-1 text-default-500\">Selected: {groupSelected.join(\", \")}</p>\n    </div>\n  );\n}\n`;var K={\"/App.jsx\":w},G={...K};var A=`import {useCheckbox, CheckboxGroup, Chip, VisuallyHidden, tv} from \"@heroui/react\";\n\nexport const CustomCheckbox = (props) => {\n  const checkbox = tv({\n    slots: {\n      base: \"border-default hover:bg-default-200\",\n      content: \"text-default-500\",\n    },\n    variants: {\n      isSelected: {\n        true: {\n          base: \"border-primary bg-primary hover:bg-primary-500 hover:border-primary-500\",\n          content: \"text-primary-foreground pl-1\",\n        },\n      },\n      isFocusVisible: {\n        true: {\n          base: \"outline-none ring-2 ring-focus ring-offset-2 ring-offset-background\",\n        },\n      },\n    },\n  });\n\n  const {children, isSelected, isFocusVisible, getBaseProps, getLabelProps, getInputProps} =\n    useCheckbox({\n      ...props,\n    });\n\n  const styles = checkbox({isSelected, isFocusVisible});\n\n  return (\n    <label {...getBaseProps()}>\n      <VisuallyHidden>\n        <input {...getInputProps()} />\n      </VisuallyHidden>\n      <Chip\n        classNames={{\n          base: styles.base(),\n          content: styles.content(),\n        }}\n        color=\"primary\"\n        startContent={isSelected ? <CheckIcon className=\"ml-1\" /> : null}\n        variant=\"faded\"\n        {...getLabelProps()}\n      >\n        {children ? children : isSelected ? \"Enabled\" : \"Disabled\"}\n      </Chip>\n    </label>\n  );\n};\n\nexport const CheckIcon = (props) => {\n  return (\n    <svg\n      aria-hidden=\"true\"\n      fill=\"none\"\n      focusable=\"false\"\n      height=\"1em\"\n      stroke=\"currentColor\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth={2}\n      viewBox=\"0 0 24 24\"\n      width=\"1em\"\n      {...props}\n    >\n      <polyline points=\"20 6 9 17 4 12\" />\n    </svg>\n  );\n};\n\nexport default function App() {\n  const [groupSelected, setGroupSelected] = React.useState([]);\n\n  return (\n    <div className=\"flex flex-col gap-1 w-full\">\n      <CheckboxGroup\n        className=\"gap-1\"\n        label=\"Select amenities\"\n        orientation=\"horizontal\"\n        value={groupSelected}\n        onChange={setGroupSelected}\n      >\n        <CustomCheckbox value=\"wifi\">Wifi</CustomCheckbox>\n        <CustomCheckbox value=\"tv\">TV</CustomCheckbox>\n        <CustomCheckbox value=\"kitchen\">Kitchen</CustomCheckbox>\n        <CustomCheckbox value=\"parking\">Parking</CustomCheckbox>\n        <CustomCheckbox value=\"pool\">Pool</CustomCheckbox>\n        <CustomCheckbox value=\"gym\">Gym</CustomCheckbox>\n      </CheckboxGroup>\n      <p className=\"mt-4 ml-1 text-default-500\">Selected: {groupSelected.join(\", \")}</p>\n    </div>\n  );\n}\n`;var Q={\"/App.jsx\":A},I={...Q};var T=`import {CheckboxGroup, Checkbox} from \"@heroui/react\";\n\nexport default function App() {\n  const [isInvalid, setIsInvalid] = React.useState(true);\n\n  return (\n    <CheckboxGroup\n      isRequired\n      description=\"Select the cities you want to visit\"\n      isInvalid={isInvalid}\n      label=\"Select cities\"\n      onValueChange={(value) => {\n        setIsInvalid(value.length < 1);\n      }}\n    >\n      <Checkbox value=\"buenos-aires\">Buenos Aires</Checkbox>\n      <Checkbox value=\"sydney\">Sydney</Checkbox>\n      <Checkbox value=\"san-francisco\">San Francisco</Checkbox>\n      <Checkbox value=\"london\">London</Checkbox>\n      <Checkbox value=\"tokyo\">Tokyo</Checkbox>\n    </CheckboxGroup>\n  );\n}\n`;var ee={\"/App.jsx\":T},j={...ee};var n={usage:k,disabled:C,horizontal:g,controlled:S,customStyles:G,invalid:j,customImplementation:I};var oe={title:\"Checkbox Group\",description:\"A CheckboxGroup allows users to select one or more items from a list of choices.\"};function N(t){let e={a:\"a\",blockquote:\"blockquote\",code:\"code\",h1:\"h1\",h2:\"h2\",h3:\"h3\",hr:\"hr\",li:\"li\",p:\"p\",strong:\"strong\",ul:\"ul\",...t.components},{APITable:a,CarbonAd:s,CodeDemo:r,ComponentLinks:c,ImportTabs:u,PackageManagers:h,Spacer:d}=e;return a||i(\"APITable\",!0),s||i(\"CarbonAd\",!0),r||i(\"CodeDemo\",!0),c||i(\"ComponentLinks\",!0),u||i(\"ImportTabs\",!0),h||i(\"PackageManagers\",!0),d||i(\"Spacer\",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h1,{id:\"checkbox-group\",children:\"Checkbox Group\"}),`\n`,(0,o.jsx)(e.p,{children:\"A CheckboxGroup allows users to select one or more items from a list of choices.\"}),`\n`,(0,o.jsx)(c,{component:\"checkbox\",storybook:\"checkboxgroup\",reactAriaHook:\"useCheckboxGroup\"}),`\n`,(0,o.jsx)(e.hr,{}),`\n`,(0,o.jsx)(s,{}),`\n`,(0,o.jsx)(e.h2,{id:\"installation\",children:\"Installation\"}),`\n`,(0,o.jsx)(h,{showGlobalInstallWarning:!0,commands:{cli:\"npx heroui-cli@latest add checkbox\",npm:\"npm install @heroui/checkbox\",yarn:\"yarn add @heroui/checkbox\",pnpm:\"pnpm add @heroui/checkbox\",bun:\"bun add @heroui/checkbox\"}}),`\n`,(0,o.jsx)(e.h2,{id:\"import\",children:\"Import\"}),`\n`,(0,o.jsx)(e.p,{children:\"HeroUI exports 2 checkbox-related components:\"}),`\n`,(0,o.jsxs)(e.ul,{children:[`\n`,(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:\"CheckboxGroup\"}),\": The root component, it wraps the label and the wrapper.\"]}),`\n`,(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:\"Checkbox\"}),\": The checkbox component.\"]}),`\n`]}),`\n`,(0,o.jsx)(u,{commands:{main:'import {CheckboxGroup, Checkbox} from \"@heroui/react\";',individual:'import {CheckboxGroup, Checkbox} from \"@heroui/checkbox\";'}}),`\n`,(0,o.jsx)(e.h2,{id:\"usage\",children:\"Usage\"}),`\n`,(0,o.jsx)(r,{title:\"Usage\",files:n.usage}),`\n`,(0,o.jsx)(e.h3,{id:\"disabled\",children:\"Disabled\"}),`\n`,(0,o.jsx)(r,{title:\"Disabled\",files:n.disabled}),`\n`,(0,o.jsx)(e.h3,{id:\"horizontal\",children:\"Horizontal\"}),`\n`,(0,o.jsx)(r,{title:\"Horizontal\",files:n.horizontal}),`\n`,(0,o.jsx)(e.h3,{id:\"controlled\",children:\"Controlled\"}),`\n`,(0,o.jsxs)(e.p,{children:[\"You can use the \",(0,o.jsx)(e.code,{children:\"value\"}),\" and \",(0,o.jsx)(e.code,{children:\"onValueChange\"}),\" properties to control the checkbox input value.\"]}),`\n`,(0,o.jsx)(r,{title:\"Controlled\",files:n.controlled}),`\n`,(0,o.jsx)(e.h3,{id:\"invalid\",children:\"Invalid\"}),`\n`,(0,o.jsx)(r,{title:\"Invalid\",files:n.invalid}),`\n`,(0,o.jsx)(e.h2,{id:\"slots\",children:\"Slots\"}),`\n`,(0,o.jsxs)(e.ul,{children:[`\n`,(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:\"base\"}),\": Checkbox group root wrapper, it wraps the label and the wrapper.\"]}),`\n`,(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:\"wrapper\"}),\": Checkbox group wrapper, it wraps all checkboxes.\"]}),`\n`,(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:\"label\"}),\": Checkbox group label, it is placed before the wrapper.\"]}),`\n`,(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:\"description\"}),\": The description of the checkbox group.\"]}),`\n`,(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:\"errorMessage\"}),\": The error message of the checkbox group.\"]}),`\n`]}),`\n`,(0,o.jsx)(e.h3,{id:\"custom-styles\",children:\"Custom Styles\"}),`\n`,(0,o.jsxs)(e.p,{children:[\"You can customize the \",(0,o.jsx)(e.code,{children:\"CheckboxGroup\"}),\" component by passing custom Tailwind CSS classes to the component slots.\"]}),`\n`,(0,o.jsx)(r,{title:\"Custom Styles\",files:n.customStyles}),`\n`,(0,o.jsx)(e.h3,{id:\"custom-implementation\",children:\"Custom Implementation\"}),`\n`,(0,o.jsxs)(e.p,{children:[\"In case you need to customize the checkbox even further, you can use the \",(0,o.jsx)(e.code,{children:\"useCheckboxGroup\"}),\" hook to create your own implementation.\"]}),`\n`,(0,o.jsx)(r,{title:\"Custom Implementation\",files:n.customImplementation}),`\n`,(0,o.jsxs)(e.blockquote,{children:[`\n`,(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:\"Note\"}),\": We used \",(0,o.jsx)(e.a,{href:\"https://www.tailwind-variants.org/\",children:\"Tailwind Variants\"}),\" to implement the styles above, you can use any other library such as \",(0,o.jsx)(e.a,{href:\"https://www.npmjs.com/package/clsx\",children:\"clsx\"}),\" to achieve the same result.\"]}),`\n`]}),`\n`,(0,o.jsx)(d,{y:4}),`\n`,(0,o.jsx)(e.h2,{id:\"api\",children:\"API\"}),`\n`,(0,o.jsx)(e.h3,{id:\"checkbox-group-props\",children:\"Checkbox Group Props\"}),`\n`,(0,o.jsx)(a,{data:[{attribute:\"children\",type:\"ReactNode[] | ReactNode[]\",description:\"The checkboxes items.\",default:\"-\"},{attribute:\"orientation\",type:\"vertical | horizontal\",description:\"The axis the checkbox group items should align with.\",default:\"vertical\"},{attribute:\"color\",type:\"default | primary | secondary | success | warning | danger\",description:\"The color of the checkboxes.\",default:\"primary\"},{attribute:\"size\",type:\"xs | sm | md | lg | xl\",description:\"The size of the checkboxes.\",default:\"md\"},{attribute:\"radius\",type:\"none | base | xs | sm | md | lg | xl | full\",description:\"The radius of the checkboxes.\",default:\"md\"},{attribute:\"name\",type:\"string\",description:\"The name of the CheckboxGroup, used when submitting an HTML form.\",default:\"-\"},{attribute:\"label\",type:\"string\",description:\"The label of the CheckboxGroup.\",default:\"-\"},{attribute:\"value\",type:\"string[]\",description:\"The current selected values. (controlled)\",default:\"-\"},{attribute:\"lineThrough\",type:\"boolean\",description:\"Whether the checkboxes label should be crossed out.\",default:\"false\"},{attribute:\"defaultValue\",type:\"string[]\",description:\"The default selected values. (uncontrolled)\",default:\"-\"},{attribute:\"isInvalid\",type:\"boolean\",description:\"Whether the checkbox group is invalid.\",default:\"false\"},{attribute:\"validationState\",type:\"valid | invalid\",description:'Whether the inputs should display its \"valid\" or \"invalid\" visual styling. (Deprecated) use isInvalid instead.',default:\"-\"},{attribute:\"description\",type:\"ReactNode\",description:\"The checkbox group description.\",default:\"-\"},{attribute:\"errorMessage\",type:\"ReactNode | ((v: ValidationResult) => ReactNode)\",description:\"The checkbox group error message.\",default:\"-\"},{attribute:\"validate\",type:\"(value: string[]) => ValidationError | true | null | undefined\",description:\"Validate input values when committing (e.g. on blur), returning error messages for invalid values. Validation errors are displayed upon form submission if validationBehavior is set to native. For real-time validation, use the isInvalid prop.\",default:\"-\"},{attribute:\"validationBehavior\",type:\"native | aria\",description:\"Whether to use native HTML form validation or ARIA validation. When wrapped in a Form component, the default is `aria`. Otherwise, the default is `native`.\",default:\"native\"},{attribute:\"isDisabled\",type:\"boolean\",description:\"Whether the checkbox group is disabled.\",default:\"false\"},{attribute:\"isRequired\",type:\"boolean\",description:\"Whether user checkboxes are required on the input before form submission.\",default:\"false\"},{attribute:\"isReadOnly\",type:\"boolean\",description:\"Whether the checkboxes can be selected but not changed by the user.\",default:\"-\"},{attribute:\"disableAnimation\",type:\"boolean\",description:\"Whether the animation should be disabled.\",default:\"false\"},{attribute:\"classNames\",type:'Partial<Record<\"base\" | \"wrapper\" | \"label\", string>>',description:\"Allows to set custom class names for the checkbox group slots.\",default:\"-\"}]}),`\n`,(0,o.jsx)(e.h3,{id:\"checkbox-group-events\",children:\"Checkbox Group Events\"}),`\n`,(0,o.jsx)(a,{data:[{attribute:\"onChange\",type:\"(value: string[]) => void\",description:\"Handler that is called when the value changes.\",default:\"-\"}]})]})}function V(t={}){let{wrapper:e}=t.components||{};return e?(0,o.jsx)(e,{...t,children:(0,o.jsx)(N,{...t})}):N(t)}function i(t,e){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+t+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return M(te);})();\n;return Component;"
  },
  "_id": "docs/components/checkbox-group.mdx",
  "_raw": {
    "sourceFilePath": "docs/components/checkbox-group.mdx",
    "sourceFileName": "checkbox-group.mdx",
    "sourceFileDir": "docs/components",
    "contentType": "mdx",
    "flattenedPath": "docs/components/checkbox-group"
  },
  "type": "Doc",
  "slug": "/docs/components/checkbox-group",
  "slugAsParams": "components/checkbox-group",
  "url": "/docs/components/checkbox-group"
}