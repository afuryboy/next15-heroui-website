{
  "title": "Table",
  "description": "Tables are used to display tabular data using rows and columns. They allow users to quickly scan, sort, compare, and take action on large amounts of data.",
  "body": {
    "raw": "\nimport {tableContent} from \"@/content/components/table\";\n\n# Table\n\nTables are used to display tabular data using rows and columns. They allow users to quickly scan, sort, compare, and take action on large amounts of data.\n\n<ComponentLinks component=\"table\" reactHook=\"useTable\" />\n\n---\n\n<CarbonAd/>\n\n## Installation\n\n<PackageManagers\n  showGlobalInstallWarning\n  commands={{\n    cli: \"npx heroui-cli@latest add table\",\n    npm: \"npm install @heroui/table\",\n    yarn: \"yarn add @heroui/table\",\n    pnpm: \"pnpm add @heroui/table\",\n    bun: \"bun add @heroui/table\"\n  }}\n/>\n\n\n## Import\n\nHeroUI exports 6 table-related components:\n\n- **Table**: The main component to display a table.\n- **TableHeader**: The header of the table.\n- **TableBody**: The body of the table.\n- **TableColumn**: The column of the table.\n- **TableRow**: The row of the table.\n- **TableCell**: The cell of the table.\n\n<ImportTabs\n  commands={{\n    main: `import {\n    Table,\n    TableHeader,\n    TableBody,\n    TableColumn,\n    TableRow,\n    TableCell\n} from \"@heroui/react\";`,\n    individual: `import {\n    Table,\n    TableHeader,\n    TableBody,\n    TableColumn,\n    TableRow,\n    TableCell\n} from \"@heroui/table\";`,\n  }}\n/>\n\n## Usage\n\n<CodeDemo title=\"Usage\" files={tableContent.usage} />\n\n### Dynamic\n\nTo render a table dynamically, you can use the `columns` prop to pass the columns and `items` prop to pass the data.\n\n<CodeDemo title=\"Dynamic\" files={tableContent.dynamic} />\n\n#### Why not array map?\n\nUsing the `items` prop and providing a render function allows [react-aria](https://react-spectrum.adobe.com/react-aria/index.html)\nto automatically cache the results of rendering each item and avoid re-rendering all items in the\ncollection when only one of them changes. This has big performance benefits for large\ncollections.\n\nYou could also use `Array.map` to render the items, but it will not be as performant as using the `items` and `columns` prop.\n\nExample:\n\n```jsx\nimport {Table, TableHeader, TableColumn, TableBody, TableRow, TableCell, getKeyValue} from \"@heroui/react\";\n\nconst rows = [...];\n\nconst columns = [...];\n\nexport default function App() {\n  return (\n    <Table aria-label=\"Example table with dynamic content\">\n      <TableHeader>\n        {columns.map((column) =>\n          <TableColumn key={column.key}>{column.label}</TableColumn>\n        )}\n      </TableHeader>\n      <TableBody>\n        {rows.map((row) =>\n          <TableRow key={row.key}>\n            {(columnKey) => <TableCell>{getKeyValue(row, columnKey)}</TableCell>}\n          </TableRow>\n        )}\n      </TableBody>\n    </Table>\n  );\n}\n```\n\n> **Note**: To learn more about React Aria collections and how to use them, please check [React Aria Collections](https://react-spectrum.adobe.com/react-stately/collections.html).\n\n### Empty State\n\nYou can use the `emptyContent` prop to render a custom component when the table is empty.\n\n<CodeDemo title=\"Empty State\" highlightedLines=\"11\" files={tableContent.empty} />\n\n### Without Header\n\nIn case you don't want to render the header, you can use the `hideHeader` prop.\n\n<CodeDemo title=\"Without Header\" files={tableContent.withoutHeader} />\n\n### Without Wrapper\n\nBy default the table is wrapped in a `div` element with a small shadow effect and a border radius.\nYou can use the `removeWrapper` prop to remove the wrapper and only render the table.\n\n<CodeDemo title=\"Without Wrapper\" files={tableContent.withoutWrapper} />\n\n### Custom Cells\n\nYou can render any component inside the table cell. In the example below, we are rendering different components according to the `key` of the column.\n\n<CodeDemo title=\"Custom Cells\" files={tableContent.customCells} />\n\n### Striped Rows\n\nYou can use the `isStriped` prop to render striped rows.\n\n<CodeDemo title=\"Striped Rows\" files={tableContent.striped} />\n\n### Single Row Selection\n\nIt is possible to make the table rows selectable. To do so, you can use the `selectionMode` prop. Use `defaultSelectedKeys` to\nprovide a default set of selected rows.\n\n<CodeDemo title=\"Single Row Selection\" files={tableContent.singleSelection} />\n\n> **Note**: The value of the selected keys must match the key prop of the row.\n\n### Multiple Row Selection\n\nYou can also select multiple rows by using the `selectionMode=\"multiple\"` prop. Use `defaultSelectedKeys` to\nprovide a default set of selected rows.\n\n<CodeDemo title=\"Multiple Row Selection\" files={tableContent.multipleSelection} />\n\n> **Note**: When using multiple selection, selectable checkboxes will be rendered in the first column of the table.\n\n### Disallow Empty Selection\n\nTable also supports a `disallowEmptySelection` prop which forces the user to have at least one\nrow in the Table selected at all times. In this mode, if a single row is selected and the\nuser presses it, it will not be deselected.\n\n<CodeDemo title=\"Disallow Empty Selection\" files={tableContent.disallowEmptySelection} />\n\n### Controlled Selection\n\nTo programmatically control row selection, use the `selectedKeys` prop paired with the `onSelectionChange` callback.\nThe key prop from the selected rows will be passed into the callback when the row is pressed, allowing you to update state accordingly.\n\n<CodeDemo title=\"Controlled Selection\" files={tableContent.controlledSelection} />\n\n> **Note**: The `selectedKeys` property must be a `Set` object.\n\n### Disabled Rows\n\nYou can disable rows by using the `disabledKeys` prop. This will prevent rows from being\nselectable as shown in the example below.\n\n<CodeDemo title=\"Disabled Rows\" files={tableContent.disabledRows} />\n\n### Selection Behavior\n\nBy default, Table uses the `toggle` selection behavior, which behaves like a checkbox group:\nclicking, tapping, or pressing the <Kbd>Space</Kbd> or <Kbd>Enter</Kbd> keys toggles selection for the focused row.\n\nWhen the `selectionBehavior` prop is set to `replace`, clicking a row with the mouse replaces\nthe selection with only that row. Using the arrow keys moves both focus and selection.\nTo select multiple rows, modifier keys such as <Kbd>Ctrl</Kbd>, <Kbd>Cmd</Kbd>, and <Kbd>Shift</Kbd> can be used.\n\n<CodeDemo title=\"Selection Behavior\" files={tableContent.selectionBehavior} />\n\n### Rows Actions\n\nTable supports rows via the `onRowAction` callback. In the default `toggle` selection\nbehavior, when nothing is selected, clicking or tapping the row triggers the row action.\n\nThis behavior is slightly different in the `replace` selection behavior, where single\nclicking selects the row and actions are performed via double click.\n\n<CodeDemo title=\"Rows Actions\" files={tableContent.rowActions} />\n\n### Sorting Rows\n\nTable supports sorting its data when a column header is pressed. To designate that a `Column`\nshould support sorting, provide it with the `allowsSorting` prop.\n\nTable accepts a `sortDescriptor` prop that defines the current column key to sort by\nand the sort direction (ascending/descending). When the user presses a sortable column\nheader, the column's key and sort direction is passed into the `onSortChange` callback,\nallowing you to update the `sortDescriptor` appropriately.\n\nWe recommend using the `useAsyncList` hook from [@react-stately/data](https://react-spectrum.adobe.com/react-stately/useAsyncList.html) to manage the data sorting. So make\nsure to install it before using the sorting feature.\n\n<PackageManagers\n  commands={{\n    npm: \"npm install @react-stately/data\",\n    yarn: \"yarn add @react-stately/data\",\n    pnpm: \"pnpm add @react-stately/data\",\n    bun: \"bun add @react-stately/data\",\n  }}\n/>\n\n```jsx\nimport {useAsyncList} from \"@react-stately/data\";\n```\n\n<Spacer y={2} />\n\n<CodeDemo\n  asIframe\n  title=\"Sorting Rows\"\n  resizeEnabled={false}\n  displayMode=\"visible\"\n  files={tableContent.sorting}\n  previewHeight=\"520px\"\n  iframeSrc=\"/examples/table/sorting\"\n/>\n\n> Note that we passed the `isLoading` and `loadingContent` props to `TableBody` to\n> render a loading state while the data is being fetched.\n\n### Loading more data\n\nTable allows you to add a custom component at the end of the table, on the example below we are\nusing a button to load more data.\n\n<CodeDemo\n  asIframe\n  title=\"Loading more data\"\n  resizeEnabled={false}\n  displayMode=\"visible\"\n  files={tableContent.loadMore}\n  highlightedLines=\"36-45\"\n  previewHeight=\"620px\"\n  iframeSrc=\"/examples/table/load-more\"\n/>\n\n> **Note**: We passed the `isHeaderSticky` to the `Table` component to make the header sticky.\n\n### Paginated Table\n\nYou can use the [Pagination](/components/pagination) component to paginate the table.\n\n<CodeDemo title=\"Paginated Table\" files={tableContent.paginated} />\n\n### Async Pagination\n\nIt is also possible to use the [Pagination](/components/pagination) component to paginate the table asynchronously. To fetch the data, we are using the `useSWR` hook from [SWR](https://swr.vercel.app/docs/pagination).\n\n<CodeDemo\n  asIframe\n  title=\"Async Paginated Table\"\n  resizeEnabled={false}\n  files={tableContent.asyncPagination}\n  previewHeight=\"600px\"\n  displayMode=\"visible\"\n  iframeSrc=\"/examples/table/async-pagination\"\n/>\n\n### Infinite Pagination\n\nTable also supports infinite pagination. To do so, you can use the `useAsyncList` hook from [@react-stately/data](https://react-spectrum.adobe.com/react-stately/useAsyncList.html) and\n[@heroui/use-infinite-scroll](https://www.npmjs.com/package/@heroui/use-infinite-scroll) hook.\n\n<PackageManagers\n  commands={{\n    npm: \"npm install @react-stately/data @heroui/use-infinite-scroll\",\n    yarn: \"yarn add @react-stately/data @heroui/use-infinite-scroll\",\n    pnpm: \"pnpm add @react-stately/data @heroui/use-infinite-scroll\",\n    bun: \"bun add @react-stately/data @heroui/use-infinite-scroll\",\n  }}\n/>\n\n```jsx\nimport { useInfiniteScroll } from \"@heroui/use-infinite-scroll\";\nimport { useAsyncList } from \"@react-stately/data\";\n```\n\n<Spacer y={2} />\n\n<CodeDemo\n  asIframe\n  title=\"Infinite Paginated Table\"\n  resizeEnabled={false}\n  files={tableContent.infinitePagination}\n  previewHeight=\"620px\"\n  displayMode=\"visible\"\n  showPreview={true}\n  showOpenInCodeSandbox={false}\n  iframeSrc=\"/examples/table/infinite-pagination\"\n/>\n\n\n### Virtualization\n\nTable supports virtualization, which allows efficient rendering of large lists by only rendering items that are visible in the viewport. You can enable virtualization by setting the `isVirtualized` prop to `true`.\n\n<CodeDemo\n  title=\"Virtualization\"\n  files={tableContent.virtualization}\n/>\n\n> **Note**: The virtualization strategy is based on the [@tanstack/react-virtual](https://tanstack.com/virtual/latest) package, which provides efficient rendering of large lists by only rendering items that are visible in the viewport.\n\n#### Ten Thousand Items\n\nHere's an example of using virtualization with 10,000 items.\n\n<CodeDemo title=\"Ten Thousand Items\" files={tableContent.virtualizationTenThousand} />\n\n#### Max Table Height\n\nThe `maxTableHeight` prop is used to set the maximum height of the table. This is required when using virtualization. By default, it's set to `600`.\n\n<CodeDemo title=\"Max Table Height\" files={tableContent.virtualizationCustomMaxTableHeight} />\n\n#### Custom Row Height\n\nThe `rowHeight` prop is used to set the height of each row in the table. This is required when using virtualization. By default, it's set to `40`.\n\n<CodeDemo title=\"Custom Row Height\" files={tableContent.virtualizationCustomItemHeight} />\n\n### Use Case Example\n\nWhen creating a table, you usually need core functionalities like sorting, pagination, and filtering. In the\nexample below, we combined all these functionalities to create a complete table.\n\n<CodeDemo\n  asIframe\n  typescriptStrict={true}\n  title=\"Table use Case Example\"\n  resizeEnabled={false}\n  files={tableContent.useCase}\n  previewHeight=\"630px\"\n  displayMode=\"visible\"\n  iframeSrc=\"/examples/table/use-case\"\n/>\n\n## Slots\n\n- **base**: Defines a flexible column layout and relative positioning for the table component.\n- **wrapper**: Applies to the outermost wrapper, providing padding, flexible layout, relative positioning, visual styles, and scrollable overflow handling.\n- **table**: Sets the table to have a full minimum width and auto-adjusting height.\n- **thead**: Specifies rounded corners for the first child row in the table header.\n- **tbody**: No specific styles are applied to the body of the table.\n- **tr**: Styles for table rows including group focus, outline properties, and a set of undefined focus-visible classes.\n- **th**: Styles for table headers, including padding, text alignment, font properties, and special styles for sortable columns.\n- **td**: Applies to table cells, with properties for padding, alignment, and relative positioning, plus special styles for first child elements, selection indication, and disabled cells.\n- **tfoot**: No specific styles are applied to the footer of the table.\n- **sortIcon**: Styles for sorting icons, with properties for margin, opacity, and transition effects based on sorting direction and hover state.\n- **emptyWrapper**: Defines style for an empty table, with text alignment, color, and a specified height.\n- **loadingWrapper**: Style applied when the table is loading, positioning it centrally in its container.\n\n### Custom Styles\n\nYou can customize the `Table` component by passing custom Tailwind CSS classes to the component slots.\n\n<CodeDemo\n  asIframe\n  title=\"Table custom styles example\"\n  resizeEnabled={false}\n  files={tableContent.customStyles}\n  previewHeight=\"540px\"\n  displayMode=\"visible\"\n  iframeSrc=\"/examples/table/custom-styles\"\n/>\n\n<Spacer y={4} />\n\n## Data Attributes\n\n`TableBody` has the following attributes:\n\n- **data-empty**:\n  When the table is empty.\n- **data-loading**:\n  When the table data is loading. Based on `TableBody` `isLoading` and `loadingContent` props.\n\n`TableRow` has the following attributes:\n\n- **data-selected**:\n  When the row is selected. Based on `Table` `selectedKeys` prop.\n- **data-disabled**:\n  When the row is disabled. Based on `Table` `disabledKeys` prop.\n- **data-hover**:\n  When the row is being hovered. Based on [useHover](https://react-spectrum.adobe.com/react-aria/useHover.html)\n- **data-focus-visible**:\n  When the row is being focused with the keyboard. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).\n- **data-first**:\n  When the row is the first row.\n- **data-middle**:\n  When the row is in the middle.\n- **data-odd**:\n  When the row is odd.\n- **data-last**:\n  When the row is the last row.\n\n`TableCell` has the following attributes:\n\n- **data-selected**:\n  When the cell row is selected. Based on `Table` `selectedKeys` prop.\n- **data-focus-visible**:\n  When the cell is being focused with the keyboard. Based on [useFocusRing](https://react-spectrum.adobe.com/react-aria/useFocusRing.html).\n\n<Spacer y={4} />\n\n## Accessibility\n\n- Exposed to assistive technology as a grid using ARIA.\n- Keyboard navigation between columns, rows, cells, and in-cell focusable elements via the arrow keys.\n- Single, multiple, or no row selection via mouse, touch, or keyboard interactions.\n- Support for disabled rows, which cannot be selected.\n- Column sorting support.\n- Async loading, infinite scrolling, filtering, and sorting support.\n- Support for both toggle and replace selection behaviors.\n- Labeling support for accessibility.\n- Ensures that selections are announced using an ARIA live region.\n- Support for marking columns as row headers, which will be read when navigating the rows with a screen reader.\n- Optional support for checkboxes in each row for selection, as well as in the header to select all rows.\n- Automatic scrolling support during keyboard navigation.\n- Support for row actions via double click, Enter key, or tapping.\n- Typeahead to allow focusing rows by typing text.\n- Long press to enter selection mode on touch when there is both selection and row actions.\n\n<Spacer y={4} />\n\n## API\n\n### Table Props\n\n<APITable\n  data={[\n    {\n      attribute: \"children*\",\n      type: \"ReactNode[]\",\n      description: \"The elements that make up the table. Includes the TableHeader, TableBody, TableColumn, and TableRow.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"color\",\n      type: \"default | primary | secondary | success | warning | danger\",\n      description: \"Color of the selected rows, and checkboxes.\",\n      default: \"default\"\n    },\n    {\n      attribute: \"layout\",\n      type: \"auto | fixed\",\n      description: \"Defines the layout of the table.\",\n      default: \"auto\"\n    },\n    {\n      attribute: \"radius\",\n      type: \"none | sm | md | lg\",\n      description: \"The border-radius of the table.\",\n      default: \"lg\"\n    },\n    {\n      attribute: \"shadow\",\n      type: \"none | sm | md | lg\",\n      description: \"The shadow size of the table.\",\n      default: \"sm\"\n    },\n        {\n      attribute: \"maxTableHeight\",\n      type: \"number\",\n      description: \"The maximum height of the table in pixels. Required when using virtualization.\",\n      default: 600\n    },\n    {\n      attribute: \"rowHeight\",\n      type: \"number\", \n      description: \"The fixed height of each row item in pixels. Required when using virtualization.\",\n      default: 40\n    },\n    {\n      attribute: \"isVirtualized\",\n      type: \"boolean\",\n      description: \"Whether to enable virtualization. By default, it's enabled when the number of items exceeds 50.\",\n      default: \"undefined\"\n    },\n    {\n      attribute: \"hideHeader\",\n      type: \"boolean\",\n      description: \"Whether to hide the table header.\",\n      default: \"false\"\n    },\n    {\n      attribute: \"isStriped\",\n      type: \"boolean\",\n      description: \"Whether to apply striped rows in the table.\",\n      default: \"false\"\n    },\n    {\n      attribute: \"isCompact\",\n      type: \"boolean\", \n      description: \"Whether to apply compact style to the table.\",\n      default: \"false\"\n    },\n    {\n      attribute: \"isHeaderSticky\",\n      type: \"boolean\",\n      description: \"Whether to make the table header sticky.\",\n      default: \"false\"\n    },\n    {\n      attribute: \"fullWidth\",\n      type: \"boolean\",\n      description: \"Whether to make the table full width.\",\n      default: \"true\"\n    },\n    {\n      attribute: \"removeWrapper\",\n      type: \"boolean\",\n      description: \"Whether the table base container should not be rendered.\",\n      default: \"false\"\n    },\n    {\n      attribute: \"BaseComponent\",\n      type: \"React.ComponentType<any>\",\n      description: \"A custom wrapper component for the table.\",\n      default: \"div\"\n    },\n    {\n      attribute: \"topContent\",\n      type: \"ReactNode\",\n      description: \"Provides content to include a component in the top of the table.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"bottomContent\",\n      type: \"ReactNode\", \n      description: \"Provides content to include a component in the bottom of the table.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"topContentPlacement\",\n      type: \"inside | outside\",\n      description: \"Where to place the topContent component.\",\n      default: \"inside\"\n    },\n    {\n      attribute: \"bottomContentPlacement\",\n      type: \"inside | outside\",\n      description: \"Where to place the bottomContent component.\",\n      default: \"inside\"\n    },\n    {\n      attribute: \"showSelectionCheckboxes\",\n      type: \"boolean\",\n      description: \"Whether the row selection checkboxes should be displayed.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"sortDescriptor\",\n      type: \"SortDescriptor\",\n      description: \"The current sorted column and direction.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"selectedKeys\",\n      type: \"Selection\",\n      description: \"The currently selected keys in the collection (controlled).\",\n      default: \"-\"\n    },\n    {\n      attribute: \"defaultSelectedKeys\",\n      type: \"Selection\",\n      description: \"The initial selected keys in the collection (uncontrolled).\",\n      default: \"-\"\n    },\n    {\n      attribute: \"disabledKeys\",\n      type: \"Selection\",\n      description: \"A set of keys for rows that are disabled.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"disallowEmptySelection\",\n      type: \"boolean\",\n      description: \"Whether the collection allows empty selection.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"selectionMode\",\n      type: \"single | multiple | none\",\n      description: \"The type of selection that is allowed in the collection.\",\n      default: \"none\"\n    },\n    {\n      attribute: \"selectionBehavior\",\n      type: \"toggle | replace\",\n      description: \"How multiple selection should behave in the collection.\",\n      default: \"toggle\"\n    },\n    {\n      attribute: \"disabledBehavior\",\n      type: \"selection | all\",\n      description: \"Whether disabledKeys applies to all interactions, or only selection.\",\n      default: \"selection\"\n    },\n    {\n      attribute: \"allowDuplicateSelectionEvents\",\n      type: \"boolean\",\n      description: \"Whether onSelectionChange should fire even if the new set of keys is the same as the last.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"disableAnimation\",\n      type: \"boolean\",\n      description: \"Whether to disable the table and checkbox animations.\",\n      default: \"false\"\n    },\n    {\n      attribute: \"checkboxesProps\",\n      type: \"CheckboxProps\",\n      description: \"Props to be passed to the checkboxes.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"classNames\",\n      type: \"Partial<Record<'base' | 'table' | 'thead' | 'tbody' | 'tfoot' | 'emptyWrapper' | 'loadingWrapper' | 'wrapper' | 'tr' | 'th' | 'td' | 'sortIcon', string>>\",\n      description: \"Allows to set custom class names for the dropdown item slots.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"isKeyboardNavigationDisabled\",\n      type: \"boolean\",\n      description: \"Whether to disable keyboard navigations or not.\",\n      default: \"false\"\n    }\n  ]}\n/>\n\n### Table Events\n\n<APITable\n  data={[\n    {\n      attribute: \"onRowAction\",\n      type: \"(key: React.Key) => void\",\n      description: \"Handler that is called when a user performs an action on the row.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"onCellAction\",\n      type: \"(key: React.Key) => void\",\n      description: \"Handler that is called when a user performs an action on the cell.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"onSelectionChange\",\n      type: \"(keys: Selection) => any\",\n      description: \"Handler that is called when the selection changes.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"onSortChange\",\n      type: \"(descriptor: SortDescriptor) => any\",\n      description: \"Handler that is called when the sorted column or direction changes.\",\n      default: \"-\"\n    }\n  ]}\n/>\n\n### TableHeader Props\n\n<APITable\n  data={[\n    {\n      attribute: \"children*\",\n      type: \"ReactNode[]\",\n      description: \"A list of Column(s) or a function. If the latter, a list of columns must be provided using the columns prop\",\n      default: \"-\"\n    },\n    {\n      attribute: \"columns\",\n      type: \"T[]\",\n      description: \"A list of table columns.\",\n      default: \"-\"\n    }\n  ]}\n/>\n\n### TableColumn Props\n\n<APITable\n  data={[\n    {\n      attribute: \"children*\",\n      type: \"ReactNode\",\n      description: \"Static child columns or content to render as the column header\",\n      default: \"-\"\n    },\n    {\n      attribute: \"align\",\n      type: \"start | center | end\",\n      description: \"The alignment of the column's contents relative to its allotted width\",\n      default: \"start\"\n    },\n    {\n      attribute: \"hideHeader\",\n      type: \"boolean\",\n      description: \"Whether the column should hide its header text\",\n      default: \"false\"\n    },\n    {\n      attribute: \"allowsSorting\",\n      type: \"boolean\",\n      description: \"Whether the column allows sorting\",\n      default: \"-\"\n    },\n    {\n      attribute: \"isRowHeader\",\n      type: \"boolean\",\n      description: \"Whether a column is a row header and should be announced by assistive technology during row navigation\",\n      default: \"-\"\n    },\n    {\n      attribute: \"textValue\",\n      type: \"string\",\n      description: \"A string representation of the column's contents, used for accessibility announcements\",\n      default: \"-\"\n    },\n    {\n      attribute: \"width\",\n      type: \"string | number\",\n      description: \"The width of the column\",\n      default: \"-\"\n    },\n    {\n      attribute: \"minWidth\",\n      type: \"string | number\",\n      description: \"The minimum width of the column\",\n      default: \"-\"\n    },\n    {\n      attribute: \"maxWidth\",\n      type: \"string | number\",\n      description: \"The maximum width of the column\",\n      default: \"-\"\n    }\n  ]}\n/>\n\n### TableBody Props\n\n<APITable\n  data={[\n    {\n      attribute: \"children*\",\n      type: \"RowElement | RowElement[] | ((item: T) => RowElement)\",\n      description: \"The contents of the table body. Supports static items or a function for dynamic rendering\",\n      default: \"-\"\n    },\n    {\n      attribute: \"items\",\n      type: \"Iterable<T>\",\n      description: \"A list of row objects in the table body used when dynamically rendering rows\",\n      default: \"-\"\n    },\n    {\n      attribute: \"isLoading\",\n      type: \"boolean\",\n      description: \"Whether the table body is loading.\",\n      default: \"-\"\n    },\n    {\n      attribute: \"loadingState\",\n      type: \"LoadingState\",\n      description: \"Handler that is called when more items should be loaded, e.g. while scrolling near the bottom\",\n      default: \"-\"\n    },\n    {\n      attribute: \"loadingContent\",\n      type: \"ReactNode\",\n      description: \"Content to display while loading more items\",\n      default: \"-\"\n    },\n    {\n      attribute: \"emptyContent\",\n      type: \"ReactNode\",\n      description: \"Content to display when there are no items in the table body\",\n      default: \"-\"\n    }\n  ]}\n/>\n\n### TableBody Events\n\n<APITable\n  data={[\n    {\n      attribute: \"onLoadMore\",\n      type: \"() => any\",\n      description: \"A list of row objects in the table body used when dynamically rendering rows\",\n      default: \"-\"\n    }\n  ]}\n/>\n\n### TableRow Props\n\n<APITable\n  data={[\n    {\n      attribute: \"children*\",\n      type: \"CellElement | CellElement[] | CellRenderer\",\n      description: \"Rendered contents of the row or row child items\",\n      default: \"-\"\n    },\n    {\n      attribute: \"textValue\",\n      type: \"string\",\n      description: \"A string representation of the row's contents, used for features like typeahead\",\n      default: \"-\"\n    }\n  ]}\n/>\n\n### TableCell Props\n\n<APITable\n  data={[\n    {\n      attribute: \"children*\",\n      type: \"ReactNode\",\n      description: \"The contents of the cell\",\n      default: \"-\"\n    },\n    {\n      attribute: \"textValue\",\n      type: \"string\",\n      description: \"A string representation of the row's contents, used for features like typeahead\",\n      default: \"-\"\n    }\n  ]}\n/>\n\n---\n\n<Spacer y={2} />\n\n### Table types\n\n#### Sort descriptor\n\n```ts\ntype SortDescriptor = {\n  column: React.Key;\n  direction: \"ascending\" | \"descending\";\n};\n```\n\n#### Selection\n\n```ts\ntype Selection = \"all\" | Set<React.Key>;\n```\n\n#### Loading state\n\n```ts\ntype LoadingState = \"loading\" | \"sorting\" | \"loadingMore\" | \"error\" | \"idle\" | \"filtering\";\n```\n",
    "code": "var Component=(()=>{var we=Object.create;var u=Object.defineProperty;var ve=Object.getOwnPropertyDescriptor;var xe=Object.getOwnPropertyNames;var ke=Object.getPrototypeOf,Se=Object.prototype.hasOwnProperty;var Re=(o,a)=>()=>(a||o((a={exports:{}}).exports,a),a.exports),Ae=(o,a)=>{for(var r in a)u(o,r,{get:a[r],enumerable:!0})},h=(o,a,r,c)=>{if(a&&typeof a==\"object\"||typeof a==\"function\")for(let t of xe(a))!Se.call(o,t)&&t!==r&&u(o,t,{get:()=>a[t],enumerable:!(c=ve(a,t))||c.enumerable});return o};var Me=(o,a,r)=>(r=o!=null?we(ke(o)):{},h(a||!o||!o.__esModule?u(r,\"default\",{value:o,enumerable:!0}):r,o)),De=o=>h(u({},\"__esModule\",{value:!0}),o);var g=Re((za,b)=>{b.exports=_jsx_runtime});var Va={};Ae(Va,{default:()=>Ce,frontmatter:()=>Ka});var e=Me(g());var T=`import {Table, TableHeader, TableColumn, TableBody, TableRow, TableCell} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <Table aria-label=\"Example static collection table\">\n      <TableHeader>\n        <TableColumn>NAME</TableColumn>\n        <TableColumn>ROLE</TableColumn>\n        <TableColumn>STATUS</TableColumn>\n      </TableHeader>\n      <TableBody>\n        <TableRow key=\"1\">\n          <TableCell>Tony Reichert</TableCell>\n          <TableCell>CEO</TableCell>\n          <TableCell>Active</TableCell>\n        </TableRow>\n        <TableRow key=\"2\">\n          <TableCell>Zoey Lang</TableCell>\n          <TableCell>Technical Lead</TableCell>\n          <TableCell>Paused</TableCell>\n        </TableRow>\n        <TableRow key=\"3\">\n          <TableCell>Jane Fisher</TableCell>\n          <TableCell>Senior Developer</TableCell>\n          <TableCell>Active</TableCell>\n        </TableRow>\n        <TableRow key=\"4\">\n          <TableCell>William Howard</TableCell>\n          <TableCell>Community Manager</TableCell>\n          <TableCell>Vacation</TableCell>\n        </TableRow>\n      </TableBody>\n    </Table>\n  );\n}\n`;var Le={\"/App.jsx\":T},f={...Le};var y=`import {\n  Table,\n  TableHeader,\n  TableColumn,\n  TableBody,\n  TableRow,\n  TableCell,\n  getKeyValue,\n} from \"@heroui/react\";\n\nconst rows = [\n  {\n    key: \"1\",\n    name: \"Tony Reichert\",\n    role: \"CEO\",\n    status: \"Active\",\n  },\n  {\n    key: \"2\",\n    name: \"Zoey Lang\",\n    role: \"Technical Lead\",\n    status: \"Paused\",\n  },\n  {\n    key: \"3\",\n    name: \"Jane Fisher\",\n    role: \"Senior Developer\",\n    status: \"Active\",\n  },\n  {\n    key: \"4\",\n    name: \"William Howard\",\n    role: \"Community Manager\",\n    status: \"Vacation\",\n  },\n];\n\nconst columns = [\n  {\n    key: \"name\",\n    label: \"NAME\",\n  },\n  {\n    key: \"role\",\n    label: \"ROLE\",\n  },\n  {\n    key: \"status\",\n    label: \"STATUS\",\n  },\n];\n\nexport default function App() {\n  return (\n    <Table aria-label=\"Example table with dynamic content\">\n      <TableHeader columns={columns}>\n        {(column) => <TableColumn key={column.key}>{column.label}</TableColumn>}\n      </TableHeader>\n      <TableBody items={rows}>\n        {(item) => (\n          <TableRow key={item.key}>\n            {(columnKey) => <TableCell>{getKeyValue(item, columnKey)}</TableCell>}\n          </TableRow>\n        )}\n      </TableBody>\n    </Table>\n  );\n}\n`;var Ne={\"/App.jsx\":y},C={...Ne};var w=`import {Table, TableHeader, TableColumn, TableBody} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <Table aria-label=\"Example empty table\">\n      <TableHeader>\n        <TableColumn>NAME</TableColumn>\n        <TableColumn>ROLE</TableColumn>\n        <TableColumn>STATUS</TableColumn>\n      </TableHeader>\n      <TableBody emptyContent={\"No rows to display.\"}>{[]}</TableBody>\n    </Table>\n  );\n}\n`;var He={\"/App.jsx\":w},v={...He};var x=`import {Table, TableHeader, TableColumn, TableBody, TableRow, TableCell} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <Table hideHeader aria-label=\"Example static collection table\">\n      <TableHeader>\n        <TableColumn>NAME</TableColumn>\n        <TableColumn>ROLE</TableColumn>\n        <TableColumn>STATUS</TableColumn>\n      </TableHeader>\n      <TableBody>\n        <TableRow key=\"1\">\n          <TableCell>Tony Reichert</TableCell>\n          <TableCell>CEO</TableCell>\n          <TableCell>Active</TableCell>\n        </TableRow>\n        <TableRow key=\"2\">\n          <TableCell>Zoey Lang</TableCell>\n          <TableCell>Technical Lead</TableCell>\n          <TableCell>Paused</TableCell>\n        </TableRow>\n        <TableRow key=\"3\">\n          <TableCell>Jane Fisher</TableCell>\n          <TableCell>Senior Developer</TableCell>\n          <TableCell>Active</TableCell>\n        </TableRow>\n        <TableRow key=\"4\">\n          <TableCell>William Howard</TableCell>\n          <TableCell>Community Manager</TableCell>\n          <TableCell>Vacation</TableCell>\n        </TableRow>\n      </TableBody>\n    </Table>\n  );\n}\n`;var Ve={\"/App.jsx\":x},k={...Ve};var S=`import {Table, TableHeader, TableColumn, TableBody, TableRow, TableCell} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <Table removeWrapper aria-label=\"Example static collection table\">\n      <TableHeader>\n        <TableColumn>NAME</TableColumn>\n        <TableColumn>ROLE</TableColumn>\n        <TableColumn>STATUS</TableColumn>\n      </TableHeader>\n      <TableBody>\n        <TableRow key=\"1\">\n          <TableCell>Tony Reichert</TableCell>\n          <TableCell>CEO</TableCell>\n          <TableCell>Active</TableCell>\n        </TableRow>\n        <TableRow key=\"2\">\n          <TableCell>Zoey Lang</TableCell>\n          <TableCell>Technical Lead</TableCell>\n          <TableCell>Paused</TableCell>\n        </TableRow>\n        <TableRow key=\"3\">\n          <TableCell>Jane Fisher</TableCell>\n          <TableCell>Senior Developer</TableCell>\n          <TableCell>Active</TableCell>\n        </TableRow>\n        <TableRow key=\"4\">\n          <TableCell>William Howard</TableCell>\n          <TableCell>Community Manager</TableCell>\n          <TableCell>Vacation</TableCell>\n        </TableRow>\n      </TableBody>\n    </Table>\n  );\n}\n`;var ze={\"/App.jsx\":S},R={...ze};var A=`import {\n  Table,\n  TableHeader,\n  TableColumn,\n  TableBody,\n  TableRow,\n  TableCell,\n  User,\n  Chip,\n  Tooltip,\n} from \"@heroui/react\";\n\nexport const columns = [\n  {name: \"NAME\", uid: \"name\"},\n  {name: \"ROLE\", uid: \"role\"},\n  {name: \"STATUS\", uid: \"status\"},\n  {name: \"ACTIONS\", uid: \"actions\"},\n];\n\nexport const users = [\n  {\n    id: 1,\n    name: \"Tony Reichert\",\n    role: \"CEO\",\n    team: \"Management\",\n    status: \"active\",\n    age: \"29\",\n    avatar: \"https://i.pravatar.cc/150?u=a042581f4e29026024d\",\n    email: \"tony.reichert@example.com\",\n  },\n  {\n    id: 2,\n    name: \"Zoey Lang\",\n    role: \"Technical Lead\",\n    team: \"Development\",\n    status: \"paused\",\n    age: \"25\",\n    avatar: \"https://i.pravatar.cc/150?u=a042581f4e29026704d\",\n    email: \"zoey.lang@example.com\",\n  },\n  {\n    id: 3,\n    name: \"Jane Fisher\",\n    role: \"Senior Developer\",\n    team: \"Development\",\n    status: \"active\",\n    age: \"22\",\n    avatar: \"https://i.pravatar.cc/150?u=a04258114e29026702d\",\n    email: \"jane.fisher@example.com\",\n  },\n  {\n    id: 4,\n    name: \"William Howard\",\n    role: \"Community Manager\",\n    team: \"Marketing\",\n    status: \"vacation\",\n    age: \"28\",\n    avatar: \"https://i.pravatar.cc/150?u=a048581f4e29026701d\",\n    email: \"william.howard@example.com\",\n  },\n  {\n    id: 5,\n    name: \"Kristen Copper\",\n    role: \"Sales Manager\",\n    team: \"Sales\",\n    status: \"active\",\n    age: \"24\",\n    avatar: \"https://i.pravatar.cc/150?u=a092581d4ef9026700d\",\n    email: \"kristen.cooper@example.com\",\n  },\n];\n\nexport const EyeIcon = (props) => {\n  return (\n    <svg\n      aria-hidden=\"true\"\n      fill=\"none\"\n      focusable=\"false\"\n      height=\"1em\"\n      role=\"presentation\"\n      viewBox=\"0 0 20 20\"\n      width=\"1em\"\n      {...props}\n    >\n      <path\n        d=\"M12.9833 10C12.9833 11.65 11.65 12.9833 10 12.9833C8.35 12.9833 7.01666 11.65 7.01666 10C7.01666 8.35 8.35 7.01666 10 7.01666C11.65 7.01666 12.9833 8.35 12.9833 10Z\"\n        stroke=\"currentColor\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth={1.5}\n      />\n      <path\n        d=\"M9.99999 16.8916C12.9417 16.8916 15.6833 15.1583 17.5917 12.1583C18.3417 10.9833 18.3417 9.00831 17.5917 7.83331C15.6833 4.83331 12.9417 3.09998 9.99999 3.09998C7.05833 3.09998 4.31666 4.83331 2.40833 7.83331C1.65833 9.00831 1.65833 10.9833 2.40833 12.1583C4.31666 15.1583 7.05833 16.8916 9.99999 16.8916Z\"\n        stroke=\"currentColor\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth={1.5}\n      />\n    </svg>\n  );\n};\n\nexport const DeleteIcon = (props) => {\n  return (\n    <svg\n      aria-hidden=\"true\"\n      fill=\"none\"\n      focusable=\"false\"\n      height=\"1em\"\n      role=\"presentation\"\n      viewBox=\"0 0 20 20\"\n      width=\"1em\"\n      {...props}\n    >\n      <path\n        d=\"M17.5 4.98332C14.725 4.70832 11.9333 4.56665 9.15 4.56665C7.5 4.56665 5.85 4.64998 4.2 4.81665L2.5 4.98332\"\n        stroke=\"currentColor\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth={1.5}\n      />\n      <path\n        d=\"M7.08331 4.14169L7.26665 3.05002C7.39998 2.25835 7.49998 1.66669 8.90831 1.66669H11.0916C12.5 1.66669 12.6083 2.29169 12.7333 3.05835L12.9166 4.14169\"\n        stroke=\"currentColor\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth={1.5}\n      />\n      <path\n        d=\"M15.7084 7.61664L15.1667 16.0083C15.075 17.3166 15 18.3333 12.675 18.3333H7.32502C5.00002 18.3333 4.92502 17.3166 4.83335 16.0083L4.29169 7.61664\"\n        stroke=\"currentColor\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth={1.5}\n      />\n      <path\n        d=\"M8.60834 13.75H11.3833\"\n        stroke=\"currentColor\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth={1.5}\n      />\n      <path\n        d=\"M7.91669 10.4167H12.0834\"\n        stroke=\"currentColor\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth={1.5}\n      />\n    </svg>\n  );\n};\n\nexport const EditIcon = (props) => {\n  return (\n    <svg\n      aria-hidden=\"true\"\n      fill=\"none\"\n      focusable=\"false\"\n      height=\"1em\"\n      role=\"presentation\"\n      viewBox=\"0 0 20 20\"\n      width=\"1em\"\n      {...props}\n    >\n      <path\n        d=\"M11.05 3.00002L4.20835 10.2417C3.95002 10.5167 3.70002 11.0584 3.65002 11.4334L3.34169 14.1334C3.23335 15.1084 3.93335 15.775 4.90002 15.6084L7.58335 15.15C7.95835 15.0834 8.48335 14.8084 8.74168 14.525L15.5834 7.28335C16.7667 6.03335 17.3 4.60835 15.4583 2.86668C13.625 1.14168 12.2334 1.75002 11.05 3.00002Z\"\n        stroke=\"currentColor\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeMiterlimit={10}\n        strokeWidth={1.5}\n      />\n      <path\n        d=\"M9.90833 4.20831C10.2667 6.50831 12.1333 8.26665 14.45 8.49998\"\n        stroke=\"currentColor\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeMiterlimit={10}\n        strokeWidth={1.5}\n      />\n      <path\n        d=\"M2.5 18.3333H17.5\"\n        stroke=\"currentColor\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeMiterlimit={10}\n        strokeWidth={1.5}\n      />\n    </svg>\n  );\n};\n\nconst statusColorMap = {\n  active: \"success\",\n  paused: \"danger\",\n  vacation: \"warning\",\n};\n\nexport default function App() {\n  const renderCell = React.useCallback((user, columnKey) => {\n    const cellValue = user[columnKey];\n\n    switch (columnKey) {\n      case \"name\":\n        return (\n          <User\n            avatarProps={{radius: \"lg\", src: user.avatar}}\n            description={user.email}\n            name={cellValue}\n          >\n            {user.email}\n          </User>\n        );\n      case \"role\":\n        return (\n          <div className=\"flex flex-col\">\n            <p className=\"text-bold text-sm capitalize\">{cellValue}</p>\n            <p className=\"text-bold text-sm capitalize text-default-400\">{user.team}</p>\n          </div>\n        );\n      case \"status\":\n        return (\n          <Chip className=\"capitalize\" color={statusColorMap[user.status]} size=\"sm\" variant=\"flat\">\n            {cellValue}\n          </Chip>\n        );\n      case \"actions\":\n        return (\n          <div className=\"relative flex items-center gap-2\">\n            <Tooltip content=\"Details\">\n              <span className=\"text-lg text-default-400 cursor-pointer active:opacity-50\">\n                <EyeIcon />\n              </span>\n            </Tooltip>\n            <Tooltip content=\"Edit user\">\n              <span className=\"text-lg text-default-400 cursor-pointer active:opacity-50\">\n                <EditIcon />\n              </span>\n            </Tooltip>\n            <Tooltip color=\"danger\" content=\"Delete user\">\n              <span className=\"text-lg text-danger cursor-pointer active:opacity-50\">\n                <DeleteIcon />\n              </span>\n            </Tooltip>\n          </div>\n        );\n      default:\n        return cellValue;\n    }\n  }, []);\n\n  return (\n    <Table aria-label=\"Example table with custom cells\">\n      <TableHeader columns={columns}>\n        {(column) => (\n          <TableColumn key={column.uid} align={column.uid === \"actions\" ? \"center\" : \"start\"}>\n            {column.name}\n          </TableColumn>\n        )}\n      </TableHeader>\n      <TableBody items={users}>\n        {(item) => (\n          <TableRow key={item.id}>\n            {(columnKey) => <TableCell>{renderCell(item, columnKey)}</TableCell>}\n          </TableRow>\n        )}\n      </TableBody>\n    </Table>\n  );\n}\n`;var M=`import React, {SVGProps} from \"react\";\nimport {\n  Table,\n  TableHeader,\n  TableColumn,\n  TableBody,\n  TableRow,\n  TableCell,\n  User,\n  Chip,\n  Tooltip,\n  ChipProps,\n} from \"@heroui/react\";\n\nexport type IconSvgProps = SVGProps<SVGSVGElement> & {\n  size?: number;\n};\n\nexport const columns = [\n  {name: \"NAME\", uid: \"name\"},\n  {name: \"ROLE\", uid: \"role\"},\n  {name: \"STATUS\", uid: \"status\"},\n  {name: \"ACTIONS\", uid: \"actions\"},\n];\n\nexport const users = [\n  {\n    id: 1,\n    name: \"Tony Reichert\",\n    role: \"CEO\",\n    team: \"Management\",\n    status: \"active\",\n    age: \"29\",\n    avatar: \"https://i.pravatar.cc/150?u=a042581f4e29026024d\",\n    email: \"tony.reichert@example.com\",\n  },\n  {\n    id: 2,\n    name: \"Zoey Lang\",\n    role: \"Technical Lead\",\n    team: \"Development\",\n    status: \"paused\",\n    age: \"25\",\n    avatar: \"https://i.pravatar.cc/150?u=a042581f4e29026704d\",\n    email: \"zoey.lang@example.com\",\n  },\n  {\n    id: 3,\n    name: \"Jane Fisher\",\n    role: \"Senior Developer\",\n    team: \"Development\",\n    status: \"active\",\n    age: \"22\",\n    avatar: \"https://i.pravatar.cc/150?u=a04258114e29026702d\",\n    email: \"jane.fisher@example.com\",\n  },\n  {\n    id: 4,\n    name: \"William Howard\",\n    role: \"Community Manager\",\n    team: \"Marketing\",\n    status: \"vacation\",\n    age: \"28\",\n    avatar: \"https://i.pravatar.cc/150?u=a048581f4e29026701d\",\n    email: \"william.howard@example.com\",\n  },\n  {\n    id: 5,\n    name: \"Kristen Copper\",\n    role: \"Sales Manager\",\n    team: \"Sales\",\n    status: \"active\",\n    age: \"24\",\n    avatar: \"https://i.pravatar.cc/150?u=a092581d4ef9026700d\",\n    email: \"kristen.cooper@example.com\",\n  },\n];\n\nexport const EyeIcon = (props: IconSvgProps) => {\n  return (\n    <svg\n      aria-hidden=\"true\"\n      fill=\"none\"\n      focusable=\"false\"\n      height=\"1em\"\n      role=\"presentation\"\n      viewBox=\"0 0 20 20\"\n      width=\"1em\"\n      {...props}\n    >\n      <path\n        d=\"M12.9833 10C12.9833 11.65 11.65 12.9833 10 12.9833C8.35 12.9833 7.01666 11.65 7.01666 10C7.01666 8.35 8.35 7.01666 10 7.01666C11.65 7.01666 12.9833 8.35 12.9833 10Z\"\n        stroke=\"currentColor\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth={1.5}\n      />\n      <path\n        d=\"M9.99999 16.8916C12.9417 16.8916 15.6833 15.1583 17.5917 12.1583C18.3417 10.9833 18.3417 9.00831 17.5917 7.83331C15.6833 4.83331 12.9417 3.09998 9.99999 3.09998C7.05833 3.09998 4.31666 4.83331 2.40833 7.83331C1.65833 9.00831 1.65833 10.9833 2.40833 12.1583C4.31666 15.1583 7.05833 16.8916 9.99999 16.8916Z\"\n        stroke=\"currentColor\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth={1.5}\n      />\n    </svg>\n  );\n};\n\nexport const DeleteIcon = (props: IconSvgProps) => {\n  return (\n    <svg\n      aria-hidden=\"true\"\n      fill=\"none\"\n      focusable=\"false\"\n      height=\"1em\"\n      role=\"presentation\"\n      viewBox=\"0 0 20 20\"\n      width=\"1em\"\n      {...props}\n    >\n      <path\n        d=\"M17.5 4.98332C14.725 4.70832 11.9333 4.56665 9.15 4.56665C7.5 4.56665 5.85 4.64998 4.2 4.81665L2.5 4.98332\"\n        stroke=\"currentColor\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth={1.5}\n      />\n      <path\n        d=\"M7.08331 4.14169L7.26665 3.05002C7.39998 2.25835 7.49998 1.66669 8.90831 1.66669H11.0916C12.5 1.66669 12.6083 2.29169 12.7333 3.05835L12.9166 4.14169\"\n        stroke=\"currentColor\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth={1.5}\n      />\n      <path\n        d=\"M15.7084 7.61664L15.1667 16.0083C15.075 17.3166 15 18.3333 12.675 18.3333H7.32502C5.00002 18.3333 4.92502 17.3166 4.83335 16.0083L4.29169 7.61664\"\n        stroke=\"currentColor\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth={1.5}\n      />\n      <path\n        d=\"M8.60834 13.75H11.3833\"\n        stroke=\"currentColor\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth={1.5}\n      />\n      <path\n        d=\"M7.91669 10.4167H12.0834\"\n        stroke=\"currentColor\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth={1.5}\n      />\n    </svg>\n  );\n};\n\nexport const EditIcon = (props: IconSvgProps) => {\n  return (\n    <svg\n      aria-hidden=\"true\"\n      fill=\"none\"\n      focusable=\"false\"\n      height=\"1em\"\n      role=\"presentation\"\n      viewBox=\"0 0 20 20\"\n      width=\"1em\"\n      {...props}\n    >\n      <path\n        d=\"M11.05 3.00002L4.20835 10.2417C3.95002 10.5167 3.70002 11.0584 3.65002 11.4334L3.34169 14.1334C3.23335 15.1084 3.93335 15.775 4.90002 15.6084L7.58335 15.15C7.95835 15.0834 8.48335 14.8084 8.74168 14.525L15.5834 7.28335C16.7667 6.03335 17.3 4.60835 15.4583 2.86668C13.625 1.14168 12.2334 1.75002 11.05 3.00002Z\"\n        stroke=\"currentColor\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeMiterlimit={10}\n        strokeWidth={1.5}\n      />\n      <path\n        d=\"M9.90833 4.20831C10.2667 6.50831 12.1333 8.26665 14.45 8.49998\"\n        stroke=\"currentColor\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeMiterlimit={10}\n        strokeWidth={1.5}\n      />\n      <path\n        d=\"M2.5 18.3333H17.5\"\n        stroke=\"currentColor\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeMiterlimit={10}\n        strokeWidth={1.5}\n      />\n    </svg>\n  );\n};\nconst statusColorMap: Record<string, ChipProps[\"color\"]> = {\n  active: \"success\",\n  paused: \"danger\",\n  vacation: \"warning\",\n};\n\ntype User = (typeof users)[0];\n\nexport default function App() {\n  const renderCell = React.useCallback((user: User, columnKey: React.Key) => {\n    const cellValue = user[columnKey as keyof User];\n\n    switch (columnKey) {\n      case \"name\":\n        return (\n          <User\n            avatarProps={{radius: \"lg\", src: user.avatar}}\n            description={user.email}\n            name={cellValue}\n          >\n            {user.email}\n          </User>\n        );\n      case \"role\":\n        return (\n          <div className=\"flex flex-col\">\n            <p className=\"text-bold text-sm capitalize\">{cellValue}</p>\n            <p className=\"text-bold text-sm capitalize text-default-400\">{user.team}</p>\n          </div>\n        );\n      case \"status\":\n        return (\n          <Chip className=\"capitalize\" color={statusColorMap[user.status]} size=\"sm\" variant=\"flat\">\n            {cellValue}\n          </Chip>\n        );\n      case \"actions\":\n        return (\n          <div className=\"relative flex items-center gap-2\">\n            <Tooltip content=\"Details\">\n              <span className=\"text-lg text-default-400 cursor-pointer active:opacity-50\">\n                <EyeIcon />\n              </span>\n            </Tooltip>\n            <Tooltip content=\"Edit user\">\n              <span className=\"text-lg text-default-400 cursor-pointer active:opacity-50\">\n                <EditIcon />\n              </span>\n            </Tooltip>\n            <Tooltip color=\"danger\" content=\"Delete user\">\n              <span className=\"text-lg text-danger cursor-pointer active:opacity-50\">\n                <DeleteIcon />\n              </span>\n            </Tooltip>\n          </div>\n        );\n      default:\n        return cellValue;\n    }\n  }, []);\n\n  return (\n    <Table aria-label=\"Example table with custom cells\">\n      <TableHeader columns={columns}>\n        {(column) => (\n          <TableColumn key={column.uid} align={column.uid === \"actions\" ? \"center\" : \"start\"}>\n            {column.name}\n          </TableColumn>\n        )}\n      </TableHeader>\n      <TableBody items={users}>\n        {(item) => (\n          <TableRow key={item.id}>\n            {(columnKey) => <TableCell>{renderCell(item, columnKey)}</TableCell>}\n          </TableRow>\n        )}\n      </TableBody>\n    </Table>\n  );\n}\n`;var Fe={\"/App.jsx\":A},Oe={\"/App.tsx\":M},D={...Fe,...Oe};var P=`import {Table, TableHeader, TableColumn, TableBody, TableRow, TableCell} from \"@heroui/react\";\n\nexport default function App() {\n  return (\n    <Table isStriped aria-label=\"Example static collection table\">\n      <TableHeader>\n        <TableColumn>NAME</TableColumn>\n        <TableColumn>ROLE</TableColumn>\n        <TableColumn>STATUS</TableColumn>\n      </TableHeader>\n      <TableBody>\n        <TableRow key=\"1\">\n          <TableCell>Tony Reichert</TableCell>\n          <TableCell>CEO</TableCell>\n          <TableCell>Active</TableCell>\n        </TableRow>\n        <TableRow key=\"2\">\n          <TableCell>Zoey Lang</TableCell>\n          <TableCell>Technical Lead</TableCell>\n          <TableCell>Paused</TableCell>\n        </TableRow>\n        <TableRow key=\"3\">\n          <TableCell>Jane Fisher</TableCell>\n          <TableCell>Senior Developer</TableCell>\n          <TableCell>Active</TableCell>\n        </TableRow>\n        <TableRow key=\"4\">\n          <TableCell>William Howard</TableCell>\n          <TableCell>Community Manager</TableCell>\n          <TableCell>Vacation</TableCell>\n        </TableRow>\n      </TableBody>\n    </Table>\n  );\n}\n`;var Ge={\"/App.jsx\":P},L={...Ge};var I=`import {\n  Table,\n  TableHeader,\n  TableColumn,\n  TableBody,\n  TableRow,\n  TableCell,\n  RadioGroup,\n  Radio,\n} from \"@heroui/react\";\n\nexport default function App() {\n  const [selectedColor, setSelectedColor] = React.useState(\"default\");\n\n  const colors = [\"default\", \"primary\", \"secondary\", \"success\", \"warning\", \"danger\"];\n\n  return (\n    <div className=\"flex flex-col gap-3\">\n      <Table\n        aria-label=\"Example static collection table\"\n        color={selectedColor}\n        defaultSelectedKeys={[\"2\"]}\n        selectionMode=\"single\"\n      >\n        <TableHeader>\n          <TableColumn>NAME</TableColumn>\n          <TableColumn>ROLE</TableColumn>\n          <TableColumn>STATUS</TableColumn>\n        </TableHeader>\n        <TableBody>\n          <TableRow key=\"1\">\n            <TableCell>Tony Reichert</TableCell>\n            <TableCell>CEO</TableCell>\n            <TableCell>Active</TableCell>\n          </TableRow>\n          <TableRow key=\"2\">\n            <TableCell>Zoey Lang</TableCell>\n            <TableCell>Technical Lead</TableCell>\n            <TableCell>Paused</TableCell>\n          </TableRow>\n          <TableRow key=\"3\">\n            <TableCell>Jane Fisher</TableCell>\n            <TableCell>Senior Developer</TableCell>\n            <TableCell>Active</TableCell>\n          </TableRow>\n          <TableRow key=\"4\">\n            <TableCell>William Howard</TableCell>\n            <TableCell>Community Manager</TableCell>\n            <TableCell>Vacation</TableCell>\n          </TableRow>\n        </TableBody>\n      </Table>\n      <RadioGroup\n        label=\"Selection color\"\n        orientation=\"horizontal\"\n        value={selectedColor}\n        onValueChange={setSelectedColor}\n      >\n        {colors.map((color) => (\n          <Radio key={color} className=\"capitalize\" color={color} value={color}>\n            {color}\n          </Radio>\n        ))}\n      </RadioGroup>\n    </div>\n  );\n}\n`;var Je={\"/App.jsx\":I},N={...Je};var B=`import {\n  Table,\n  TableHeader,\n  TableColumn,\n  TableBody,\n  TableRow,\n  TableCell,\n  RadioGroup,\n  Radio,\n} from \"@heroui/react\";\n\nexport default function App() {\n  const [selectedColor, setSelectedColor] = React.useState(\"default\");\n\n  const colors = [\"default\", \"primary\", \"secondary\", \"success\", \"warning\", \"danger\"];\n\n  return (\n    <div className=\"flex flex-col gap-3\">\n      <Table\n        aria-label=\"Example static collection table\"\n        color={selectedColor}\n        defaultSelectedKeys={[\"2\", \"3\"]}\n        selectionMode=\"multiple\"\n      >\n        <TableHeader>\n          <TableColumn>NAME</TableColumn>\n          <TableColumn>ROLE</TableColumn>\n          <TableColumn>STATUS</TableColumn>\n        </TableHeader>\n        <TableBody>\n          <TableRow key=\"1\">\n            <TableCell>Tony Reichert</TableCell>\n            <TableCell>CEO</TableCell>\n            <TableCell>Active</TableCell>\n          </TableRow>\n          <TableRow key=\"2\">\n            <TableCell>Zoey Lang</TableCell>\n            <TableCell>Technical Lead</TableCell>\n            <TableCell>Paused</TableCell>\n          </TableRow>\n          <TableRow key=\"3\">\n            <TableCell>Jane Fisher</TableCell>\n            <TableCell>Senior Developer</TableCell>\n            <TableCell>Active</TableCell>\n          </TableRow>\n          <TableRow key=\"4\">\n            <TableCell>William Howard</TableCell>\n            <TableCell>Community Manager</TableCell>\n            <TableCell>Vacation</TableCell>\n          </TableRow>\n        </TableBody>\n      </Table>\n      <RadioGroup\n        label=\"Selection color\"\n        orientation=\"horizontal\"\n        value={selectedColor}\n        onValueChange={setSelectedColor}\n      >\n        {colors.map((color) => (\n          <Radio key={color} className=\"capitalize\" color={color} value={color}>\n            {color}\n          </Radio>\n        ))}\n      </RadioGroup>\n    </div>\n  );\n}\n`;var $e={\"/App.jsx\":B},H={...$e};var K=`import {\n  Table,\n  TableHeader,\n  TableColumn,\n  TableBody,\n  TableRow,\n  TableCell,\n  RadioGroup,\n  Radio,\n} from \"@heroui/react\";\n\nexport default function App() {\n  const [selectedColor, setSelectedColor] = React.useState(\"default\");\n\n  const colors = [\"default\", \"primary\", \"secondary\", \"success\", \"warning\", \"danger\"];\n\n  return (\n    <div className=\"flex flex-col gap-3\">\n      <Table\n        disallowEmptySelection\n        aria-label=\"Example static collection table\"\n        color={selectedColor}\n        defaultSelectedKeys={[\"2\", \"3\"]}\n        selectionMode=\"multiple\"\n      >\n        <TableHeader>\n          <TableColumn>NAME</TableColumn>\n          <TableColumn>ROLE</TableColumn>\n          <TableColumn>STATUS</TableColumn>\n        </TableHeader>\n        <TableBody>\n          <TableRow key=\"1\">\n            <TableCell>Tony Reichert</TableCell>\n            <TableCell>CEO</TableCell>\n            <TableCell>Active</TableCell>\n          </TableRow>\n          <TableRow key=\"2\">\n            <TableCell>Zoey Lang</TableCell>\n            <TableCell>Technical Lead</TableCell>\n            <TableCell>Paused</TableCell>\n          </TableRow>\n          <TableRow key=\"3\">\n            <TableCell>Jane Fisher</TableCell>\n            <TableCell>Senior Developer</TableCell>\n            <TableCell>Active</TableCell>\n          </TableRow>\n          <TableRow key=\"4\">\n            <TableCell>William Howard</TableCell>\n            <TableCell>Community Manager</TableCell>\n            <TableCell>Vacation</TableCell>\n          </TableRow>\n        </TableBody>\n      </Table>\n      <RadioGroup\n        label=\"Selection color\"\n        orientation=\"horizontal\"\n        value={selectedColor}\n        onValueChange={setSelectedColor}\n      >\n        {colors.map((color) => (\n          <Radio key={color} className=\"capitalize\" color={color} value={color}>\n            {color}\n          </Radio>\n        ))}\n      </RadioGroup>\n    </div>\n  );\n}\n`;var Ye={\"/App.jsx\":K},V={...Ye};var E=`import {\n  Table,\n  TableHeader,\n  TableColumn,\n  TableBody,\n  TableRow,\n  TableCell,\n  getKeyValue,\n} from \"@heroui/react\";\n\nconst rows = [\n  {\n    key: \"1\",\n    name: \"Tony Reichert\",\n    role: \"CEO\",\n    status: \"Active\",\n  },\n  {\n    key: \"2\",\n    name: \"Zoey Lang\",\n    role: \"Technical Lead\",\n    status: \"Paused\",\n  },\n  {\n    key: \"3\",\n    name: \"Jane Fisher\",\n    role: \"Senior Developer\",\n    status: \"Active\",\n  },\n  {\n    key: \"4\",\n    name: \"William Howard\",\n    role: \"Community Manager\",\n    status: \"Vacation\",\n  },\n];\n\nconst columns = [\n  {\n    key: \"name\",\n    label: \"NAME\",\n  },\n  {\n    key: \"role\",\n    label: \"ROLE\",\n  },\n  {\n    key: \"status\",\n    label: \"STATUS\",\n  },\n];\n\nexport default function App() {\n  const [selectedKeys, setSelectedKeys] = React.useState(new Set([\"2\"]));\n\n  return (\n    <Table\n      aria-label=\"Controlled table example with dynamic content\"\n      selectedKeys={selectedKeys}\n      selectionMode=\"multiple\"\n      onSelectionChange={setSelectedKeys}\n    >\n      <TableHeader columns={columns}>\n        {(column) => <TableColumn key={column.key}>{column.label}</TableColumn>}\n      </TableHeader>\n      <TableBody items={rows}>\n        {(item) => (\n          <TableRow key={item.key}>\n            {(columnKey) => <TableCell>{getKeyValue(item, columnKey)}</TableCell>}\n          </TableRow>\n        )}\n      </TableBody>\n    </Table>\n  );\n}\n`;var z=`import type {Selection} from \"@heroui/react\";\n\nimport React from \"react\";\nimport {\n  Table,\n  TableHeader,\n  TableColumn,\n  TableBody,\n  TableRow,\n  TableCell,\n  getKeyValue,\n} from \"@heroui/react\";\n\nconst rows = [\n  {\n    key: \"1\",\n    name: \"Tony Reichert\",\n    role: \"CEO\",\n    status: \"Active\",\n  },\n  {\n    key: \"2\",\n    name: \"Zoey Lang\",\n    role: \"Technical Lead\",\n    status: \"Paused\",\n  },\n  {\n    key: \"3\",\n    name: \"Jane Fisher\",\n    role: \"Senior Developer\",\n    status: \"Active\",\n  },\n  {\n    key: \"4\",\n    name: \"William Howard\",\n    role: \"Community Manager\",\n    status: \"Vacation\",\n  },\n];\n\nconst columns = [\n  {\n    key: \"name\",\n    label: \"NAME\",\n  },\n  {\n    key: \"role\",\n    label: \"ROLE\",\n  },\n  {\n    key: \"status\",\n    label: \"STATUS\",\n  },\n];\n\nexport default function App() {\n  const [selectedKeys, setSelectedKeys] = React.useState<Selection>(new Set([\"2\"]));\n\n  return (\n    <Table\n      aria-label=\"Controlled table example with dynamic content\"\n      selectedKeys={selectedKeys}\n      selectionMode=\"multiple\"\n      onSelectionChange={setSelectedKeys}\n    >\n      <TableHeader columns={columns}>\n        {(column) => <TableColumn key={column.key}>{column.label}</TableColumn>}\n      </TableHeader>\n      <TableBody items={rows}>\n        {(item) => (\n          <TableRow key={item.key}>\n            {(columnKey) => <TableCell>{getKeyValue(item, columnKey)}</TableCell>}\n          </TableRow>\n        )}\n      </TableBody>\n    </Table>\n  );\n}\n`;var ea={\"/App.jsx\":E,\"/App.tsx\":z},W={...ea};var j=`import {\n  Table,\n  TableHeader,\n  TableColumn,\n  TableBody,\n  TableRow,\n  TableCell,\n  getKeyValue,\n} from \"@heroui/react\";\n\nconst rows = [\n  {\n    key: \"1\",\n    name: \"Tony Reichert\",\n    role: \"CEO\",\n    status: \"Active\",\n  },\n  {\n    key: \"2\",\n    name: \"Zoey Lang\",\n    role: \"Technical Lead\",\n    status: \"Paused\",\n  },\n  {\n    key: \"3\",\n    name: \"Jane Fisher\",\n    role: \"Senior Developer\",\n    status: \"Active\",\n  },\n  {\n    key: \"4\",\n    name: \"William Howard\",\n    role: \"Community Manager\",\n    status: \"Vacation\",\n  },\n];\n\nconst columns = [\n  {\n    key: \"name\",\n    label: \"NAME\",\n  },\n  {\n    key: \"role\",\n    label: \"ROLE\",\n  },\n  {\n    key: \"status\",\n    label: \"STATUS\",\n  },\n];\n\nexport default function App() {\n  const [selectedKeys, setSelectedKeys] = React.useState(new Set([\"2\"]));\n\n  return (\n    <Table\n      aria-label=\"Controlled table example with dynamic content\"\n      disabledKeys={[\"3\", \"4\"]}\n      selectedKeys={selectedKeys}\n      selectionMode=\"multiple\"\n      onSelectionChange={setSelectedKeys}\n    >\n      <TableHeader columns={columns}>\n        {(column) => <TableColumn key={column.key}>{column.label}</TableColumn>}\n      </TableHeader>\n      <TableBody items={rows}>\n        {(item) => (\n          <TableRow key={item.key}>\n            {(columnKey) => <TableCell>{getKeyValue(item, columnKey)}</TableCell>}\n          </TableRow>\n        )}\n      </TableBody>\n    </Table>\n  );\n}\n`;var F=`import type {Selection} from \"@heroui/react\";\n\nimport React from \"react\";\nimport {\n  Table,\n  TableHeader,\n  TableColumn,\n  TableBody,\n  TableRow,\n  TableCell,\n  getKeyValue,\n} from \"@heroui/react\";\n\nconst rows = [\n  {\n    key: \"1\",\n    name: \"Tony Reichert\",\n    role: \"CEO\",\n    status: \"Active\",\n  },\n  {\n    key: \"2\",\n    name: \"Zoey Lang\",\n    role: \"Technical Lead\",\n    status: \"Paused\",\n  },\n  {\n    key: \"3\",\n    name: \"Jane Fisher\",\n    role: \"Senior Developer\",\n    status: \"Active\",\n  },\n  {\n    key: \"4\",\n    name: \"William Howard\",\n    role: \"Community Manager\",\n    status: \"Vacation\",\n  },\n];\n\nconst columns = [\n  {\n    key: \"name\",\n    label: \"NAME\",\n  },\n  {\n    key: \"role\",\n    label: \"ROLE\",\n  },\n  {\n    key: \"status\",\n    label: \"STATUS\",\n  },\n];\n\nexport default function App() {\n  const [selectedKeys, setSelectedKeys] = React.useState<Selection>(new Set([\"2\"]));\n\n  return (\n    <Table\n      aria-label=\"Controlled table example with dynamic content\"\n      disabledKeys={[\"3\", \"4\"]}\n      selectedKeys={selectedKeys}\n      selectionMode=\"multiple\"\n      onSelectionChange={setSelectedKeys}\n    >\n      <TableHeader columns={columns}>\n        {(column) => <TableColumn key={column.key}>{column.label}</TableColumn>}\n      </TableHeader>\n      <TableBody items={rows}>\n        {(item) => (\n          <TableRow key={item.key}>\n            {(columnKey) => <TableCell>{getKeyValue(item, columnKey)}</TableCell>}\n          </TableRow>\n        )}\n      </TableBody>\n    </Table>\n  );\n}\n`;var la={\"/App.jsx\":j,\"/App.tsx\":F},O={...la};var U=`import {\n  Table,\n  TableHeader,\n  TableColumn,\n  TableBody,\n  TableRow,\n  TableCell,\n  getKeyValue,\n  Radio,\n  RadioGroup,\n} from \"@heroui/react\";\n\nconst rows = [\n  {\n    key: \"1\",\n    name: \"Tony Reichert\",\n    role: \"CEO\",\n    status: \"Active\",\n  },\n  {\n    key: \"2\",\n    name: \"Zoey Lang\",\n    role: \"Technical Lead\",\n    status: \"Paused\",\n  },\n  {\n    key: \"3\",\n    name: \"Jane Fisher\",\n    role: \"Senior Developer\",\n    status: \"Active\",\n  },\n  {\n    key: \"4\",\n    name: \"William Howard\",\n    role: \"Community Manager\",\n    status: \"Vacation\",\n  },\n];\n\nconst columns = [\n  {\n    key: \"name\",\n    label: \"NAME\",\n  },\n  {\n    key: \"role\",\n    label: \"ROLE\",\n  },\n  {\n    key: \"status\",\n    label: \"STATUS\",\n  },\n];\n\nexport default function App() {\n  const [selectionBehavior, setSelectionBehavior] = React.useState(\"toggle\");\n\n  return (\n    <div className=\"flex flex-col gap-3\">\n      <Table\n        aria-label=\"Selection behavior table example with dynamic content\"\n        selectionBehavior={selectionBehavior}\n        selectionMode=\"multiple\"\n      >\n        <TableHeader columns={columns}>\n          {(column) => <TableColumn key={column.key}>{column.label}</TableColumn>}\n        </TableHeader>\n        <TableBody items={rows}>\n          {(item) => (\n            <TableRow key={item.key}>\n              {(columnKey) => <TableCell>{getKeyValue(item, columnKey)}</TableCell>}\n            </TableRow>\n          )}\n        </TableBody>\n      </Table>\n      <RadioGroup\n        label=\"Selection Behavior\"\n        orientation=\"horizontal\"\n        value={selectionBehavior}\n        onValueChange={setSelectionBehavior}\n      >\n        <Radio value=\"toggle\">Toggle</Radio>\n        <Radio value=\"replace\">Replace</Radio>\n      </RadioGroup>\n    </div>\n  );\n}\n`;var ra={\"/App.jsx\":U},G={...ra};var _=`import {\n  Table,\n  TableHeader,\n  TableColumn,\n  TableBody,\n  TableRow,\n  TableCell,\n  getKeyValue,\n  Radio,\n  RadioGroup,\n} from \"@heroui/react\";\n\nconst rows = [\n  {\n    key: \"1\",\n    name: \"Tony Reichert\",\n    role: \"CEO\",\n    status: \"Active\",\n  },\n  {\n    key: \"2\",\n    name: \"Zoey Lang\",\n    role: \"Technical Lead\",\n    status: \"Paused\",\n  },\n  {\n    key: \"3\",\n    name: \"Jane Fisher\",\n    role: \"Senior Developer\",\n    status: \"Active\",\n  },\n  {\n    key: \"4\",\n    name: \"William Howard\",\n    role: \"Community Manager\",\n    status: \"Vacation\",\n  },\n];\n\nconst columns = [\n  {\n    key: \"name\",\n    label: \"NAME\",\n  },\n  {\n    key: \"role\",\n    label: \"ROLE\",\n  },\n  {\n    key: \"status\",\n    label: \"STATUS\",\n  },\n];\n\nexport default function App() {\n  const [selectionBehavior, setSelectionBehavior] = React.useState(\"toggle\");\n\n  return (\n    <div className=\"flex flex-col gap-3\">\n      <Table\n        aria-label=\"Rows actions table example with dynamic content\"\n        selectionBehavior={selectionBehavior}\n        selectionMode=\"multiple\"\n        onRowAction={(key) => alert(\\`Opening item \\${key}...\\`)}\n      >\n        <TableHeader columns={columns}>\n          {(column) => <TableColumn key={column.key}>{column.label}</TableColumn>}\n        </TableHeader>\n        <TableBody items={rows}>\n          {(item) => (\n            <TableRow key={item.key}>\n              {(columnKey) => <TableCell>{getKeyValue(item, columnKey)}</TableCell>}\n            </TableRow>\n          )}\n        </TableBody>\n      </Table>\n      <RadioGroup\n        label=\"Selection Behavior\"\n        orientation=\"horizontal\"\n        value={selectionBehavior}\n        onValueChange={setSelectionBehavior}\n      >\n        <Radio value=\"toggle\">Toggle</Radio>\n        <Radio value=\"replace\">Replace</Radio>\n      </RadioGroup>\n    </div>\n  );\n}\n`;var sa={\"/App.jsx\":_},J={...sa};var Z=`import {\n  Table,\n  TableHeader,\n  TableColumn,\n  TableBody,\n  TableRow,\n  TableCell,\n  getKeyValue,\n  Spinner,\n} from \"@heroui/react\";\nimport {useAsyncList} from \"@react-stately/data\";\n\nexport default function App() {\n  const [isLoading, setIsLoading] = React.useState(true);\n\n  let list = useAsyncList({\n    async load({signal}) {\n      let res = await fetch(\"https://swapi.py4e.com/api/people/?search\", {\n        signal,\n      });\n      let json = await res.json();\n\n      setIsLoading(false);\n\n      return {\n        items: json.results,\n      };\n    },\n    async sort({items, sortDescriptor}) {\n      return {\n        items: items.sort((a, b) => {\n          let first = a[sortDescriptor.column];\n          let second = b[sortDescriptor.column];\n          let cmp = (parseInt(first) || first) < (parseInt(second) || second) ? -1 : 1;\n\n          if (sortDescriptor.direction === \"descending\") {\n            cmp *= -1;\n          }\n\n          return cmp;\n        }),\n      };\n    },\n  });\n\n  return (\n    <Table\n      aria-label=\"Example table with client side sorting\"\n      classNames={{\n        table: \"min-h-[400px]\",\n      }}\n      sortDescriptor={list.sortDescriptor}\n      onSortChange={list.sort}\n    >\n      <TableHeader>\n        <TableColumn key=\"name\" allowsSorting>\n          Name\n        </TableColumn>\n        <TableColumn key=\"height\" allowsSorting>\n          Height\n        </TableColumn>\n        <TableColumn key=\"mass\" allowsSorting>\n          Mass\n        </TableColumn>\n        <TableColumn key=\"birth_year\" allowsSorting>\n          Birth year\n        </TableColumn>\n      </TableHeader>\n      <TableBody\n        isLoading={isLoading}\n        items={list.items}\n        loadingContent={<Spinner label=\"Loading...\" />}\n      >\n        {(item) => (\n          <TableRow key={item.name}>\n            {(columnKey) => <TableCell>{getKeyValue(item, columnKey)}</TableCell>}\n          </TableRow>\n        )}\n      </TableBody>\n    </Table>\n  );\n}\n`;var ca={\"/App.jsx\":Z},$={...ca};var q=`import {\n  Table,\n  TableHeader,\n  TableColumn,\n  TableBody,\n  TableRow,\n  TableCell,\n  getKeyValue,\n  Spinner,\n  Button,\n} from \"@heroui/react\";\nimport {useAsyncList} from \"@react-stately/data\";\n\nexport default function App() {\n  const [page, setPage] = React.useState(1);\n  const [isLoading, setIsLoading] = React.useState(true);\n\n  let list = useAsyncList({\n    async load({signal, cursor}) {\n      if (cursor) {\n        setPage((prev) => prev + 1);\n      }\n\n      // If no cursor is available, then we're loading the first page.\n      // Otherwise, the cursor is the next URL to load, as returned from the previous page.\n      const res = await fetch(cursor || \"https://swapi.py4e.com/api/people/?search=\", {signal});\n      let json = await res.json();\n\n      if (!cursor) {\n        setIsLoading(false);\n      }\n\n      return {\n        items: json.results,\n        cursor: json.next,\n      };\n    },\n  });\n\n  const hasMore = page < 9;\n\n  return (\n    <Table\n      isHeaderSticky\n      aria-label=\"Example table with client side sorting\"\n      bottomContent={\n        hasMore && !isLoading ? (\n          <div className=\"flex w-full justify-center\">\n            <Button isDisabled={list.isLoading} variant=\"flat\" onPress={list.loadMore}>\n              {list.isLoading && <Spinner color=\"white\" size=\"sm\" />}\n              Load More\n            </Button>\n          </div>\n        ) : null\n      }\n      classNames={{\n        base: \"max-h-[520px] overflow-scroll\",\n        table: \"min-h-[420px]\",\n      }}\n    >\n      <TableHeader>\n        <TableColumn key=\"name\">Name</TableColumn>\n        <TableColumn key=\"height\">Height</TableColumn>\n        <TableColumn key=\"mass\">Mass</TableColumn>\n        <TableColumn key=\"birth_year\">Birth year</TableColumn>\n      </TableHeader>\n      <TableBody\n        isLoading={isLoading}\n        items={list.items}\n        loadingContent={<Spinner label=\"Loading...\" />}\n      >\n        {(item) => (\n          <TableRow key={item.name}>\n            {(columnKey) => <TableCell>{getKeyValue(item, columnKey)}</TableCell>}\n          </TableRow>\n        )}\n      </TableBody>\n    </Table>\n  );\n}\n`;var ua={\"/App.jsx\":q},Y={...ua};var Q=`import {\n  Table,\n  TableHeader,\n  TableColumn,\n  TableBody,\n  TableRow,\n  TableCell,\n  Pagination,\n  getKeyValue,\n} from \"@heroui/react\";\n\nexport const users = [\n  {\n    key: \"1\",\n    name: \"Tony Reichert\",\n    role: \"CEO\",\n    status: \"Active\",\n  },\n  {\n    key: \"2\",\n    name: \"Zoey Lang\",\n    role: \"Technical Lead\",\n    status: \"Paused\",\n  },\n  {\n    key: \"3\",\n    name: \"Jane Fisher\",\n    role: \"Senior Developer\",\n    status: \"Active\",\n  },\n  {\n    key: \"4\",\n    name: \"William Howard\",\n    role: \"Community Manager\",\n    status: \"Vacation\",\n  },\n  {\n    key: \"5\",\n    name: \"Emily Collins\",\n    role: \"Marketing Manager\",\n    status: \"Active\",\n  },\n  {\n    key: \"6\",\n    name: \"Brian Kim\",\n    role: \"Product Manager\",\n    status: \"Active\",\n  },\n  {\n    key: \"7\",\n    name: \"Laura Thompson\",\n    role: \"UX Designer\",\n    status: \"Active\",\n  },\n  {\n    key: \"8\",\n    name: \"Michael Stevens\",\n    role: \"Data Analyst\",\n    status: \"Paused\",\n  },\n  {\n    key: \"9\",\n    name: \"Sophia Nguyen\",\n    role: \"Quality Assurance\",\n    status: \"Active\",\n  },\n  {\n    key: \"10\",\n    name: \"James Wilson\",\n    role: \"Front-end Developer\",\n    status: \"Vacation\",\n  },\n  {\n    key: \"11\",\n    name: \"Ava Johnson\",\n    role: \"Back-end Developer\",\n    status: \"Active\",\n  },\n  {\n    key: \"12\",\n    name: \"Isabella Smith\",\n    role: \"Graphic Designer\",\n    status: \"Active\",\n  },\n  {\n    key: \"13\",\n    name: \"Oliver Brown\",\n    role: \"Content Writer\",\n    status: \"Paused\",\n  },\n  {\n    key: \"14\",\n    name: \"Lucas Jones\",\n    role: \"Project Manager\",\n    status: \"Active\",\n  },\n  {\n    key: \"15\",\n    name: \"Grace Davis\",\n    role: \"HR Manager\",\n    status: \"Active\",\n  },\n  {\n    key: \"16\",\n    name: \"Elijah Garcia\",\n    role: \"Network Administrator\",\n    status: \"Active\",\n  },\n  {\n    key: \"17\",\n    name: \"Emma Martinez\",\n    role: \"Accountant\",\n    status: \"Vacation\",\n  },\n  {\n    key: \"18\",\n    name: \"Benjamin Lee\",\n    role: \"Operations Manager\",\n    status: \"Active\",\n  },\n  {\n    key: \"19\",\n    name: \"Mia Hernandez\",\n    role: \"Sales Manager\",\n    status: \"Paused\",\n  },\n  {\n    key: \"20\",\n    name: \"Daniel Lewis\",\n    role: \"DevOps Engineer\",\n    status: \"Active\",\n  },\n  {\n    key: \"21\",\n    name: \"Amelia Clark\",\n    role: \"Social Media Specialist\",\n    status: \"Active\",\n  },\n  {\n    key: \"22\",\n    name: \"Jackson Walker\",\n    role: \"Customer Support\",\n    status: \"Active\",\n  },\n  {\n    key: \"23\",\n    name: \"Henry Hall\",\n    role: \"Security Analyst\",\n    status: \"Active\",\n  },\n  {\n    key: \"24\",\n    name: \"Charlotte Young\",\n    role: \"PR Specialist\",\n    status: \"Paused\",\n  },\n  {\n    key: \"25\",\n    name: \"Liam King\",\n    role: \"Mobile App Developer\",\n    status: \"Active\",\n  },\n];\n\nexport default function App() {\n  const [page, setPage] = React.useState(1);\n  const rowsPerPage = 4;\n\n  const pages = Math.ceil(users.length / rowsPerPage);\n\n  const items = React.useMemo(() => {\n    const start = (page - 1) * rowsPerPage;\n    const end = start + rowsPerPage;\n\n    return users.slice(start, end);\n  }, [page, users]);\n\n  return (\n    <Table\n      aria-label=\"Example table with client side pagination\"\n      bottomContent={\n        <div className=\"flex w-full justify-center\">\n          <Pagination\n            isCompact\n            showControls\n            showShadow\n            color=\"secondary\"\n            page={page}\n            total={pages}\n            onChange={(page) => setPage(page)}\n          />\n        </div>\n      }\n      classNames={{\n        wrapper: \"min-h-[222px]\",\n      }}\n    >\n      <TableHeader>\n        <TableColumn key=\"name\">NAME</TableColumn>\n        <TableColumn key=\"role\">ROLE</TableColumn>\n        <TableColumn key=\"status\">STATUS</TableColumn>\n      </TableHeader>\n      <TableBody items={items}>\n        {(item) => (\n          <TableRow key={item.name}>\n            {(columnKey) => <TableCell>{getKeyValue(item, columnKey)}</TableCell>}\n          </TableRow>\n        )}\n      </TableBody>\n    </Table>\n  );\n}\n`;var pa={\"/App.jsx\":Q},X={...pa};var ee=`import {\n  Table,\n  TableHeader,\n  TableColumn,\n  TableBody,\n  TableRow,\n  TableCell,\n  Pagination,\n  Spinner,\n  getKeyValue,\n} from \"@heroui/react\";\nimport useSWR from \"swr\";\n\nconst fetcher = (...args) => fetch(...args).then((res) => res.json());\n\nexport default function App() {\n  const [page, setPage] = React.useState(1);\n\n  const {data, isLoading} = useSWR(\\`https://swapi.py4e.com/api/people?page=\\${page}\\`, fetcher, {\n    keepPreviousData: true,\n  });\n\n  const rowsPerPage = 10;\n\n  const pages = React.useMemo(() => {\n    return data?.count ? Math.ceil(data.count / rowsPerPage) : 0;\n  }, [data?.count, rowsPerPage]);\n\n  const loadingState = isLoading || data?.results.length === 0 ? \"loading\" : \"idle\";\n\n  return (\n    <Table\n      aria-label=\"Example table with client async pagination\"\n      bottomContent={\n        pages > 0 ? (\n          <div className=\"flex w-full justify-center\">\n            <Pagination\n              isCompact\n              showControls\n              showShadow\n              color=\"primary\"\n              page={page}\n              total={pages}\n              onChange={(page) => setPage(page)}\n            />\n          </div>\n        ) : null\n      }\n    >\n      <TableHeader>\n        <TableColumn key=\"name\">Name</TableColumn>\n        <TableColumn key=\"height\">Height</TableColumn>\n        <TableColumn key=\"mass\">Mass</TableColumn>\n        <TableColumn key=\"birth_year\">Birth year</TableColumn>\n      </TableHeader>\n      <TableBody\n        items={data?.results ?? []}\n        loadingContent={<Spinner />}\n        loadingState={loadingState}\n      >\n        {(item) => (\n          <TableRow key={item?.name}>\n            {(columnKey) => <TableCell>{getKeyValue(item, columnKey)}</TableCell>}\n          </TableRow>\n        )}\n      </TableBody>\n    </Table>\n  );\n}\n`;var ba={\"/App.jsx\":ee},ae={...ba};var te=`import {\n  Table,\n  TableHeader,\n  TableColumn,\n  TableBody,\n  TableRow,\n  TableCell,\n  Spinner,\n  getKeyValue,\n} from \"@heroui/react\";\nimport {useInfiniteScroll} from \"@heroui/use-infinite-scroll\";\nimport {useAsyncList} from \"@react-stately/data\";\n\nexport default function App() {\n  const [isLoading, setIsLoading] = React.useState(true);\n  const [hasMore, setHasMore] = React.useState(false);\n\n  let list = useAsyncList({\n    async load({signal, cursor}) {\n      if (cursor) {\n        setIsLoading(false);\n      }\n\n      // If no cursor is available, then we're loading the first page.\n      // Otherwise, the cursor is the next URL to load, as returned from the previous page.\n      const res = await fetch(cursor || \"https://swapi.py4e.com/api/people/?search=\", {signal});\n      let json = await res.json();\n\n      setHasMore(json.next !== null);\n\n      return {\n        items: json.results,\n        cursor: json.next,\n      };\n    },\n  });\n\n  const [loaderRef, scrollerRef] = useInfiniteScroll({hasMore, onLoadMore: list.loadMore});\n\n  return (\n    <Table\n      isHeaderSticky\n      aria-label=\"Example table with infinite pagination\"\n      baseRef={scrollerRef}\n      bottomContent={\n        hasMore ? (\n          <div className=\"flex w-full justify-center\">\n            <Spinner ref={loaderRef} color=\"white\" />\n          </div>\n        ) : null\n      }\n      classNames={{\n        base: \"max-h-[520px] overflow-scroll\",\n        table: \"min-h-[400px]\",\n      }}\n    >\n      <TableHeader>\n        <TableColumn key=\"name\">Name</TableColumn>\n        <TableColumn key=\"height\">Height</TableColumn>\n        <TableColumn key=\"mass\">Mass</TableColumn>\n        <TableColumn key=\"birth_year\">Birth year</TableColumn>\n      </TableHeader>\n      <TableBody\n        isLoading={isLoading}\n        items={list.items}\n        loadingContent={<Spinner color=\"white\" />}\n      >\n        {(item) => (\n          <TableRow key={item.name}>\n            {(columnKey) => <TableCell>{getKeyValue(item, columnKey)}</TableCell>}\n          </TableRow>\n        )}\n      </TableBody>\n    </Table>\n  );\n}\n`;var le=`import React from \"react\";\nimport {\n  Table,\n  TableHeader,\n  TableColumn,\n  TableBody,\n  TableRow,\n  TableCell,\n  Spinner,\n  getKeyValue,\n} from \"@heroui/react\";\nimport {useInfiniteScroll} from \"@heroui/use-infinite-scroll\";\nimport {useAsyncList} from \"@react-stately/data\";\n\ninterface SWCharacter {\n  name: string;\n  height: string;\n  mass: string;\n  birth_year: string;\n}\n\nexport default function App() {\n  const [isLoading, setIsLoading] = React.useState<boolean>(true);\n  const [hasMore, setHasMore] = React.useState<boolean>(false);\n\n  let list = useAsyncList<SWCharacter>({\n    async load({signal, cursor}) {\n      if (cursor) {\n        setIsLoading(false);\n      }\n\n      // If no cursor is available, then we're loading the first page.\n      // Otherwise, the cursor is the next URL to load, as returned from the previous page.\n      const res = await fetch(cursor || \"https://swapi.py4e.com/api/people/?search=\", {signal});\n      let json = await res.json();\n\n      setHasMore(json.next !== null);\n\n      return {\n        items: json.results,\n        cursor: json.next,\n      };\n    },\n  });\n\n  const [loaderRef, scrollerRef] = useInfiniteScroll({\n    hasMore,\n    onLoadMore: list.loadMore,\n  });\n\n  return (\n    <Table\n      isHeaderSticky\n      aria-label=\"Example table with infinite pagination\"\n      baseRef={scrollerRef}\n      bottomContent={\n        hasMore ? (\n          <div className=\"flex w-full justify-center\">\n            <Spinner ref={loaderRef} color=\"white\" />\n          </div>\n        ) : null\n      }\n      classNames={{\n        base: \"max-h-[520px] overflow-scroll\",\n        table: \"min-h-[400px]\",\n      }}\n    >\n      <TableHeader>\n        <TableColumn key=\"name\">Name</TableColumn>\n        <TableColumn key=\"height\">Height</TableColumn>\n        <TableColumn key=\"mass\">Mass</TableColumn>\n        <TableColumn key=\"birth_year\">Birth year</TableColumn>\n      </TableHeader>\n      <TableBody\n        isLoading={isLoading}\n        items={list.items}\n        loadingContent={<Spinner color=\"white\" />}\n      >\n        {(item: SWCharacter) => (\n          <TableRow key={item.name}>\n            {(columnKey) => <TableCell>{getKeyValue(item, columnKey)}</TableCell>}\n          </TableRow>\n        )}\n      </TableBody>\n    </Table>\n  );\n}\n`;var fa={\"/App.jsx\":te},ya={\"/App.tsx\":le},oe={...fa,...ya};var re=`import {\n  Table,\n  TableHeader,\n  TableColumn,\n  TableBody,\n  TableRow,\n  TableCell,\n  Input,\n  Button,\n  DropdownTrigger,\n  Dropdown,\n  DropdownMenu,\n  DropdownItem,\n  Chip,\n  User,\n  Pagination,\n} from \"@heroui/react\";\n\nexport const columns = [\n  {name: \"ID\", uid: \"id\", sortable: true},\n  {name: \"NAME\", uid: \"name\", sortable: true},\n  {name: \"AGE\", uid: \"age\", sortable: true},\n  {name: \"ROLE\", uid: \"role\", sortable: true},\n  {name: \"TEAM\", uid: \"team\"},\n  {name: \"EMAIL\", uid: \"email\"},\n  {name: \"STATUS\", uid: \"status\", sortable: true},\n  {name: \"ACTIONS\", uid: \"actions\"},\n];\n\nexport const statusOptions = [\n  {name: \"Active\", uid: \"active\"},\n  {name: \"Paused\", uid: \"paused\"},\n  {name: \"Vacation\", uid: \"vacation\"},\n];\n\nexport const users = [\n  {\n    id: 1,\n    name: \"Tony Reichert\",\n    role: \"CEO\",\n    team: \"Management\",\n    status: \"active\",\n    age: \"29\",\n    avatar: \"https://i.pravatar.cc/150?u=a042581f4e29026024d\",\n    email: \"tony.reichert@example.com\",\n  },\n  {\n    id: 2,\n    name: \"Zoey Lang\",\n    role: \"Tech Lead\",\n    team: \"Development\",\n    status: \"paused\",\n    age: \"25\",\n    avatar: \"https://i.pravatar.cc/150?u=a042581f4e29026704d\",\n    email: \"zoey.lang@example.com\",\n  },\n  {\n    id: 3,\n    name: \"Jane Fisher\",\n    role: \"Sr. Dev\",\n    team: \"Development\",\n    status: \"active\",\n    age: \"22\",\n    avatar: \"https://i.pravatar.cc/150?u=a04258114e29026702d\",\n    email: \"jane.fisher@example.com\",\n  },\n  {\n    id: 4,\n    name: \"William Howard\",\n    role: \"C.M.\",\n    team: \"Marketing\",\n    status: \"vacation\",\n    age: \"28\",\n    avatar: \"https://i.pravatar.cc/150?u=a048581f4e29026701d\",\n    email: \"william.howard@example.com\",\n  },\n  {\n    id: 5,\n    name: \"Kristen Copper\",\n    role: \"S. Manager\",\n    team: \"Sales\",\n    status: \"active\",\n    age: \"24\",\n    avatar: \"https://i.pravatar.cc/150?u=a092581d4ef9026700d\",\n    email: \"kristen.cooper@example.com\",\n  },\n  {\n    id: 6,\n    name: \"Brian Kim\",\n    role: \"P. Manager\",\n    team: \"Management\",\n    age: \"29\",\n    avatar: \"https://i.pravatar.cc/150?u=a042581f4e29026024d\",\n    email: \"brian.kim@example.com\",\n    status: \"Active\",\n  },\n  {\n    id: 7,\n    name: \"Michael Hunt\",\n    role: \"Designer\",\n    team: \"Design\",\n    status: \"paused\",\n    age: \"27\",\n    avatar: \"https://i.pravatar.cc/150?u=a042581f4e29027007d\",\n    email: \"michael.hunt@example.com\",\n  },\n  {\n    id: 8,\n    name: \"Samantha Brooks\",\n    role: \"HR Manager\",\n    team: \"HR\",\n    status: \"active\",\n    age: \"31\",\n    avatar: \"https://i.pravatar.cc/150?u=a042581f4e27027008d\",\n    email: \"samantha.brooks@example.com\",\n  },\n  {\n    id: 9,\n    name: \"Frank Harrison\",\n    role: \"F. Manager\",\n    team: \"Finance\",\n    status: \"vacation\",\n    age: \"33\",\n    avatar: \"https://i.pravatar.cc/150?img=4\",\n    email: \"frank.harrison@example.com\",\n  },\n  {\n    id: 10,\n    name: \"Emma Adams\",\n    role: \"Ops Manager\",\n    team: \"Operations\",\n    status: \"active\",\n    age: \"35\",\n    avatar: \"https://i.pravatar.cc/150?img=5\",\n    email: \"emma.adams@example.com\",\n  },\n  {\n    id: 11,\n    name: \"Brandon Stevens\",\n    role: \"Jr. Dev\",\n    team: \"Development\",\n    status: \"active\",\n    age: \"22\",\n    avatar: \"https://i.pravatar.cc/150?img=8\",\n    email: \"brandon.stevens@example.com\",\n  },\n  {\n    id: 12,\n    name: \"Megan Richards\",\n    role: \"P. Manager\",\n    team: \"Product\",\n    status: \"paused\",\n    age: \"28\",\n    avatar: \"https://i.pravatar.cc/150?img=10\",\n    email: \"megan.richards@example.com\",\n  },\n  {\n    id: 13,\n    name: \"Oliver Scott\",\n    role: \"S. Manager\",\n    team: \"Security\",\n    status: \"active\",\n    age: \"37\",\n    avatar: \"https://i.pravatar.cc/150?img=12\",\n    email: \"oliver.scott@example.com\",\n  },\n  {\n    id: 14,\n    name: \"Grace Allen\",\n    role: \"M. Specialist\",\n    team: \"Marketing\",\n    status: \"active\",\n    age: \"30\",\n    avatar: \"https://i.pravatar.cc/150?img=16\",\n    email: \"grace.allen@example.com\",\n  },\n  {\n    id: 15,\n    name: \"Noah Carter\",\n    role: \"IT Specialist\",\n    team: \"I. Technology\",\n    status: \"paused\",\n    age: \"31\",\n    avatar: \"https://i.pravatar.cc/150?img=15\",\n    email: \"noah.carter@example.com\",\n  },\n  {\n    id: 16,\n    name: \"Ava Perez\",\n    role: \"Manager\",\n    team: \"Sales\",\n    status: \"active\",\n    age: \"29\",\n    avatar: \"https://i.pravatar.cc/150?img=20\",\n    email: \"ava.perez@example.com\",\n  },\n  {\n    id: 17,\n    name: \"Liam Johnson\",\n    role: \"Data Analyst\",\n    team: \"Analysis\",\n    status: \"active\",\n    age: \"28\",\n    avatar: \"https://i.pravatar.cc/150?img=33\",\n    email: \"liam.johnson@example.com\",\n  },\n  {\n    id: 18,\n    name: \"Sophia Taylor\",\n    role: \"QA Analyst\",\n    team: \"Testing\",\n    status: \"active\",\n    age: \"27\",\n    avatar: \"https://i.pravatar.cc/150?img=29\",\n    email: \"sophia.taylor@example.com\",\n  },\n  {\n    id: 19,\n    name: \"Lucas Harris\",\n    role: \"Administrator\",\n    team: \"Information Technology\",\n    status: \"paused\",\n    age: \"32\",\n    avatar: \"https://i.pravatar.cc/150?img=50\",\n    email: \"lucas.harris@example.com\",\n  },\n  {\n    id: 20,\n    name: \"Mia Robinson\",\n    role: \"Coordinator\",\n    team: \"Operations\",\n    status: \"active\",\n    age: \"26\",\n    avatar: \"https://i.pravatar.cc/150?img=45\",\n    email: \"mia.robinson@example.com\",\n  },\n];\n\nexport function capitalize(s) {\n  return s ? s.charAt(0).toUpperCase() + s.slice(1).toLowerCase() : \"\";\n}\n\nexport const PlusIcon = ({size = 24, width, height, ...props}) => {\n  return (\n    <svg\n      aria-hidden=\"true\"\n      fill=\"none\"\n      focusable=\"false\"\n      height={size || height}\n      role=\"presentation\"\n      viewBox=\"0 0 24 24\"\n      width={size || width}\n      {...props}\n    >\n      <g\n        fill=\"none\"\n        stroke=\"currentColor\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth={1.5}\n      >\n        <path d=\"M6 12h12\" />\n        <path d=\"M12 18V6\" />\n      </g>\n    </svg>\n  );\n};\n\nexport const VerticalDotsIcon = ({size = 24, width, height, ...props}) => {\n  return (\n    <svg\n      aria-hidden=\"true\"\n      fill=\"none\"\n      focusable=\"false\"\n      height={size || height}\n      role=\"presentation\"\n      viewBox=\"0 0 24 24\"\n      width={size || width}\n      {...props}\n    >\n      <path\n        d=\"M12 10c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0-6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 12c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z\"\n        fill=\"currentColor\"\n      />\n    </svg>\n  );\n};\n\nexport const SearchIcon = (props) => {\n  return (\n    <svg\n      aria-hidden=\"true\"\n      fill=\"none\"\n      focusable=\"false\"\n      height=\"1em\"\n      role=\"presentation\"\n      viewBox=\"0 0 24 24\"\n      width=\"1em\"\n      {...props}\n    >\n      <path\n        d=\"M11.5 21C16.7467 21 21 16.7467 21 11.5C21 6.25329 16.7467 2 11.5 2C6.25329 2 2 6.25329 2 11.5C2 16.7467 6.25329 21 11.5 21Z\"\n        stroke=\"currentColor\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth=\"2\"\n      />\n      <path\n        d=\"M22 22L20 20\"\n        stroke=\"currentColor\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth=\"2\"\n      />\n    </svg>\n  );\n};\n\nexport const ChevronDownIcon = ({strokeWidth = 1.5, ...otherProps}) => {\n  return (\n    <svg\n      aria-hidden=\"true\"\n      fill=\"none\"\n      focusable=\"false\"\n      height=\"1em\"\n      role=\"presentation\"\n      viewBox=\"0 0 24 24\"\n      width=\"1em\"\n      {...otherProps}\n    >\n      <path\n        d=\"m19.92 8.95-6.52 6.52c-.77.77-2.03.77-2.8 0L4.08 8.95\"\n        stroke=\"currentColor\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeMiterlimit={10}\n        strokeWidth={strokeWidth}\n      />\n    </svg>\n  );\n};\n\nconst statusColorMap = {\n  active: \"success\",\n  paused: \"danger\",\n  vacation: \"warning\",\n};\n\nconst INITIAL_VISIBLE_COLUMNS = [\"name\", \"role\", \"status\", \"actions\"];\n\nexport default function App() {\n  const [filterValue, setFilterValue] = React.useState(\"\");\n  const [selectedKeys, setSelectedKeys] = React.useState(new Set([]));\n  const [visibleColumns, setVisibleColumns] = React.useState(new Set(INITIAL_VISIBLE_COLUMNS));\n  const [statusFilter, setStatusFilter] = React.useState(\"all\");\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\n  const [sortDescriptor, setSortDescriptor] = React.useState({\n    column: \"age\",\n    direction: \"ascending\",\n  });\n  const [page, setPage] = React.useState(1);\n\n  const hasSearchFilter = Boolean(filterValue);\n\n  const headerColumns = React.useMemo(() => {\n    if (visibleColumns === \"all\") return columns;\n\n    return columns.filter((column) => Array.from(visibleColumns).includes(column.uid));\n  }, [visibleColumns]);\n\n  const filteredItems = React.useMemo(() => {\n    let filteredUsers = [...users];\n\n    if (hasSearchFilter) {\n      filteredUsers = filteredUsers.filter((user) =>\n        user.name.toLowerCase().includes(filterValue.toLowerCase()),\n      );\n    }\n    if (statusFilter !== \"all\" && Array.from(statusFilter).length !== statusOptions.length) {\n      filteredUsers = filteredUsers.filter((user) =>\n        Array.from(statusFilter).includes(user.status),\n      );\n    }\n\n    return filteredUsers;\n  }, [users, filterValue, statusFilter]);\n\n  const pages = Math.ceil(filteredItems.length / rowsPerPage) || 1;\n\n  const items = React.useMemo(() => {\n    const start = (page - 1) * rowsPerPage;\n    const end = start + rowsPerPage;\n\n    return filteredItems.slice(start, end);\n  }, [page, filteredItems, rowsPerPage]);\n\n  const sortedItems = React.useMemo(() => {\n    return [...items].sort((a, b) => {\n      const first = a[sortDescriptor.column];\n      const second = b[sortDescriptor.column];\n      const cmp = first < second ? -1 : first > second ? 1 : 0;\n\n      return sortDescriptor.direction === \"descending\" ? -cmp : cmp;\n    });\n  }, [sortDescriptor, items]);\n\n  const renderCell = React.useCallback((user, columnKey) => {\n    const cellValue = user[columnKey];\n\n    switch (columnKey) {\n      case \"name\":\n        return (\n          <User\n            avatarProps={{radius: \"lg\", src: user.avatar}}\n            description={user.email}\n            name={cellValue}\n          >\n            {user.email}\n          </User>\n        );\n      case \"role\":\n        return (\n          <div className=\"flex flex-col\">\n            <p className=\"text-bold text-small capitalize\">{cellValue}</p>\n            <p className=\"text-bold text-tiny capitalize text-default-400\">{user.team}</p>\n          </div>\n        );\n      case \"status\":\n        return (\n          <Chip className=\"capitalize\" color={statusColorMap[user.status]} size=\"sm\" variant=\"flat\">\n            {cellValue}\n          </Chip>\n        );\n      case \"actions\":\n        return (\n          <div className=\"relative flex justify-end items-center gap-2\">\n            <Dropdown>\n              <DropdownTrigger>\n                <Button isIconOnly size=\"sm\" variant=\"light\">\n                  <VerticalDotsIcon className=\"text-default-300\" />\n                </Button>\n              </DropdownTrigger>\n              <DropdownMenu>\n                <DropdownItem key=\"view\">View</DropdownItem>\n                <DropdownItem key=\"edit\">Edit</DropdownItem>\n                <DropdownItem key=\"delete\">Delete</DropdownItem>\n              </DropdownMenu>\n            </Dropdown>\n          </div>\n        );\n      default:\n        return cellValue;\n    }\n  }, []);\n\n  const onNextPage = React.useCallback(() => {\n    if (page < pages) {\n      setPage(page + 1);\n    }\n  }, [page, pages]);\n\n  const onPreviousPage = React.useCallback(() => {\n    if (page > 1) {\n      setPage(page - 1);\n    }\n  }, [page]);\n\n  const onRowsPerPageChange = React.useCallback((e) => {\n    setRowsPerPage(Number(e.target.value));\n    setPage(1);\n  }, []);\n\n  const onSearchChange = React.useCallback((value) => {\n    if (value) {\n      setFilterValue(value);\n      setPage(1);\n    } else {\n      setFilterValue(\"\");\n    }\n  }, []);\n\n  const onClear = React.useCallback(() => {\n    setFilterValue(\"\");\n    setPage(1);\n  }, []);\n\n  const topContent = React.useMemo(() => {\n    return (\n      <div className=\"flex flex-col gap-4\">\n        <div className=\"flex justify-between gap-3 items-end\">\n          <Input\n            isClearable\n            className=\"w-full sm:max-w-[44%]\"\n            placeholder=\"Search by name...\"\n            startContent={<SearchIcon />}\n            value={filterValue}\n            onClear={() => onClear()}\n            onValueChange={onSearchChange}\n          />\n          <div className=\"flex gap-3\">\n            <Dropdown>\n              <DropdownTrigger className=\"hidden sm:flex\">\n                <Button endContent={<ChevronDownIcon className=\"text-small\" />} variant=\"flat\">\n                  Status\n                </Button>\n              </DropdownTrigger>\n              <DropdownMenu\n                disallowEmptySelection\n                aria-label=\"Table Columns\"\n                closeOnSelect={false}\n                selectedKeys={statusFilter}\n                selectionMode=\"multiple\"\n                onSelectionChange={setStatusFilter}\n              >\n                {statusOptions.map((status) => (\n                  <DropdownItem key={status.uid} className=\"capitalize\">\n                    {capitalize(status.name)}\n                  </DropdownItem>\n                ))}\n              </DropdownMenu>\n            </Dropdown>\n            <Dropdown>\n              <DropdownTrigger className=\"hidden sm:flex\">\n                <Button endContent={<ChevronDownIcon className=\"text-small\" />} variant=\"flat\">\n                  Columns\n                </Button>\n              </DropdownTrigger>\n              <DropdownMenu\n                disallowEmptySelection\n                aria-label=\"Table Columns\"\n                closeOnSelect={false}\n                selectedKeys={visibleColumns}\n                selectionMode=\"multiple\"\n                onSelectionChange={setVisibleColumns}\n              >\n                {columns.map((column) => (\n                  <DropdownItem key={column.uid} className=\"capitalize\">\n                    {capitalize(column.name)}\n                  </DropdownItem>\n                ))}\n              </DropdownMenu>\n            </Dropdown>\n            <Button color=\"primary\" endContent={<PlusIcon />}>\n              Add New\n            </Button>\n          </div>\n        </div>\n        <div className=\"flex justify-between items-center\">\n          <span className=\"text-default-400 text-small\">Total {users.length} users</span>\n          <label className=\"flex items-center text-default-400 text-small\">\n            Rows per page:\n            <select\n              className=\"bg-transparent outline-none text-default-400 text-small\"\n              onChange={onRowsPerPageChange}\n            >\n              <option value=\"5\">5</option>\n              <option value=\"10\">10</option>\n              <option value=\"15\">15</option>\n            </select>\n          </label>\n        </div>\n      </div>\n    );\n  }, [\n    filterValue,\n    statusFilter,\n    visibleColumns,\n    onRowsPerPageChange,\n    users.length,\n    onSearchChange,\n    hasSearchFilter,\n  ]);\n\n  const bottomContent = React.useMemo(() => {\n    return (\n      <div className=\"py-2 px-2 flex justify-between items-center\">\n        <span className=\"w-[30%] text-small text-default-400\">\n          {selectedKeys === \"all\"\n            ? \"All items selected\"\n            : \\`\\${selectedKeys.size} of \\${filteredItems.length} selected\\`}\n        </span>\n        <Pagination\n          isCompact\n          showControls\n          showShadow\n          color=\"primary\"\n          page={page}\n          total={pages}\n          onChange={setPage}\n        />\n        <div className=\"hidden sm:flex w-[30%] justify-end gap-2\">\n          <Button isDisabled={pages === 1} size=\"sm\" variant=\"flat\" onPress={onPreviousPage}>\n            Previous\n          </Button>\n          <Button isDisabled={pages === 1} size=\"sm\" variant=\"flat\" onPress={onNextPage}>\n            Next\n          </Button>\n        </div>\n      </div>\n    );\n  }, [selectedKeys, items.length, page, pages, hasSearchFilter]);\n\n  return (\n    <Table\n      isHeaderSticky\n      aria-label=\"Example table with custom cells, pagination and sorting\"\n      bottomContent={bottomContent}\n      bottomContentPlacement=\"outside\"\n      classNames={{\n        wrapper: \"max-h-[382px]\",\n      }}\n      selectedKeys={selectedKeys}\n      selectionMode=\"multiple\"\n      sortDescriptor={sortDescriptor}\n      topContent={topContent}\n      topContentPlacement=\"outside\"\n      onSelectionChange={setSelectedKeys}\n      onSortChange={setSortDescriptor}\n    >\n      <TableHeader columns={headerColumns}>\n        {(column) => (\n          <TableColumn\n            key={column.uid}\n            align={column.uid === \"actions\" ? \"center\" : \"start\"}\n            allowsSorting={column.sortable}\n          >\n            {column.name}\n          </TableColumn>\n        )}\n      </TableHeader>\n      <TableBody emptyContent={\"No users found\"} items={sortedItems}>\n        {(item) => (\n          <TableRow key={item.id}>\n            {(columnKey) => <TableCell>{renderCell(item, columnKey)}</TableCell>}\n          </TableRow>\n        )}\n      </TableBody>\n    </Table>\n  );\n}\n`;var ne=`import React, {SVGProps} from \"react\";\nimport {\n  Table,\n  TableHeader,\n  TableColumn,\n  TableBody,\n  TableRow,\n  TableCell,\n  Input,\n  Button,\n  DropdownTrigger,\n  Dropdown,\n  DropdownMenu,\n  DropdownItem,\n  Chip,\n  User,\n  Pagination,\n  Selection,\n  ChipProps,\n  SortDescriptor,\n} from \"@heroui/react\";\n\nexport type IconSvgProps = SVGProps<SVGSVGElement> & {\n  size?: number;\n};\n\nexport function capitalize(s: string) {\n  return s ? s.charAt(0).toUpperCase() + s.slice(1).toLowerCase() : \"\";\n}\n\nexport const PlusIcon = ({size = 24, width, height, ...props}: IconSvgProps) => {\n  return (\n    <svg\n      aria-hidden=\"true\"\n      fill=\"none\"\n      focusable=\"false\"\n      height={size || height}\n      role=\"presentation\"\n      viewBox=\"0 0 24 24\"\n      width={size || width}\n      {...props}\n    >\n      <g\n        fill=\"none\"\n        stroke=\"currentColor\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth={1.5}\n      >\n        <path d=\"M6 12h12\" />\n        <path d=\"M12 18V6\" />\n      </g>\n    </svg>\n  );\n};\n\nexport const VerticalDotsIcon = ({size = 24, width, height, ...props}: IconSvgProps) => {\n  return (\n    <svg\n      aria-hidden=\"true\"\n      fill=\"none\"\n      focusable=\"false\"\n      height={size || height}\n      role=\"presentation\"\n      viewBox=\"0 0 24 24\"\n      width={size || width}\n      {...props}\n    >\n      <path\n        d=\"M12 10c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0-6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 12c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z\"\n        fill=\"currentColor\"\n      />\n    </svg>\n  );\n};\n\nexport const SearchIcon = (props: IconSvgProps) => {\n  return (\n    <svg\n      aria-hidden=\"true\"\n      fill=\"none\"\n      focusable=\"false\"\n      height=\"1em\"\n      role=\"presentation\"\n      viewBox=\"0 0 24 24\"\n      width=\"1em\"\n      {...props}\n    >\n      <path\n        d=\"M11.5 21C16.7467 21 21 16.7467 21 11.5C21 6.25329 16.7467 2 11.5 2C6.25329 2 2 6.25329 2 11.5C2 16.7467 6.25329 21 11.5 21Z\"\n        stroke=\"currentColor\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth=\"2\"\n      />\n      <path\n        d=\"M22 22L20 20\"\n        stroke=\"currentColor\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth=\"2\"\n      />\n    </svg>\n  );\n};\n\nexport const ChevronDownIcon = ({strokeWidth = 1.5, ...otherProps}: IconSvgProps) => {\n  return (\n    <svg\n      aria-hidden=\"true\"\n      fill=\"none\"\n      focusable=\"false\"\n      height=\"1em\"\n      role=\"presentation\"\n      viewBox=\"0 0 24 24\"\n      width=\"1em\"\n      {...otherProps}\n    >\n      <path\n        d=\"m19.92 8.95-6.52 6.52c-.77.77-2.03.77-2.8 0L4.08 8.95\"\n        stroke=\"currentColor\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeMiterlimit={10}\n        strokeWidth={strokeWidth}\n      />\n    </svg>\n  );\n};\n\nexport const columns = [\n  {name: \"ID\", uid: \"id\", sortable: true},\n  {name: \"NAME\", uid: \"name\", sortable: true},\n  {name: \"AGE\", uid: \"age\", sortable: true},\n  {name: \"ROLE\", uid: \"role\", sortable: true},\n  {name: \"TEAM\", uid: \"team\"},\n  {name: \"EMAIL\", uid: \"email\"},\n  {name: \"STATUS\", uid: \"status\", sortable: true},\n  {name: \"ACTIONS\", uid: \"actions\"},\n];\n\nexport const statusOptions = [\n  {name: \"Active\", uid: \"active\"},\n  {name: \"Paused\", uid: \"paused\"},\n  {name: \"Vacation\", uid: \"vacation\"},\n];\n\nexport const users = [\n  {\n    id: 1,\n    name: \"Tony Reichert\",\n    role: \"CEO\",\n    team: \"Management\",\n    status: \"active\",\n    age: \"29\",\n    avatar: \"https://i.pravatar.cc/150?u=a042581f4e29026024d\",\n    email: \"tony.reichert@example.com\",\n  },\n  {\n    id: 2,\n    name: \"Zoey Lang\",\n    role: \"Tech Lead\",\n    team: \"Development\",\n    status: \"paused\",\n    age: \"25\",\n    avatar: \"https://i.pravatar.cc/150?u=a042581f4e29026704d\",\n    email: \"zoey.lang@example.com\",\n  },\n  {\n    id: 3,\n    name: \"Jane Fisher\",\n    role: \"Sr. Dev\",\n    team: \"Development\",\n    status: \"active\",\n    age: \"22\",\n    avatar: \"https://i.pravatar.cc/150?u=a04258114e29026702d\",\n    email: \"jane.fisher@example.com\",\n  },\n  {\n    id: 4,\n    name: \"William Howard\",\n    role: \"C.M.\",\n    team: \"Marketing\",\n    status: \"vacation\",\n    age: \"28\",\n    avatar: \"https://i.pravatar.cc/150?u=a048581f4e29026701d\",\n    email: \"william.howard@example.com\",\n  },\n  {\n    id: 5,\n    name: \"Kristen Copper\",\n    role: \"S. Manager\",\n    team: \"Sales\",\n    status: \"active\",\n    age: \"24\",\n    avatar: \"https://i.pravatar.cc/150?u=a092581d4ef9026700d\",\n    email: \"kristen.cooper@example.com\",\n  },\n  {\n    id: 6,\n    name: \"Brian Kim\",\n    role: \"P. Manager\",\n    team: \"Management\",\n    age: \"29\",\n    avatar: \"https://i.pravatar.cc/150?u=a042581f4e29026024d\",\n    email: \"brian.kim@example.com\",\n    status: \"Active\",\n  },\n  {\n    id: 7,\n    name: \"Michael Hunt\",\n    role: \"Designer\",\n    team: \"Design\",\n    status: \"paused\",\n    age: \"27\",\n    avatar: \"https://i.pravatar.cc/150?u=a042581f4e29027007d\",\n    email: \"michael.hunt@example.com\",\n  },\n  {\n    id: 8,\n    name: \"Samantha Brooks\",\n    role: \"HR Manager\",\n    team: \"HR\",\n    status: \"active\",\n    age: \"31\",\n    avatar: \"https://i.pravatar.cc/150?u=a042581f4e27027008d\",\n    email: \"samantha.brooks@example.com\",\n  },\n  {\n    id: 9,\n    name: \"Frank Harrison\",\n    role: \"F. Manager\",\n    team: \"Finance\",\n    status: \"vacation\",\n    age: \"33\",\n    avatar: \"https://i.pravatar.cc/150?img=4\",\n    email: \"frank.harrison@example.com\",\n  },\n  {\n    id: 10,\n    name: \"Emma Adams\",\n    role: \"Ops Manager\",\n    team: \"Operations\",\n    status: \"active\",\n    age: \"35\",\n    avatar: \"https://i.pravatar.cc/150?img=5\",\n    email: \"emma.adams@example.com\",\n  },\n  {\n    id: 11,\n    name: \"Brandon Stevens\",\n    role: \"Jr. Dev\",\n    team: \"Development\",\n    status: \"active\",\n    age: \"22\",\n    avatar: \"https://i.pravatar.cc/150?img=8\",\n    email: \"brandon.stevens@example.com\",\n  },\n  {\n    id: 12,\n    name: \"Megan Richards\",\n    role: \"P. Manager\",\n    team: \"Product\",\n    status: \"paused\",\n    age: \"28\",\n    avatar: \"https://i.pravatar.cc/150?img=10\",\n    email: \"megan.richards@example.com\",\n  },\n  {\n    id: 13,\n    name: \"Oliver Scott\",\n    role: \"S. Manager\",\n    team: \"Security\",\n    status: \"active\",\n    age: \"37\",\n    avatar: \"https://i.pravatar.cc/150?img=12\",\n    email: \"oliver.scott@example.com\",\n  },\n  {\n    id: 14,\n    name: \"Grace Allen\",\n    role: \"M. Specialist\",\n    team: \"Marketing\",\n    status: \"active\",\n    age: \"30\",\n    avatar: \"https://i.pravatar.cc/150?img=16\",\n    email: \"grace.allen@example.com\",\n  },\n  {\n    id: 15,\n    name: \"Noah Carter\",\n    role: \"IT Specialist\",\n    team: \"I. Technology\",\n    status: \"paused\",\n    age: \"31\",\n    avatar: \"https://i.pravatar.cc/150?img=15\",\n    email: \"noah.carter@example.com\",\n  },\n  {\n    id: 16,\n    name: \"Ava Perez\",\n    role: \"Manager\",\n    team: \"Sales\",\n    status: \"active\",\n    age: \"29\",\n    avatar: \"https://i.pravatar.cc/150?img=20\",\n    email: \"ava.perez@example.com\",\n  },\n  {\n    id: 17,\n    name: \"Liam Johnson\",\n    role: \"Data Analyst\",\n    team: \"Analysis\",\n    status: \"active\",\n    age: \"28\",\n    avatar: \"https://i.pravatar.cc/150?img=33\",\n    email: \"liam.johnson@example.com\",\n  },\n  {\n    id: 18,\n    name: \"Sophia Taylor\",\n    role: \"QA Analyst\",\n    team: \"Testing\",\n    status: \"active\",\n    age: \"27\",\n    avatar: \"https://i.pravatar.cc/150?img=29\",\n    email: \"sophia.taylor@example.com\",\n  },\n  {\n    id: 19,\n    name: \"Lucas Harris\",\n    role: \"Administrator\",\n    team: \"Information Technology\",\n    status: \"paused\",\n    age: \"32\",\n    avatar: \"https://i.pravatar.cc/150?img=50\",\n    email: \"lucas.harris@example.com\",\n  },\n  {\n    id: 20,\n    name: \"Mia Robinson\",\n    role: \"Coordinator\",\n    team: \"Operations\",\n    status: \"active\",\n    age: \"26\",\n    avatar: \"https://i.pravatar.cc/150?img=45\",\n    email: \"mia.robinson@example.com\",\n  },\n];\n\nconst statusColorMap: Record<string, ChipProps[\"color\"]> = {\n  active: \"success\",\n  paused: \"danger\",\n  vacation: \"warning\",\n};\n\nconst INITIAL_VISIBLE_COLUMNS = [\"name\", \"role\", \"status\", \"actions\"];\n\ntype User = (typeof users)[0];\n\nexport default function App() {\n  const [filterValue, setFilterValue] = React.useState(\"\");\n  const [selectedKeys, setSelectedKeys] = React.useState<Selection>(new Set([]));\n  const [visibleColumns, setVisibleColumns] = React.useState<Selection>(\n    new Set(INITIAL_VISIBLE_COLUMNS),\n  );\n  const [statusFilter, setStatusFilter] = React.useState<Selection>(\"all\");\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\n  const [sortDescriptor, setSortDescriptor] = React.useState<SortDescriptor>({\n    column: \"age\",\n    direction: \"ascending\",\n  });\n\n  const [page, setPage] = React.useState(1);\n\n  const hasSearchFilter = Boolean(filterValue);\n\n  const headerColumns = React.useMemo(() => {\n    if (visibleColumns === \"all\") return columns;\n\n    return columns.filter((column) => Array.from(visibleColumns).includes(column.uid));\n  }, [visibleColumns]);\n\n  const filteredItems = React.useMemo(() => {\n    let filteredUsers = [...users];\n\n    if (hasSearchFilter) {\n      filteredUsers = filteredUsers.filter((user) =>\n        user.name.toLowerCase().includes(filterValue.toLowerCase()),\n      );\n    }\n    if (statusFilter !== \"all\" && Array.from(statusFilter).length !== statusOptions.length) {\n      filteredUsers = filteredUsers.filter((user) =>\n        Array.from(statusFilter).includes(user.status),\n      );\n    }\n\n    return filteredUsers;\n  }, [users, filterValue, statusFilter]);\n\n  const pages = Math.ceil(filteredItems.length / rowsPerPage) || 1;\n\n  const items = React.useMemo(() => {\n    const start = (page - 1) * rowsPerPage;\n    const end = start + rowsPerPage;\n\n    return filteredItems.slice(start, end);\n  }, [page, filteredItems, rowsPerPage]);\n\n  const sortedItems = React.useMemo(() => {\n    return [...items].sort((a: User, b: User) => {\n      const first = a[sortDescriptor.column as keyof User] as number;\n      const second = b[sortDescriptor.column as keyof User] as number;\n      const cmp = first < second ? -1 : first > second ? 1 : 0;\n\n      return sortDescriptor.direction === \"descending\" ? -cmp : cmp;\n    });\n  }, [sortDescriptor, items]);\n\n  const renderCell = React.useCallback((user: User, columnKey: React.Key) => {\n    const cellValue = user[columnKey as keyof User];\n\n    switch (columnKey) {\n      case \"name\":\n        return (\n          <User\n            avatarProps={{radius: \"lg\", src: user.avatar}}\n            description={user.email}\n            name={cellValue}\n          >\n            {user.email}\n          </User>\n        );\n      case \"role\":\n        return (\n          <div className=\"flex flex-col\">\n            <p className=\"text-bold text-small capitalize\">{cellValue}</p>\n            <p className=\"text-bold text-tiny capitalize text-default-400\">{user.team}</p>\n          </div>\n        );\n      case \"status\":\n        return (\n          <Chip className=\"capitalize\" color={statusColorMap[user.status]} size=\"sm\" variant=\"flat\">\n            {cellValue}\n          </Chip>\n        );\n      case \"actions\":\n        return (\n          <div className=\"relative flex justify-end items-center gap-2\">\n            <Dropdown>\n              <DropdownTrigger>\n                <Button isIconOnly size=\"sm\" variant=\"light\">\n                  <VerticalDotsIcon className=\"text-default-300\" />\n                </Button>\n              </DropdownTrigger>\n              <DropdownMenu>\n                <DropdownItem key=\"view\">View</DropdownItem>\n                <DropdownItem key=\"edit\">Edit</DropdownItem>\n                <DropdownItem key=\"delete\">Delete</DropdownItem>\n              </DropdownMenu>\n            </Dropdown>\n          </div>\n        );\n      default:\n        return cellValue;\n    }\n  }, []);\n\n  const onNextPage = React.useCallback(() => {\n    if (page < pages) {\n      setPage(page + 1);\n    }\n  }, [page, pages]);\n\n  const onPreviousPage = React.useCallback(() => {\n    if (page > 1) {\n      setPage(page - 1);\n    }\n  }, [page]);\n\n  const onRowsPerPageChange = React.useCallback((e: React.ChangeEvent<HTMLSelectElement>) => {\n    setRowsPerPage(Number(e.target.value));\n    setPage(1);\n  }, []);\n\n  const onSearchChange = React.useCallback((value?: string) => {\n    if (value) {\n      setFilterValue(value);\n      setPage(1);\n    } else {\n      setFilterValue(\"\");\n    }\n  }, []);\n\n  const onClear = React.useCallback(() => {\n    setFilterValue(\"\");\n    setPage(1);\n  }, []);\n\n  const topContent = React.useMemo(() => {\n    return (\n      <div className=\"flex flex-col gap-4\">\n        <div className=\"flex justify-between gap-3 items-end\">\n          <Input\n            isClearable\n            className=\"w-full sm:max-w-[44%]\"\n            placeholder=\"Search by name...\"\n            startContent={<SearchIcon />}\n            value={filterValue}\n            onClear={() => onClear()}\n            onValueChange={onSearchChange}\n          />\n          <div className=\"flex gap-3\">\n            <Dropdown>\n              <DropdownTrigger className=\"hidden sm:flex\">\n                <Button endContent={<ChevronDownIcon className=\"text-small\" />} variant=\"flat\">\n                  Status\n                </Button>\n              </DropdownTrigger>\n              <DropdownMenu\n                disallowEmptySelection\n                aria-label=\"Table Columns\"\n                closeOnSelect={false}\n                selectedKeys={statusFilter}\n                selectionMode=\"multiple\"\n                onSelectionChange={setStatusFilter}\n              >\n                {statusOptions.map((status) => (\n                  <DropdownItem key={status.uid} className=\"capitalize\">\n                    {capitalize(status.name)}\n                  </DropdownItem>\n                ))}\n              </DropdownMenu>\n            </Dropdown>\n            <Dropdown>\n              <DropdownTrigger className=\"hidden sm:flex\">\n                <Button endContent={<ChevronDownIcon className=\"text-small\" />} variant=\"flat\">\n                  Columns\n                </Button>\n              </DropdownTrigger>\n              <DropdownMenu\n                disallowEmptySelection\n                aria-label=\"Table Columns\"\n                closeOnSelect={false}\n                selectedKeys={visibleColumns}\n                selectionMode=\"multiple\"\n                onSelectionChange={setVisibleColumns}\n              >\n                {columns.map((column) => (\n                  <DropdownItem key={column.uid} className=\"capitalize\">\n                    {capitalize(column.name)}\n                  </DropdownItem>\n                ))}\n              </DropdownMenu>\n            </Dropdown>\n            <Button color=\"primary\" endContent={<PlusIcon />}>\n              Add New\n            </Button>\n          </div>\n        </div>\n        <div className=\"flex justify-between items-center\">\n          <span className=\"text-default-400 text-small\">Total {users.length} users</span>\n          <label className=\"flex items-center text-default-400 text-small\">\n            Rows per page:\n            <select\n              className=\"bg-transparent outline-none text-default-400 text-small\"\n              onChange={onRowsPerPageChange}\n            >\n              <option value=\"5\">5</option>\n              <option value=\"10\">10</option>\n              <option value=\"15\">15</option>\n            </select>\n          </label>\n        </div>\n      </div>\n    );\n  }, [\n    filterValue,\n    statusFilter,\n    visibleColumns,\n    onSearchChange,\n    onRowsPerPageChange,\n    users.length,\n    hasSearchFilter,\n  ]);\n\n  const bottomContent = React.useMemo(() => {\n    return (\n      <div className=\"py-2 px-2 flex justify-between items-center\">\n        <span className=\"w-[30%] text-small text-default-400\">\n          {selectedKeys === \"all\"\n            ? \"All items selected\"\n            : \\`\\${selectedKeys.size} of \\${filteredItems.length} selected\\`}\n        </span>\n        <Pagination\n          isCompact\n          showControls\n          showShadow\n          color=\"primary\"\n          page={page}\n          total={pages}\n          onChange={setPage}\n        />\n        <div className=\"hidden sm:flex w-[30%] justify-end gap-2\">\n          <Button isDisabled={pages === 1} size=\"sm\" variant=\"flat\" onPress={onPreviousPage}>\n            Previous\n          </Button>\n          <Button isDisabled={pages === 1} size=\"sm\" variant=\"flat\" onPress={onNextPage}>\n            Next\n          </Button>\n        </div>\n      </div>\n    );\n  }, [selectedKeys, items.length, page, pages, hasSearchFilter]);\n\n  return (\n    <Table\n      isHeaderSticky\n      aria-label=\"Example table with custom cells, pagination and sorting\"\n      bottomContent={bottomContent}\n      bottomContentPlacement=\"outside\"\n      classNames={{\n        wrapper: \"max-h-[382px]\",\n      }}\n      selectedKeys={selectedKeys}\n      selectionMode=\"multiple\"\n      sortDescriptor={sortDescriptor}\n      topContent={topContent}\n      topContentPlacement=\"outside\"\n      onSelectionChange={setSelectedKeys}\n      onSortChange={setSortDescriptor}\n    >\n      <TableHeader columns={headerColumns}>\n        {(column) => (\n          <TableColumn\n            key={column.uid}\n            align={column.uid === \"actions\" ? \"center\" : \"start\"}\n            allowsSorting={column.sortable}\n          >\n            {column.name}\n          </TableColumn>\n        )}\n      </TableHeader>\n      <TableBody emptyContent={\"No users found\"} items={sortedItems}>\n        {(item) => (\n          <TableRow key={item.id}>\n            {(columnKey) => <TableCell>{renderCell(item, columnKey)}</TableCell>}\n          </TableRow>\n        )}\n      </TableBody>\n    </Table>\n  );\n}\n`;var va={\"/App.jsx\":re},xa={\"/App.tsx\":ne},se={...va,...xa};var ie=`import {\n  Table,\n  TableHeader,\n  TableColumn,\n  TableBody,\n  TableRow,\n  TableCell,\n  Input,\n  Button,\n  DropdownTrigger,\n  Dropdown,\n  DropdownMenu,\n  DropdownItem,\n  Chip,\n  User,\n  Pagination,\n} from \"@heroui/react\";\n\nexport const columns = [\n  {name: \"ID\", uid: \"id\", sortable: true},\n  {name: \"NAME\", uid: \"name\", sortable: true},\n  {name: \"AGE\", uid: \"age\", sortable: true},\n  {name: \"ROLE\", uid: \"role\", sortable: true},\n  {name: \"TEAM\", uid: \"team\"},\n  {name: \"EMAIL\", uid: \"email\"},\n  {name: \"STATUS\", uid: \"status\", sortable: true},\n  {name: \"ACTIONS\", uid: \"actions\"},\n];\n\nexport const statusOptions = [\n  {name: \"Active\", uid: \"active\"},\n  {name: \"Paused\", uid: \"paused\"},\n  {name: \"Vacation\", uid: \"vacation\"},\n];\n\nexport const users = [\n  {\n    id: 1,\n    name: \"Tony Reichert\",\n    role: \"CEO\",\n    team: \"Management\",\n    status: \"active\",\n    age: \"29\",\n    avatar: \"https://i.pravatar.cc/150?u=a042581f4e29026024d\",\n    email: \"tony.reichert@example.com\",\n  },\n  {\n    id: 2,\n    name: \"Zoey Lang\",\n    role: \"Tech Lead\",\n    team: \"Development\",\n    status: \"paused\",\n    age: \"25\",\n    avatar: \"https://i.pravatar.cc/150?u=a042581f4e29026704d\",\n    email: \"zoey.lang@example.com\",\n  },\n  {\n    id: 3,\n    name: \"Jane Fisher\",\n    role: \"Sr. Dev\",\n    team: \"Development\",\n    status: \"active\",\n    age: \"22\",\n    avatar: \"https://i.pravatar.cc/150?u=a04258114e29026702d\",\n    email: \"jane.fisher@example.com\",\n  },\n  {\n    id: 4,\n    name: \"William Howard\",\n    role: \"C.M.\",\n    team: \"Marketing\",\n    status: \"vacation\",\n    age: \"28\",\n    avatar: \"https://i.pravatar.cc/150?u=a048581f4e29026701d\",\n    email: \"william.howard@example.com\",\n  },\n  {\n    id: 5,\n    name: \"Kristen Copper\",\n    role: \"S. Manager\",\n    team: \"Sales\",\n    status: \"active\",\n    age: \"24\",\n    avatar: \"https://i.pravatar.cc/150?u=a092581d4ef9026700d\",\n    email: \"kristen.cooper@example.com\",\n  },\n  {\n    id: 6,\n    name: \"Brian Kim\",\n    role: \"P. Manager\",\n    team: \"Management\",\n    age: \"29\",\n    avatar: \"https://i.pravatar.cc/150?u=a042581f4e29026024d\",\n    email: \"brian.kim@example.com\",\n    status: \"active\",\n  },\n  {\n    id: 7,\n    name: \"Michael Hunt\",\n    role: \"Designer\",\n    team: \"Design\",\n    status: \"paused\",\n    age: \"27\",\n    avatar: \"https://i.pravatar.cc/150?u=a042581f4e29027007d\",\n    email: \"michael.hunt@example.com\",\n  },\n  {\n    id: 8,\n    name: \"Samantha Brooks\",\n    role: \"HR Manager\",\n    team: \"HR\",\n    status: \"active\",\n    age: \"31\",\n    avatar: \"https://i.pravatar.cc/150?u=a042581f4e27027008d\",\n    email: \"samantha.brooks@example.com\",\n  },\n  {\n    id: 9,\n    name: \"Frank Harrison\",\n    role: \"F. Manager\",\n    team: \"Finance\",\n    status: \"vacation\",\n    age: \"33\",\n    avatar: \"https://i.pravatar.cc/150?img=4\",\n    email: \"frank.harrison@example.com\",\n  },\n  {\n    id: 10,\n    name: \"Emma Adams\",\n    role: \"Ops Manager\",\n    team: \"Operations\",\n    status: \"active\",\n    age: \"35\",\n    avatar: \"https://i.pravatar.cc/150?img=5\",\n    email: \"emma.adams@example.com\",\n  },\n  {\n    id: 11,\n    name: \"Brandon Stevens\",\n    role: \"Jr. Dev\",\n    team: \"Development\",\n    status: \"active\",\n    age: \"22\",\n    avatar: \"https://i.pravatar.cc/150?img=8\",\n    email: \"brandon.stevens@example.com\",\n  },\n  {\n    id: 12,\n    name: \"Megan Richards\",\n    role: \"P. Manager\",\n    team: \"Product\",\n    status: \"paused\",\n    age: \"28\",\n    avatar: \"https://i.pravatar.cc/150?img=10\",\n    email: \"megan.richards@example.com\",\n  },\n  {\n    id: 13,\n    name: \"Oliver Scott\",\n    role: \"S. Manager\",\n    team: \"Security\",\n    status: \"active\",\n    age: \"37\",\n    avatar: \"https://i.pravatar.cc/150?img=12\",\n    email: \"oliver.scott@example.com\",\n  },\n  {\n    id: 14,\n    name: \"Grace Allen\",\n    role: \"M. Specialist\",\n    team: \"Marketing\",\n    status: \"active\",\n    age: \"30\",\n    avatar: \"https://i.pravatar.cc/150?img=16\",\n    email: \"grace.allen@example.com\",\n  },\n  {\n    id: 15,\n    name: \"Noah Carter\",\n    role: \"IT Specialist\",\n    team: \"I. Technology\",\n    status: \"paused\",\n    age: \"31\",\n    avatar: \"https://i.pravatar.cc/150?img=15\",\n    email: \"noah.carter@example.com\",\n  },\n  {\n    id: 16,\n    name: \"Ava Perez\",\n    role: \"Manager\",\n    team: \"Sales\",\n    status: \"active\",\n    age: \"29\",\n    avatar: \"https://i.pravatar.cc/150?img=20\",\n    email: \"ava.perez@example.com\",\n  },\n  {\n    id: 17,\n    name: \"Liam Johnson\",\n    role: \"Data Analyst\",\n    team: \"Analysis\",\n    status: \"active\",\n    age: \"28\",\n    avatar: \"https://i.pravatar.cc/150?img=33\",\n    email: \"liam.johnson@example.com\",\n  },\n  {\n    id: 18,\n    name: \"Sophia Taylor\",\n    role: \"QA Analyst\",\n    team: \"Testing\",\n    status: \"active\",\n    age: \"27\",\n    avatar: \"https://i.pravatar.cc/150?img=29\",\n    email: \"sophia.taylor@example.com\",\n  },\n  {\n    id: 19,\n    name: \"Lucas Harris\",\n    role: \"Administrator\",\n    team: \"Information Technology\",\n    status: \"paused\",\n    age: \"32\",\n    avatar: \"https://i.pravatar.cc/150?img=50\",\n    email: \"lucas.harris@example.com\",\n  },\n  {\n    id: 20,\n    name: \"Mia Robinson\",\n    role: \"Coordinator\",\n    team: \"Operations\",\n    status: \"active\",\n    age: \"26\",\n    avatar: \"https://i.pravatar.cc/150?img=45\",\n    email: \"mia.robinson@example.com\",\n  },\n];\n\nexport function capitalize(s) {\n  return s ? s.charAt(0).toUpperCase() + s.slice(1).toLowerCase() : \"\";\n}\n\nexport const PlusIcon = ({size = 24, width, height, ...props}) => {\n  return (\n    <svg\n      aria-hidden=\"true\"\n      fill=\"none\"\n      focusable=\"false\"\n      height={size || height}\n      role=\"presentation\"\n      viewBox=\"0 0 24 24\"\n      width={size || width}\n      {...props}\n    >\n      <g\n        fill=\"none\"\n        stroke=\"currentColor\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth={1.5}\n      >\n        <path d=\"M6 12h12\" />\n        <path d=\"M12 18V6\" />\n      </g>\n    </svg>\n  );\n};\n\nexport const VerticalDotsIcon = ({size = 24, width, height, ...props}) => {\n  return (\n    <svg\n      aria-hidden=\"true\"\n      fill=\"none\"\n      focusable=\"false\"\n      height={size || height}\n      role=\"presentation\"\n      viewBox=\"0 0 24 24\"\n      width={size || width}\n      {...props}\n    >\n      <path\n        d=\"M12 10c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0-6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 12c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z\"\n        fill=\"currentColor\"\n      />\n    </svg>\n  );\n};\n\nexport const SearchIcon = (props) => {\n  return (\n    <svg\n      aria-hidden=\"true\"\n      fill=\"none\"\n      focusable=\"false\"\n      height=\"1em\"\n      role=\"presentation\"\n      viewBox=\"0 0 24 24\"\n      width=\"1em\"\n      {...props}\n    >\n      <path\n        d=\"M11.5 21C16.7467 21 21 16.7467 21 11.5C21 6.25329 16.7467 2 11.5 2C6.25329 2 2 6.25329 2 11.5C2 16.7467 6.25329 21 11.5 21Z\"\n        stroke=\"currentColor\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth=\"2\"\n      />\n      <path\n        d=\"M22 22L20 20\"\n        stroke=\"currentColor\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth=\"2\"\n      />\n    </svg>\n  );\n};\n\nexport const ChevronDownIcon = ({strokeWidth = 1.5, ...otherProps}) => {\n  return (\n    <svg\n      aria-hidden=\"true\"\n      fill=\"none\"\n      focusable=\"false\"\n      height=\"1em\"\n      role=\"presentation\"\n      viewBox=\"0 0 24 24\"\n      width=\"1em\"\n      {...otherProps}\n    >\n      <path\n        d=\"m19.92 8.95-6.52 6.52c-.77.77-2.03.77-2.8 0L4.08 8.95\"\n        stroke=\"currentColor\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeMiterlimit={10}\n        strokeWidth={strokeWidth}\n      />\n    </svg>\n  );\n};\n\nconst statusColorMap = {\n  active: \"success\",\n  paused: \"danger\",\n  vacation: \"warning\",\n};\n\nconst INITIAL_VISIBLE_COLUMNS = [\"name\", \"role\", \"status\", \"actions\"];\n\nexport default function App() {\n  const [filterValue, setFilterValue] = React.useState(\"\");\n  const [selectedKeys, setSelectedKeys] = React.useState(new Set([]));\n  const [visibleColumns, setVisibleColumns] = React.useState(new Set(INITIAL_VISIBLE_COLUMNS));\n  const [statusFilter, setStatusFilter] = React.useState(\"all\");\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\n  const [sortDescriptor, setSortDescriptor] = React.useState({\n    column: \"age\",\n    direction: \"ascending\",\n  });\n  const [page, setPage] = React.useState(1);\n\n  const pages = Math.ceil(users.length / rowsPerPage);\n\n  const hasSearchFilter = Boolean(filterValue);\n\n  const headerColumns = React.useMemo(() => {\n    if (visibleColumns === \"all\") return columns;\n\n    return columns.filter((column) => Array.from(visibleColumns).includes(column.uid));\n  }, [visibleColumns]);\n\n  const filteredItems = React.useMemo(() => {\n    let filteredUsers = [...users];\n\n    if (hasSearchFilter) {\n      filteredUsers = filteredUsers.filter((user) =>\n        user.name.toLowerCase().includes(filterValue.toLowerCase()),\n      );\n    }\n    if (statusFilter !== \"all\" && Array.from(statusFilter).length !== statusOptions.length) {\n      filteredUsers = filteredUsers.filter((user) =>\n        Array.from(statusFilter).includes(user.status),\n      );\n    }\n\n    return filteredUsers;\n  }, [users, filterValue, statusFilter]);\n\n  const items = React.useMemo(() => {\n    const start = (page - 1) * rowsPerPage;\n    const end = start + rowsPerPage;\n\n    return filteredItems.slice(start, end);\n  }, [page, filteredItems, rowsPerPage]);\n\n  const sortedItems = React.useMemo(() => {\n    return [...items].sort((a, b) => {\n      const first = a[sortDescriptor.column];\n      const second = b[sortDescriptor.column];\n      const cmp = first < second ? -1 : first > second ? 1 : 0;\n\n      return sortDescriptor.direction === \"descending\" ? -cmp : cmp;\n    });\n  }, [sortDescriptor, items]);\n\n  const renderCell = React.useCallback((user, columnKey) => {\n    const cellValue = user[columnKey];\n\n    switch (columnKey) {\n      case \"name\":\n        return (\n          <User\n            avatarProps={{radius: \"full\", size: \"sm\", src: user.avatar}}\n            classNames={{\n              description: \"text-default-500\",\n            }}\n            description={user.email}\n            name={cellValue}\n          >\n            {user.email}\n          </User>\n        );\n      case \"role\":\n        return (\n          <div className=\"flex flex-col\">\n            <p className=\"text-bold text-small capitalize\">{cellValue}</p>\n            <p className=\"text-bold text-tiny capitalize text-default-500\">{user.team}</p>\n          </div>\n        );\n      case \"status\":\n        return (\n          <Chip\n            className=\"capitalize border-none gap-1 text-default-600\"\n            color={statusColorMap[user.status]}\n            size=\"sm\"\n            variant=\"dot\"\n          >\n            {cellValue}\n          </Chip>\n        );\n      case \"actions\":\n        return (\n          <div className=\"relative flex justify-end items-center gap-2\">\n            <Dropdown className=\"bg-background border-1 border-default-200\">\n              <DropdownTrigger>\n                <Button isIconOnly radius=\"full\" size=\"sm\" variant=\"light\">\n                  <VerticalDotsIcon className=\"text-default-400\" />\n                </Button>\n              </DropdownTrigger>\n              <DropdownMenu>\n                <DropdownItem key=\"view\">View</DropdownItem>\n                <DropdownItem key=\"edit\">Edit</DropdownItem>\n                <DropdownItem key=\"delete\">Delete</DropdownItem>\n              </DropdownMenu>\n            </Dropdown>\n          </div>\n        );\n      default:\n        return cellValue;\n    }\n  }, []);\n\n  const onRowsPerPageChange = React.useCallback((e) => {\n    setRowsPerPage(Number(e.target.value));\n    setPage(1);\n  }, []);\n\n  const onSearchChange = React.useCallback((value) => {\n    if (value) {\n      setFilterValue(value);\n      setPage(1);\n    } else {\n      setFilterValue(\"\");\n    }\n  }, []);\n\n  const topContent = React.useMemo(() => {\n    return (\n      <div className=\"flex flex-col gap-4\">\n        <div className=\"flex justify-between gap-3 items-end\">\n          <Input\n            isClearable\n            classNames={{\n              base: \"w-full sm:max-w-[44%]\",\n              inputWrapper: \"border-1\",\n            }}\n            placeholder=\"Search by name...\"\n            size=\"sm\"\n            startContent={<SearchIcon className=\"text-default-300\" />}\n            value={filterValue}\n            variant=\"bordered\"\n            onClear={() => setFilterValue(\"\")}\n            onValueChange={onSearchChange}\n          />\n          <div className=\"flex gap-3\">\n            <Dropdown>\n              <DropdownTrigger className=\"hidden sm:flex\">\n                <Button\n                  endContent={<ChevronDownIcon className=\"text-small\" />}\n                  size=\"sm\"\n                  variant=\"flat\"\n                >\n                  Status\n                </Button>\n              </DropdownTrigger>\n              <DropdownMenu\n                disallowEmptySelection\n                aria-label=\"Table Columns\"\n                closeOnSelect={false}\n                selectedKeys={statusFilter}\n                selectionMode=\"multiple\"\n                onSelectionChange={setStatusFilter}\n              >\n                {statusOptions.map((status) => (\n                  <DropdownItem key={status.uid} className=\"capitalize\">\n                    {capitalize(status.name)}\n                  </DropdownItem>\n                ))}\n              </DropdownMenu>\n            </Dropdown>\n            <Dropdown>\n              <DropdownTrigger className=\"hidden sm:flex\">\n                <Button\n                  endContent={<ChevronDownIcon className=\"text-small\" />}\n                  size=\"sm\"\n                  variant=\"flat\"\n                >\n                  Columns\n                </Button>\n              </DropdownTrigger>\n              <DropdownMenu\n                disallowEmptySelection\n                aria-label=\"Table Columns\"\n                closeOnSelect={false}\n                selectedKeys={visibleColumns}\n                selectionMode=\"multiple\"\n                onSelectionChange={setVisibleColumns}\n              >\n                {columns.map((column) => (\n                  <DropdownItem key={column.uid} className=\"capitalize\">\n                    {capitalize(column.name)}\n                  </DropdownItem>\n                ))}\n              </DropdownMenu>\n            </Dropdown>\n            <Button className=\"bg-foreground text-background\" endContent={<PlusIcon />} size=\"sm\">\n              Add New\n            </Button>\n          </div>\n        </div>\n        <div className=\"flex justify-between items-center\">\n          <span className=\"text-default-400 text-small\">Total {users.length} users</span>\n          <label className=\"flex items-center text-default-400 text-small\">\n            Rows per page:\n            <select\n              className=\"bg-transparent outline-none text-default-400 text-small\"\n              onChange={onRowsPerPageChange}\n            >\n              <option value=\"5\">5</option>\n              <option value=\"10\">10</option>\n              <option value=\"15\">15</option>\n            </select>\n          </label>\n        </div>\n      </div>\n    );\n  }, [\n    filterValue,\n    statusFilter,\n    visibleColumns,\n    onSearchChange,\n    onRowsPerPageChange,\n    users.length,\n    hasSearchFilter,\n  ]);\n\n  const bottomContent = React.useMemo(() => {\n    return (\n      <div className=\"py-2 px-2 flex justify-between items-center\">\n        <Pagination\n          showControls\n          classNames={{\n            cursor: \"bg-foreground text-background\",\n          }}\n          color=\"default\"\n          isDisabled={hasSearchFilter}\n          page={page}\n          total={pages}\n          variant=\"light\"\n          onChange={setPage}\n        />\n        <span className=\"text-small text-default-400\">\n          {selectedKeys === \"all\"\n            ? \"All items selected\"\n            : \\`\\${selectedKeys.size} of \\${items.length} selected\\`}\n        </span>\n      </div>\n    );\n  }, [selectedKeys, items.length, page, pages, hasSearchFilter]);\n\n  const classNames = React.useMemo(\n    () => ({\n      wrapper: [\"max-h-[382px]\", \"max-w-3xl\"],\n      th: [\"bg-transparent\", \"text-default-500\", \"border-b\", \"border-divider\"],\n      td: [\n        // changing the rows border radius\n        // first\n        \"group-data-[first=true]/tr:first:before:rounded-none\",\n        \"group-data-[first=true]/tr:last:before:rounded-none\",\n        // middle\n        \"group-data-[middle=true]/tr:before:rounded-none\",\n        // last\n        \"group-data-[last=true]/tr:first:before:rounded-none\",\n        \"group-data-[last=true]/tr:last:before:rounded-none\",\n      ],\n    }),\n    [],\n  );\n\n  return (\n    <Table\n      isCompact\n      removeWrapper\n      aria-label=\"Example table with custom cells, pagination and sorting\"\n      bottomContent={bottomContent}\n      bottomContentPlacement=\"outside\"\n      checkboxesProps={{\n        classNames: {\n          wrapper: \"after:bg-foreground after:text-background text-background\",\n        },\n      }}\n      classNames={classNames}\n      selectedKeys={selectedKeys}\n      selectionMode=\"multiple\"\n      sortDescriptor={sortDescriptor}\n      topContent={topContent}\n      topContentPlacement=\"outside\"\n      onSelectionChange={setSelectedKeys}\n      onSortChange={setSortDescriptor}\n    >\n      <TableHeader columns={headerColumns}>\n        {(column) => (\n          <TableColumn\n            key={column.uid}\n            align={column.uid === \"actions\" ? \"center\" : \"start\"}\n            allowsSorting={column.sortable}\n          >\n            {column.name}\n          </TableColumn>\n        )}\n      </TableHeader>\n      <TableBody emptyContent={\"No users found\"} items={sortedItems}>\n        {(item) => (\n          <TableRow key={item.id}>\n            {(columnKey) => <TableCell>{renderCell(item, columnKey)}</TableCell>}\n          </TableRow>\n        )}\n      </TableBody>\n    </Table>\n  );\n}\n`;var ce=`import React, {SVGProps} from \"react\";\nimport {\n  Table,\n  TableHeader,\n  TableColumn,\n  TableBody,\n  TableRow,\n  TableCell,\n  Input,\n  Button,\n  DropdownTrigger,\n  Dropdown,\n  DropdownMenu,\n  DropdownItem,\n  Chip,\n  User,\n  Pagination,\n  Selection,\n  ChipProps,\n  SortDescriptor,\n} from \"@heroui/react\";\n\nexport type IconSvgProps = SVGProps<SVGSVGElement> & {\n  size?: number;\n};\n\nexport const columns = [\n  {name: \"ID\", uid: \"id\", sortable: true},\n  {name: \"NAME\", uid: \"name\", sortable: true},\n  {name: \"AGE\", uid: \"age\", sortable: true},\n  {name: \"ROLE\", uid: \"role\", sortable: true},\n  {name: \"TEAM\", uid: \"team\"},\n  {name: \"EMAIL\", uid: \"email\"},\n  {name: \"STATUS\", uid: \"status\", sortable: true},\n  {name: \"ACTIONS\", uid: \"actions\"},\n];\n\nexport const statusOptions = [\n  {name: \"Active\", uid: \"active\"},\n  {name: \"Paused\", uid: \"paused\"},\n  {name: \"Vacation\", uid: \"vacation\"},\n];\n\nexport const users = [\n  {\n    id: 1,\n    name: \"Tony Reichert\",\n    role: \"CEO\",\n    team: \"Management\",\n    status: \"active\",\n    age: \"29\",\n    avatar: \"https://i.pravatar.cc/150?u=a042581f4e29026024d\",\n    email: \"tony.reichert@example.com\",\n  },\n  {\n    id: 2,\n    name: \"Zoey Lang\",\n    role: \"Tech Lead\",\n    team: \"Development\",\n    status: \"paused\",\n    age: \"25\",\n    avatar: \"https://i.pravatar.cc/150?u=a042581f4e29026704d\",\n    email: \"zoey.lang@example.com\",\n  },\n  {\n    id: 3,\n    name: \"Jane Fisher\",\n    role: \"Sr. Dev\",\n    team: \"Development\",\n    status: \"active\",\n    age: \"22\",\n    avatar: \"https://i.pravatar.cc/150?u=a04258114e29026702d\",\n    email: \"jane.fisher@example.com\",\n  },\n  {\n    id: 4,\n    name: \"William Howard\",\n    role: \"C.M.\",\n    team: \"Marketing\",\n    status: \"vacation\",\n    age: \"28\",\n    avatar: \"https://i.pravatar.cc/150?u=a048581f4e29026701d\",\n    email: \"william.howard@example.com\",\n  },\n  {\n    id: 5,\n    name: \"Kristen Copper\",\n    role: \"S. Manager\",\n    team: \"Sales\",\n    status: \"active\",\n    age: \"24\",\n    avatar: \"https://i.pravatar.cc/150?u=a092581d4ef9026700d\",\n    email: \"kristen.cooper@example.com\",\n  },\n  {\n    id: 6,\n    name: \"Brian Kim\",\n    role: \"P. Manager\",\n    team: \"Management\",\n    age: \"29\",\n    avatar: \"https://i.pravatar.cc/150?u=a042581f4e29026024d\",\n    email: \"brian.kim@example.com\",\n    status: \"active\",\n  },\n  {\n    id: 7,\n    name: \"Michael Hunt\",\n    role: \"Designer\",\n    team: \"Design\",\n    status: \"paused\",\n    age: \"27\",\n    avatar: \"https://i.pravatar.cc/150?u=a042581f4e29027007d\",\n    email: \"michael.hunt@example.com\",\n  },\n  {\n    id: 8,\n    name: \"Samantha Brooks\",\n    role: \"HR Manager\",\n    team: \"HR\",\n    status: \"active\",\n    age: \"31\",\n    avatar: \"https://i.pravatar.cc/150?u=a042581f4e27027008d\",\n    email: \"samantha.brooks@example.com\",\n  },\n  {\n    id: 9,\n    name: \"Frank Harrison\",\n    role: \"F. Manager\",\n    team: \"Finance\",\n    status: \"vacation\",\n    age: \"33\",\n    avatar: \"https://i.pravatar.cc/150?img=4\",\n    email: \"frank.harrison@example.com\",\n  },\n  {\n    id: 10,\n    name: \"Emma Adams\",\n    role: \"Ops Manager\",\n    team: \"Operations\",\n    status: \"active\",\n    age: \"35\",\n    avatar: \"https://i.pravatar.cc/150?img=5\",\n    email: \"emma.adams@example.com\",\n  },\n  {\n    id: 11,\n    name: \"Brandon Stevens\",\n    role: \"Jr. Dev\",\n    team: \"Development\",\n    status: \"active\",\n    age: \"22\",\n    avatar: \"https://i.pravatar.cc/150?img=8\",\n    email: \"brandon.stevens@example.com\",\n  },\n  {\n    id: 12,\n    name: \"Megan Richards\",\n    role: \"P. Manager\",\n    team: \"Product\",\n    status: \"paused\",\n    age: \"28\",\n    avatar: \"https://i.pravatar.cc/150?img=10\",\n    email: \"megan.richards@example.com\",\n  },\n  {\n    id: 13,\n    name: \"Oliver Scott\",\n    role: \"S. Manager\",\n    team: \"Security\",\n    status: \"active\",\n    age: \"37\",\n    avatar: \"https://i.pravatar.cc/150?img=12\",\n    email: \"oliver.scott@example.com\",\n  },\n  {\n    id: 14,\n    name: \"Grace Allen\",\n    role: \"M. Specialist\",\n    team: \"Marketing\",\n    status: \"active\",\n    age: \"30\",\n    avatar: \"https://i.pravatar.cc/150?img=16\",\n    email: \"grace.allen@example.com\",\n  },\n  {\n    id: 15,\n    name: \"Noah Carter\",\n    role: \"IT Specialist\",\n    team: \"I. Technology\",\n    status: \"paused\",\n    age: \"31\",\n    avatar: \"https://i.pravatar.cc/150?img=15\",\n    email: \"noah.carter@example.com\",\n  },\n  {\n    id: 16,\n    name: \"Ava Perez\",\n    role: \"Manager\",\n    team: \"Sales\",\n    status: \"active\",\n    age: \"29\",\n    avatar: \"https://i.pravatar.cc/150?img=20\",\n    email: \"ava.perez@example.com\",\n  },\n  {\n    id: 17,\n    name: \"Liam Johnson\",\n    role: \"Data Analyst\",\n    team: \"Analysis\",\n    status: \"active\",\n    age: \"28\",\n    avatar: \"https://i.pravatar.cc/150?img=33\",\n    email: \"liam.johnson@example.com\",\n  },\n  {\n    id: 18,\n    name: \"Sophia Taylor\",\n    role: \"QA Analyst\",\n    team: \"Testing\",\n    status: \"active\",\n    age: \"27\",\n    avatar: \"https://i.pravatar.cc/150?img=29\",\n    email: \"sophia.taylor@example.com\",\n  },\n  {\n    id: 19,\n    name: \"Lucas Harris\",\n    role: \"Administrator\",\n    team: \"Information Technology\",\n    status: \"paused\",\n    age: \"32\",\n    avatar: \"https://i.pravatar.cc/150?img=50\",\n    email: \"lucas.harris@example.com\",\n  },\n  {\n    id: 20,\n    name: \"Mia Robinson\",\n    role: \"Coordinator\",\n    team: \"Operations\",\n    status: \"active\",\n    age: \"26\",\n    avatar: \"https://i.pravatar.cc/150?img=45\",\n    email: \"mia.robinson@example.com\",\n  },\n];\n\nexport function capitalize(s) {\n  return s ? s.charAt(0).toUpperCase() + s.slice(1).toLowerCase() : \"\";\n}\n\nexport const PlusIcon = ({size = 24, width, height, ...props}: IconSvgProps) => {\n  return (\n    <svg\n      aria-hidden=\"true\"\n      fill=\"none\"\n      focusable=\"false\"\n      height={size || height}\n      role=\"presentation\"\n      viewBox=\"0 0 24 24\"\n      width={size || width}\n      {...props}\n    >\n      <g\n        fill=\"none\"\n        stroke=\"currentColor\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth={1.5}\n      >\n        <path d=\"M6 12h12\" />\n        <path d=\"M12 18V6\" />\n      </g>\n    </svg>\n  );\n};\n\nexport const VerticalDotsIcon = ({size = 24, width, height, ...props}: IconSvgProps) => {\n  return (\n    <svg\n      aria-hidden=\"true\"\n      fill=\"none\"\n      focusable=\"false\"\n      height={size || height}\n      role=\"presentation\"\n      viewBox=\"0 0 24 24\"\n      width={size || width}\n      {...props}\n    >\n      <path\n        d=\"M12 10c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0-6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 12c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z\"\n        fill=\"currentColor\"\n      />\n    </svg>\n  );\n};\n\nexport const SearchIcon = (props: IconSvgProps) => {\n  return (\n    <svg\n      aria-hidden=\"true\"\n      fill=\"none\"\n      focusable=\"false\"\n      height=\"1em\"\n      role=\"presentation\"\n      viewBox=\"0 0 24 24\"\n      width=\"1em\"\n      {...props}\n    >\n      <path\n        d=\"M11.5 21C16.7467 21 21 16.7467 21 11.5C21 6.25329 16.7467 2 11.5 2C6.25329 2 2 6.25329 2 11.5C2 16.7467 6.25329 21 11.5 21Z\"\n        stroke=\"currentColor\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth=\"2\"\n      />\n      <path\n        d=\"M22 22L20 20\"\n        stroke=\"currentColor\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth=\"2\"\n      />\n    </svg>\n  );\n};\n\nexport const ChevronDownIcon = ({strokeWidth = 1.5, ...otherProps}: IconSvgProps) => {\n  return (\n    <svg\n      aria-hidden=\"true\"\n      fill=\"none\"\n      focusable=\"false\"\n      height=\"1em\"\n      role=\"presentation\"\n      viewBox=\"0 0 24 24\"\n      width=\"1em\"\n      {...otherProps}\n    >\n      <path\n        d=\"m19.92 8.95-6.52 6.52c-.77.77-2.03.77-2.8 0L4.08 8.95\"\n        stroke=\"currentColor\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeMiterlimit={10}\n        strokeWidth={strokeWidth}\n      />\n    </svg>\n  );\n};\n\nconst statusColorMap: Record<string, ChipProps[\"color\"]> = {\n  active: \"success\",\n  paused: \"danger\",\n  vacation: \"warning\",\n};\n\nconst INITIAL_VISIBLE_COLUMNS = [\"name\", \"role\", \"status\", \"actions\"];\n\ntype User = (typeof users)[0];\n\nexport default function App() {\n  const [filterValue, setFilterValue] = React.useState(\"\");\n  const [selectedKeys, setSelectedKeys] = React.useState<Selection>(new Set([]));\n  const [visibleColumns, setVisibleColumns] = React.useState<Selection>(\n    new Set(INITIAL_VISIBLE_COLUMNS),\n  );\n  const [statusFilter, setStatusFilter] = React.useState<Selection>(\"all\");\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\n  const [sortDescriptor, setSortDescriptor] = React.useState<SortDescriptor>({\n    column: \"age\",\n    direction: \"ascending\",\n  });\n  const [page, setPage] = React.useState(1);\n\n  const pages = Math.ceil(users.length / rowsPerPage);\n\n  const hasSearchFilter = Boolean(filterValue);\n\n  const headerColumns = React.useMemo(() => {\n    if (visibleColumns === \"all\") return columns;\n\n    return columns.filter((column) => Array.from(visibleColumns).includes(column.uid));\n  }, [visibleColumns]);\n\n  const filteredItems = React.useMemo(() => {\n    let filteredUsers = [...users];\n\n    if (hasSearchFilter) {\n      filteredUsers = filteredUsers.filter((user) =>\n        user.name.toLowerCase().includes(filterValue.toLowerCase()),\n      );\n    }\n    if (statusFilter !== \"all\" && Array.from(statusFilter).length !== statusOptions.length) {\n      filteredUsers = filteredUsers.filter((user) =>\n        Array.from(statusFilter).includes(user.status),\n      );\n    }\n\n    return filteredUsers;\n  }, [users, filterValue, statusFilter]);\n\n  const items = React.useMemo(() => {\n    const start = (page - 1) * rowsPerPage;\n    const end = start + rowsPerPage;\n\n    return filteredItems.slice(start, end);\n  }, [page, filteredItems, rowsPerPage]);\n\n  const sortedItems = React.useMemo(() => {\n    return [...items].sort((a: User, b: User) => {\n      const first = a[sortDescriptor.column as keyof User] as number;\n      const second = b[sortDescriptor.column as keyof User] as number;\n      const cmp = first < second ? -1 : first > second ? 1 : 0;\n\n      return sortDescriptor.direction === \"descending\" ? -cmp : cmp;\n    });\n  }, [sortDescriptor, items]);\n\n  const renderCell = React.useCallback((user: User, columnKey: React.Key) => {\n    const cellValue = user[columnKey as keyof User];\n\n    switch (columnKey) {\n      case \"name\":\n        return (\n          <User\n            avatarProps={{radius: \"full\", size: \"sm\", src: user.avatar}}\n            classNames={{\n              description: \"text-default-500\",\n            }}\n            description={user.email}\n            name={cellValue}\n          >\n            {user.email}\n          </User>\n        );\n      case \"role\":\n        return (\n          <div className=\"flex flex-col\">\n            <p className=\"text-bold text-small capitalize\">{cellValue}</p>\n            <p className=\"text-bold text-tiny capitalize text-default-500\">{user.team}</p>\n          </div>\n        );\n      case \"status\":\n        return (\n          <Chip\n            className=\"capitalize border-none gap-1 text-default-600\"\n            color={statusColorMap[user.status]}\n            size=\"sm\"\n            variant=\"dot\"\n          >\n            {cellValue}\n          </Chip>\n        );\n      case \"actions\":\n        return (\n          <div className=\"relative flex justify-end items-center gap-2\">\n            <Dropdown className=\"bg-background border-1 border-default-200\">\n              <DropdownTrigger>\n                <Button isIconOnly radius=\"full\" size=\"sm\" variant=\"light\">\n                  <VerticalDotsIcon className=\"text-default-400\" />\n                </Button>\n              </DropdownTrigger>\n              <DropdownMenu>\n                <DropdownItem key=\"view\">View</DropdownItem>\n                <DropdownItem key=\"edit\">Edit</DropdownItem>\n                <DropdownItem key=\"delete\">Delete</DropdownItem>\n              </DropdownMenu>\n            </Dropdown>\n          </div>\n        );\n      default:\n        return cellValue;\n    }\n  }, []);\n\n  const onRowsPerPageChange = React.useCallback((e: React.ChangeEvent<HTMLSelectElement>) => {\n    setRowsPerPage(Number(e.target.value));\n    setPage(1);\n  }, []);\n\n  const onSearchChange = React.useCallback((value?: string) => {\n    if (value) {\n      setFilterValue(value);\n      setPage(1);\n    } else {\n      setFilterValue(\"\");\n    }\n  }, []);\n\n  const topContent = React.useMemo(() => {\n    return (\n      <div className=\"flex flex-col gap-4\">\n        <div className=\"flex justify-between gap-3 items-end\">\n          <Input\n            isClearable\n            classNames={{\n              base: \"w-full sm:max-w-[44%]\",\n              inputWrapper: \"border-1\",\n            }}\n            placeholder=\"Search by name...\"\n            size=\"sm\"\n            startContent={<SearchIcon className=\"text-default-300\" />}\n            value={filterValue}\n            variant=\"bordered\"\n            onClear={() => setFilterValue(\"\")}\n            onValueChange={onSearchChange}\n          />\n          <div className=\"flex gap-3\">\n            <Dropdown>\n              <DropdownTrigger className=\"hidden sm:flex\">\n                <Button\n                  endContent={<ChevronDownIcon className=\"text-small\" />}\n                  size=\"sm\"\n                  variant=\"flat\"\n                >\n                  Status\n                </Button>\n              </DropdownTrigger>\n              <DropdownMenu\n                disallowEmptySelection\n                aria-label=\"Table Columns\"\n                closeOnSelect={false}\n                selectedKeys={statusFilter}\n                selectionMode=\"multiple\"\n                onSelectionChange={setStatusFilter}\n              >\n                {statusOptions.map((status) => (\n                  <DropdownItem key={status.uid} className=\"capitalize\">\n                    {capitalize(status.name)}\n                  </DropdownItem>\n                ))}\n              </DropdownMenu>\n            </Dropdown>\n            <Dropdown>\n              <DropdownTrigger className=\"hidden sm:flex\">\n                <Button\n                  endContent={<ChevronDownIcon className=\"text-small\" />}\n                  size=\"sm\"\n                  variant=\"flat\"\n                >\n                  Columns\n                </Button>\n              </DropdownTrigger>\n              <DropdownMenu\n                disallowEmptySelection\n                aria-label=\"Table Columns\"\n                closeOnSelect={false}\n                selectedKeys={visibleColumns}\n                selectionMode=\"multiple\"\n                onSelectionChange={setVisibleColumns}\n              >\n                {columns.map((column) => (\n                  <DropdownItem key={column.uid} className=\"capitalize\">\n                    {capitalize(column.name)}\n                  </DropdownItem>\n                ))}\n              </DropdownMenu>\n            </Dropdown>\n            <Button className=\"bg-foreground text-background\" endContent={<PlusIcon />} size=\"sm\">\n              Add New\n            </Button>\n          </div>\n        </div>\n        <div className=\"flex justify-between items-center\">\n          <span className=\"text-default-400 text-small\">Total {users.length} users</span>\n          <label className=\"flex items-center text-default-400 text-small\">\n            Rows per page:\n            <select\n              className=\"bg-transparent outline-none text-default-400 text-small\"\n              onChange={onRowsPerPageChange}\n            >\n              <option value=\"5\">5</option>\n              <option value=\"10\">10</option>\n              <option value=\"15\">15</option>\n            </select>\n          </label>\n        </div>\n      </div>\n    );\n  }, [\n    filterValue,\n    statusFilter,\n    visibleColumns,\n    onSearchChange,\n    onRowsPerPageChange,\n    users.length,\n    hasSearchFilter,\n  ]);\n\n  const bottomContent = React.useMemo(() => {\n    return (\n      <div className=\"py-2 px-2 flex justify-between items-center\">\n        <Pagination\n          showControls\n          classNames={{\n            cursor: \"bg-foreground text-background\",\n          }}\n          color=\"default\"\n          isDisabled={hasSearchFilter}\n          page={page}\n          total={pages}\n          variant=\"light\"\n          onChange={setPage}\n        />\n        <span className=\"text-small text-default-400\">\n          {selectedKeys === \"all\"\n            ? \"All items selected\"\n            : \\`\\${selectedKeys.size} of \\${items.length} selected\\`}\n        </span>\n      </div>\n    );\n  }, [selectedKeys, items.length, page, pages, hasSearchFilter]);\n\n  const classNames = React.useMemo(\n    () => ({\n      wrapper: [\"max-h-[382px]\", \"max-w-3xl\"],\n      th: [\"bg-transparent\", \"text-default-500\", \"border-b\", \"border-divider\"],\n      td: [\n        // changing the rows border radius\n        // first\n        \"group-data-[first=true]/tr:first:before:rounded-none\",\n        \"group-data-[first=true]/tr:last:before:rounded-none\",\n        // middle\n        \"group-data-[middle=true]/tr:before:rounded-none\",\n        // last\n        \"group-data-[last=true]/tr:first:before:rounded-none\",\n        \"group-data-[last=true]/tr:last:before:rounded-none\",\n      ],\n    }),\n    [],\n  );\n\n  return (\n    <Table\n      isCompact\n      removeWrapper\n      aria-label=\"Example table with custom cells, pagination and sorting\"\n      bottomContent={bottomContent}\n      bottomContentPlacement=\"outside\"\n      checkboxesProps={{\n        classNames: {\n          wrapper: \"after:bg-foreground after:text-background text-background\",\n        },\n      }}\n      classNames={classNames}\n      selectedKeys={selectedKeys}\n      selectionMode=\"multiple\"\n      sortDescriptor={sortDescriptor}\n      topContent={topContent}\n      topContentPlacement=\"outside\"\n      onSelectionChange={setSelectedKeys}\n      onSortChange={setSortDescriptor}\n    >\n      <TableHeader columns={headerColumns}>\n        {(column) => (\n          <TableColumn\n            key={column.uid}\n            align={column.uid === \"actions\" ? \"center\" : \"start\"}\n            allowsSorting={column.sortable}\n          >\n            {column.name}\n          </TableColumn>\n        )}\n      </TableHeader>\n      <TableBody emptyContent={\"No users found\"} items={sortedItems}>\n        {(item) => (\n          <TableRow key={item.id}>\n            {(columnKey) => <TableCell>{renderCell(item, columnKey)}</TableCell>}\n          </TableRow>\n        )}\n      </TableBody>\n    </Table>\n  );\n}\n`;var Ra={\"/App.jsx\":ie},Aa={\"/App.tsx\":ce},de={...Ra,...Aa};var ue=`import {Table, TableBody, TableCell, TableColumn, TableHeader, TableRow} from \"@nextui-org/react\";\n\nfunction generateRows(count) {\n  return Array.from({length: count}, (_, index) => ({\n    key: index.toString(),\n    name: \\`Item \\${index + 1}\\`,\n    value: \\`Value \\${index + 1}\\`,\n  }));\n}\n\nexport default function App() {\n  const rows = generateRows(500);\n  const columns = [\n    {key: \"name\", label: \"Name\"},\n    {key: \"value\", label: \"Value\"},\n  ];\n\n  return (\n    <Table\n      isVirtualized\n      aria-label=\"Example of virtualized table with a large dataset\"\n      maxTableHeight={500}\n      rowHeight={40}\n    >\n      <TableHeader columns={columns}>\n        {(column) => <TableColumn key={column.key}>{column.label}</TableColumn>}\n      </TableHeader>\n      <TableBody items={rows}>\n        {(item) => (\n          <TableRow key={item.key}>\n            {(columnKey) => <TableCell>{item[columnKey]}</TableCell>}\n          </TableRow>\n        )}\n      </TableBody>\n    </Table>\n  );\n}\n`;var Da={\"/App.jsx\":ue},me={...Da};var pe=`import {Table, TableBody, TableCell, TableColumn, TableHeader, TableRow} from \"@nextui-org/react\";\n\nfunction generateRows(count) {\n  return Array.from({length: count}, (_, index) => ({\n    key: index.toString(),\n    name: \\`Item \\${index + 1}\\`,\n    value: \\`Value \\${index + 1}\\`,\n  }));\n}\n\nexport default function App() {\n  const rows = generateRows(500);\n  const columns = [\n    {key: \"name\", label: \"Name\"},\n    {key: \"value\", label: \"Value\"},\n  ];\n\n  return (\n    <Table\n      isVirtualized\n      aria-label=\"Example of virtualized table with a large dataset\"\n      maxTableHeight={500}\n      rowHeight={70}\n    >\n      <TableHeader columns={columns}>\n        {(column) => <TableColumn key={column.key}>{column.label}</TableColumn>}\n      </TableHeader>\n      <TableBody items={rows}>\n        {(item) => (\n          <TableRow key={item.key}>\n            {(columnKey) => <TableCell>{item[columnKey]}</TableCell>}\n          </TableRow>\n        )}\n      </TableBody>\n    </Table>\n  );\n}\n`;var La={\"/App.jsx\":pe},he={...La};var be=`import {Table, TableBody, TableCell, TableColumn, TableHeader, TableRow} from \"@nextui-org/react\";\n\nfunction generateRows(count) {\n  return Array.from({length: count}, (_, index) => ({\n    key: index.toString(),\n    name: \\`Item \\${index + 1}\\`,\n    value: \\`Value \\${index + 1}\\`,\n  }));\n}\n\nexport default function App() {\n  const rows = generateRows(500);\n  const columns = [\n    {key: \"name\", label: \"Name\"},\n    {key: \"value\", label: \"Value\"},\n  ];\n\n  return (\n    <Table\n      isVirtualized\n      aria-label=\"Example of virtualized table with a large dataset\"\n      maxTableHeight={300}\n      rowHeight={40}\n    >\n      <TableHeader columns={columns}>\n        {(column) => <TableColumn key={column.key}>{column.label}</TableColumn>}\n      </TableHeader>\n      <TableBody items={rows}>\n        {(item) => (\n          <TableRow key={item.key}>\n            {(columnKey) => <TableCell>{item[columnKey]}</TableCell>}\n          </TableRow>\n        )}\n      </TableBody>\n    </Table>\n  );\n}\n`;var Na={\"/App.jsx\":be},ge={...Na};var Te=`import {Table, TableBody, TableCell, TableColumn, TableHeader, TableRow} from \"@nextui-org/react\";\n\nfunction generateRows(count) {\n  return Array.from({length: count}, (_, index) => ({\n    key: index.toString(),\n    name: \\`Item \\${index + 1}\\`,\n    value: \\`Value \\${index + 1}\\`,\n  }));\n}\n\nexport default function App() {\n  const rows = generateRows(10000);\n  const columns = [\n    {key: \"name\", label: \"Name\"},\n    {key: \"value\", label: \"Value\"},\n  ];\n\n  return (\n    <Table\n      isVirtualized\n      aria-label=\"Example of virtualized table with a large dataset\"\n      maxTableHeight={500}\n      rowHeight={40}\n    >\n      <TableHeader columns={columns}>\n        {(column) => <TableColumn key={column.key}>{column.label}</TableColumn>}\n      </TableHeader>\n      <TableBody items={rows}>\n        {(item) => (\n          <TableRow key={item.key}>\n            {(columnKey) => <TableCell>{item[columnKey]}</TableCell>}\n          </TableRow>\n        )}\n      </TableBody>\n    </Table>\n  );\n}\n`;var Ha={\"/App.jsx\":Te},fe={...Ha};var l={usage:f,dynamic:C,empty:v,withoutHeader:k,withoutWrapper:R,customCells:D,striped:L,singleSelection:N,multipleSelection:H,disallowEmptySelection:V,controlledSelection:W,disabledRows:O,selectionBehavior:G,rowActions:J,sorting:$,loadMore:Y,paginated:X,asyncPagination:ae,infinitePagination:oe,useCase:se,customStyles:de,virtualization:me,virtualizationCustomItemHeight:he,virtualizationCustomMaxTableHeight:ge,virtualizationTenThousand:fe};var Ka={title:\"Table\",description:\"Tables are used to display tabular data using rows and columns. They allow users to quickly scan, sort, compare, and take action on large amounts of data.\"};function ye(o){let a={a:\"a\",blockquote:\"blockquote\",code:\"code\",h1:\"h1\",h2:\"h2\",h3:\"h3\",h4:\"h4\",hr:\"hr\",li:\"li\",p:\"p\",pre:\"pre\",strong:\"strong\",ul:\"ul\",...o.components},{APITable:r,CarbonAd:c,CodeDemo:t,ComponentLinks:m,ImportTabs:p,Kbd:i,PackageManagers:d,Spacer:s}=a;return r||n(\"APITable\",!0),c||n(\"CarbonAd\",!0),t||n(\"CodeDemo\",!0),m||n(\"ComponentLinks\",!0),p||n(\"ImportTabs\",!0),i||n(\"Kbd\",!0),d||n(\"PackageManagers\",!0),s||n(\"Spacer\",!0),(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(a.h1,{id:\"table\",children:\"Table\"}),`\n`,(0,e.jsx)(a.p,{children:\"Tables are used to display tabular data using rows and columns. They allow users to quickly scan, sort, compare, and take action on large amounts of data.\"}),`\n`,(0,e.jsx)(m,{component:\"table\",reactHook:\"useTable\"}),`\n`,(0,e.jsx)(a.hr,{}),`\n`,(0,e.jsx)(c,{}),`\n`,(0,e.jsx)(a.h2,{id:\"installation\",children:\"Installation\"}),`\n`,(0,e.jsx)(d,{showGlobalInstallWarning:!0,commands:{cli:\"npx heroui-cli@latest add table\",npm:\"npm install @heroui/table\",yarn:\"yarn add @heroui/table\",pnpm:\"pnpm add @heroui/table\",bun:\"bun add @heroui/table\"}}),`\n`,(0,e.jsx)(a.h2,{id:\"import\",children:\"Import\"}),`\n`,(0,e.jsx)(a.p,{children:\"HeroUI exports 6 table-related components:\"}),`\n`,(0,e.jsxs)(a.ul,{children:[`\n`,(0,e.jsxs)(a.li,{children:[(0,e.jsx)(a.strong,{children:\"Table\"}),\": The main component to display a table.\"]}),`\n`,(0,e.jsxs)(a.li,{children:[(0,e.jsx)(a.strong,{children:\"TableHeader\"}),\": The header of the table.\"]}),`\n`,(0,e.jsxs)(a.li,{children:[(0,e.jsx)(a.strong,{children:\"TableBody\"}),\": The body of the table.\"]}),`\n`,(0,e.jsxs)(a.li,{children:[(0,e.jsx)(a.strong,{children:\"TableColumn\"}),\": The column of the table.\"]}),`\n`,(0,e.jsxs)(a.li,{children:[(0,e.jsx)(a.strong,{children:\"TableRow\"}),\": The row of the table.\"]}),`\n`,(0,e.jsxs)(a.li,{children:[(0,e.jsx)(a.strong,{children:\"TableCell\"}),\": The cell of the table.\"]}),`\n`]}),`\n`,(0,e.jsx)(p,{commands:{main:`import {\n  Table,\n  TableHeader,\n  TableBody,\n  TableColumn,\n  TableRow,\n  TableCell\n} from \"@heroui/react\";`,individual:`import {\n  Table,\n  TableHeader,\n  TableBody,\n  TableColumn,\n  TableRow,\n  TableCell\n} from \"@heroui/table\";`}}),`\n`,(0,e.jsx)(a.h2,{id:\"usage\",children:\"Usage\"}),`\n`,(0,e.jsx)(t,{title:\"Usage\",files:l.usage}),`\n`,(0,e.jsx)(a.h3,{id:\"dynamic\",children:\"Dynamic\"}),`\n`,(0,e.jsxs)(a.p,{children:[\"To render a table dynamically, you can use the \",(0,e.jsx)(a.code,{children:\"columns\"}),\" prop to pass the columns and \",(0,e.jsx)(a.code,{children:\"items\"}),\" prop to pass the data.\"]}),`\n`,(0,e.jsx)(t,{title:\"Dynamic\",files:l.dynamic}),`\n`,(0,e.jsx)(a.h4,{id:\"why-not-array-map\",children:\"Why not array map?\"}),`\n`,(0,e.jsxs)(a.p,{children:[\"Using the \",(0,e.jsx)(a.code,{children:\"items\"}),\" prop and providing a render function allows \",(0,e.jsx)(a.a,{href:\"https://react-spectrum.adobe.com/react-aria/index.html\",children:\"react-aria\"}),`\nto automatically cache the results of rendering each item and avoid re-rendering all items in the\ncollection when only one of them changes. This has big performance benefits for large\ncollections.`]}),`\n`,(0,e.jsxs)(a.p,{children:[\"You could also use \",(0,e.jsx)(a.code,{children:\"Array.map\"}),\" to render the items, but it will not be as performant as using the \",(0,e.jsx)(a.code,{children:\"items\"}),\" and \",(0,e.jsx)(a.code,{children:\"columns\"}),\" prop.\"]}),`\n`,(0,e.jsx)(a.p,{children:\"Example:\"}),`\n`,(0,e.jsx)(a.pre,{children:(0,e.jsx)(a.code,{className:\"language-jsx\",children:`import {Table, TableHeader, TableColumn, TableBody, TableRow, TableCell, getKeyValue} from \"@heroui/react\";\n\nconst rows = [...];\n\nconst columns = [...];\n\nexport default function App() {\n  return (\n    <Table aria-label=\"Example table with dynamic content\">\n      <TableHeader>\n        {columns.map((column) =>\n          <TableColumn key={column.key}>{column.label}</TableColumn>\n        )}\n      </TableHeader>\n      <TableBody>\n        {rows.map((row) =>\n          <TableRow key={row.key}>\n            {(columnKey) => <TableCell>{getKeyValue(row, columnKey)}</TableCell>}\n          </TableRow>\n        )}\n      </TableBody>\n    </Table>\n  );\n}\n`})}),`\n`,(0,e.jsxs)(a.blockquote,{children:[`\n`,(0,e.jsxs)(a.p,{children:[(0,e.jsx)(a.strong,{children:\"Note\"}),\": To learn more about React Aria collections and how to use them, please check \",(0,e.jsx)(a.a,{href:\"https://react-spectrum.adobe.com/react-stately/collections.html\",children:\"React Aria Collections\"}),\".\"]}),`\n`]}),`\n`,(0,e.jsx)(a.h3,{id:\"empty-state\",children:\"Empty State\"}),`\n`,(0,e.jsxs)(a.p,{children:[\"You can use the \",(0,e.jsx)(a.code,{children:\"emptyContent\"}),\" prop to render a custom component when the table is empty.\"]}),`\n`,(0,e.jsx)(t,{title:\"Empty State\",highlightedLines:\"11\",files:l.empty}),`\n`,(0,e.jsx)(a.h3,{id:\"without-header\",children:\"Without Header\"}),`\n`,(0,e.jsxs)(a.p,{children:[\"In case you don't want to render the header, you can use the \",(0,e.jsx)(a.code,{children:\"hideHeader\"}),\" prop.\"]}),`\n`,(0,e.jsx)(t,{title:\"Without Header\",files:l.withoutHeader}),`\n`,(0,e.jsx)(a.h3,{id:\"without-wrapper\",children:\"Without Wrapper\"}),`\n`,(0,e.jsxs)(a.p,{children:[\"By default the table is wrapped in a \",(0,e.jsx)(a.code,{children:\"div\"}),` element with a small shadow effect and a border radius.\nYou can use the `,(0,e.jsx)(a.code,{children:\"removeWrapper\"}),\" prop to remove the wrapper and only render the table.\"]}),`\n`,(0,e.jsx)(t,{title:\"Without Wrapper\",files:l.withoutWrapper}),`\n`,(0,e.jsx)(a.h3,{id:\"custom-cells\",children:\"Custom Cells\"}),`\n`,(0,e.jsxs)(a.p,{children:[\"You can render any component inside the table cell. In the example below, we are rendering different components according to the \",(0,e.jsx)(a.code,{children:\"key\"}),\" of the column.\"]}),`\n`,(0,e.jsx)(t,{title:\"Custom Cells\",files:l.customCells}),`\n`,(0,e.jsx)(a.h3,{id:\"striped-rows\",children:\"Striped Rows\"}),`\n`,(0,e.jsxs)(a.p,{children:[\"You can use the \",(0,e.jsx)(a.code,{children:\"isStriped\"}),\" prop to render striped rows.\"]}),`\n`,(0,e.jsx)(t,{title:\"Striped Rows\",files:l.striped}),`\n`,(0,e.jsx)(a.h3,{id:\"single-row-selection\",children:\"Single Row Selection\"}),`\n`,(0,e.jsxs)(a.p,{children:[\"It is possible to make the table rows selectable. To do so, you can use the \",(0,e.jsx)(a.code,{children:\"selectionMode\"}),\" prop. Use \",(0,e.jsx)(a.code,{children:\"defaultSelectedKeys\"}),` to\nprovide a default set of selected rows.`]}),`\n`,(0,e.jsx)(t,{title:\"Single Row Selection\",files:l.singleSelection}),`\n`,(0,e.jsxs)(a.blockquote,{children:[`\n`,(0,e.jsxs)(a.p,{children:[(0,e.jsx)(a.strong,{children:\"Note\"}),\": The value of the selected keys must match the key prop of the row.\"]}),`\n`]}),`\n`,(0,e.jsx)(a.h3,{id:\"multiple-row-selection\",children:\"Multiple Row Selection\"}),`\n`,(0,e.jsxs)(a.p,{children:[\"You can also select multiple rows by using the \",(0,e.jsx)(a.code,{children:'selectionMode=\"multiple\"'}),\" prop. Use \",(0,e.jsx)(a.code,{children:\"defaultSelectedKeys\"}),` to\nprovide a default set of selected rows.`]}),`\n`,(0,e.jsx)(t,{title:\"Multiple Row Selection\",files:l.multipleSelection}),`\n`,(0,e.jsxs)(a.blockquote,{children:[`\n`,(0,e.jsxs)(a.p,{children:[(0,e.jsx)(a.strong,{children:\"Note\"}),\": When using multiple selection, selectable checkboxes will be rendered in the first column of the table.\"]}),`\n`]}),`\n`,(0,e.jsx)(a.h3,{id:\"disallow-empty-selection\",children:\"Disallow Empty Selection\"}),`\n`,(0,e.jsxs)(a.p,{children:[\"Table also supports a \",(0,e.jsx)(a.code,{children:\"disallowEmptySelection\"}),` prop which forces the user to have at least one\nrow in the Table selected at all times. In this mode, if a single row is selected and the\nuser presses it, it will not be deselected.`]}),`\n`,(0,e.jsx)(t,{title:\"Disallow Empty Selection\",files:l.disallowEmptySelection}),`\n`,(0,e.jsx)(a.h3,{id:\"controlled-selection\",children:\"Controlled Selection\"}),`\n`,(0,e.jsxs)(a.p,{children:[\"To programmatically control row selection, use the \",(0,e.jsx)(a.code,{children:\"selectedKeys\"}),\" prop paired with the \",(0,e.jsx)(a.code,{children:\"onSelectionChange\"}),` callback.\nThe key prop from the selected rows will be passed into the callback when the row is pressed, allowing you to update state accordingly.`]}),`\n`,(0,e.jsx)(t,{title:\"Controlled Selection\",files:l.controlledSelection}),`\n`,(0,e.jsxs)(a.blockquote,{children:[`\n`,(0,e.jsxs)(a.p,{children:[(0,e.jsx)(a.strong,{children:\"Note\"}),\": The \",(0,e.jsx)(a.code,{children:\"selectedKeys\"}),\" property must be a \",(0,e.jsx)(a.code,{children:\"Set\"}),\" object.\"]}),`\n`]}),`\n`,(0,e.jsx)(a.h3,{id:\"disabled-rows\",children:\"Disabled Rows\"}),`\n`,(0,e.jsxs)(a.p,{children:[\"You can disable rows by using the \",(0,e.jsx)(a.code,{children:\"disabledKeys\"}),` prop. This will prevent rows from being\nselectable as shown in the example below.`]}),`\n`,(0,e.jsx)(t,{title:\"Disabled Rows\",files:l.disabledRows}),`\n`,(0,e.jsx)(a.h3,{id:\"selection-behavior\",children:\"Selection Behavior\"}),`\n`,(0,e.jsxs)(a.p,{children:[\"By default, Table uses the \",(0,e.jsx)(a.code,{children:\"toggle\"}),` selection behavior, which behaves like a checkbox group:\nclicking, tapping, or pressing the `,(0,e.jsx)(i,{children:\"Space\"}),\" or \",(0,e.jsx)(i,{children:\"Enter\"}),\" keys toggles selection for the focused row.\"]}),`\n`,(0,e.jsxs)(a.p,{children:[\"When the \",(0,e.jsx)(a.code,{children:\"selectionBehavior\"}),\" prop is set to \",(0,e.jsx)(a.code,{children:\"replace\"}),`, clicking a row with the mouse replaces\nthe selection with only that row. Using the arrow keys moves both focus and selection.\nTo select multiple rows, modifier keys such as `,(0,e.jsx)(i,{children:\"Ctrl\"}),\", \",(0,e.jsx)(i,{children:\"Cmd\"}),\", and \",(0,e.jsx)(i,{children:\"Shift\"}),\" can be used.\"]}),`\n`,(0,e.jsx)(t,{title:\"Selection Behavior\",files:l.selectionBehavior}),`\n`,(0,e.jsx)(a.h3,{id:\"rows-actions\",children:\"Rows Actions\"}),`\n`,(0,e.jsxs)(a.p,{children:[\"Table supports rows via the \",(0,e.jsx)(a.code,{children:\"onRowAction\"}),\" callback. In the default \",(0,e.jsx)(a.code,{children:\"toggle\"}),` selection\nbehavior, when nothing is selected, clicking or tapping the row triggers the row action.`]}),`\n`,(0,e.jsxs)(a.p,{children:[\"This behavior is slightly different in the \",(0,e.jsx)(a.code,{children:\"replace\"}),` selection behavior, where single\nclicking selects the row and actions are performed via double click.`]}),`\n`,(0,e.jsx)(t,{title:\"Rows Actions\",files:l.rowActions}),`\n`,(0,e.jsx)(a.h3,{id:\"sorting-rows\",children:\"Sorting Rows\"}),`\n`,(0,e.jsxs)(a.p,{children:[\"Table supports sorting its data when a column header is pressed. To designate that a \",(0,e.jsx)(a.code,{children:\"Column\"}),`\nshould support sorting, provide it with the `,(0,e.jsx)(a.code,{children:\"allowsSorting\"}),\" prop.\"]}),`\n`,(0,e.jsxs)(a.p,{children:[\"Table accepts a \",(0,e.jsx)(a.code,{children:\"sortDescriptor\"}),` prop that defines the current column key to sort by\nand the sort direction (ascending/descending). When the user presses a sortable column\nheader, the column's key and sort direction is passed into the `,(0,e.jsx)(a.code,{children:\"onSortChange\"}),` callback,\nallowing you to update the `,(0,e.jsx)(a.code,{children:\"sortDescriptor\"}),\" appropriately.\"]}),`\n`,(0,e.jsxs)(a.p,{children:[\"We recommend using the \",(0,e.jsx)(a.code,{children:\"useAsyncList\"}),\" hook from \",(0,e.jsx)(a.a,{href:\"https://react-spectrum.adobe.com/react-stately/useAsyncList.html\",children:\"@react-stately/data\"}),` to manage the data sorting. So make\nsure to install it before using the sorting feature.`]}),`\n`,(0,e.jsx)(d,{commands:{npm:\"npm install @react-stately/data\",yarn:\"yarn add @react-stately/data\",pnpm:\"pnpm add @react-stately/data\",bun:\"bun add @react-stately/data\"}}),`\n`,(0,e.jsx)(a.pre,{children:(0,e.jsx)(a.code,{className:\"language-jsx\",children:`import {useAsyncList} from \"@react-stately/data\";\n`})}),`\n`,(0,e.jsx)(s,{y:2}),`\n`,(0,e.jsx)(t,{asIframe:!0,title:\"Sorting Rows\",resizeEnabled:!1,displayMode:\"visible\",files:l.sorting,previewHeight:\"520px\",iframeSrc:\"/examples/table/sorting\"}),`\n`,(0,e.jsxs)(a.blockquote,{children:[`\n`,(0,e.jsxs)(a.p,{children:[\"Note that we passed the \",(0,e.jsx)(a.code,{children:\"isLoading\"}),\" and \",(0,e.jsx)(a.code,{children:\"loadingContent\"}),\" props to \",(0,e.jsx)(a.code,{children:\"TableBody\"}),` to\nrender a loading state while the data is being fetched.`]}),`\n`]}),`\n`,(0,e.jsx)(a.h3,{id:\"loading-more-data\",children:\"Loading more data\"}),`\n`,(0,e.jsx)(a.p,{children:`Table allows you to add a custom component at the end of the table, on the example below we are\nusing a button to load more data.`}),`\n`,(0,e.jsx)(t,{asIframe:!0,title:\"Loading more data\",resizeEnabled:!1,displayMode:\"visible\",files:l.loadMore,highlightedLines:\"36-45\",previewHeight:\"620px\",iframeSrc:\"/examples/table/load-more\"}),`\n`,(0,e.jsxs)(a.blockquote,{children:[`\n`,(0,e.jsxs)(a.p,{children:[(0,e.jsx)(a.strong,{children:\"Note\"}),\": We passed the \",(0,e.jsx)(a.code,{children:\"isHeaderSticky\"}),\" to the \",(0,e.jsx)(a.code,{children:\"Table\"}),\" component to make the header sticky.\"]}),`\n`]}),`\n`,(0,e.jsx)(a.h3,{id:\"paginated-table\",children:\"Paginated Table\"}),`\n`,(0,e.jsxs)(a.p,{children:[\"You can use the \",(0,e.jsx)(a.a,{href:\"/components/pagination\",children:\"Pagination\"}),\" component to paginate the table.\"]}),`\n`,(0,e.jsx)(t,{title:\"Paginated Table\",files:l.paginated}),`\n`,(0,e.jsx)(a.h3,{id:\"async-pagination\",children:\"Async Pagination\"}),`\n`,(0,e.jsxs)(a.p,{children:[\"It is also possible to use the \",(0,e.jsx)(a.a,{href:\"/components/pagination\",children:\"Pagination\"}),\" component to paginate the table asynchronously. To fetch the data, we are using the \",(0,e.jsx)(a.code,{children:\"useSWR\"}),\" hook from \",(0,e.jsx)(a.a,{href:\"https://swr.vercel.app/docs/pagination\",children:\"SWR\"}),\".\"]}),`\n`,(0,e.jsx)(t,{asIframe:!0,title:\"Async Paginated Table\",resizeEnabled:!1,files:l.asyncPagination,previewHeight:\"600px\",displayMode:\"visible\",iframeSrc:\"/examples/table/async-pagination\"}),`\n`,(0,e.jsx)(a.h3,{id:\"infinite-pagination\",children:\"Infinite Pagination\"}),`\n`,(0,e.jsxs)(a.p,{children:[\"Table also supports infinite pagination. To do so, you can use the \",(0,e.jsx)(a.code,{children:\"useAsyncList\"}),\" hook from \",(0,e.jsx)(a.a,{href:\"https://react-spectrum.adobe.com/react-stately/useAsyncList.html\",children:\"@react-stately/data\"}),` and\n`,(0,e.jsx)(a.a,{href:\"https://www.npmjs.com/package/@heroui/use-infinite-scroll\",children:\"@heroui/use-infinite-scroll\"}),\" hook.\"]}),`\n`,(0,e.jsx)(d,{commands:{npm:\"npm install @react-stately/data @heroui/use-infinite-scroll\",yarn:\"yarn add @react-stately/data @heroui/use-infinite-scroll\",pnpm:\"pnpm add @react-stately/data @heroui/use-infinite-scroll\",bun:\"bun add @react-stately/data @heroui/use-infinite-scroll\"}}),`\n`,(0,e.jsx)(a.pre,{children:(0,e.jsx)(a.code,{className:\"language-jsx\",children:`import { useInfiniteScroll } from \"@heroui/use-infinite-scroll\";\nimport { useAsyncList } from \"@react-stately/data\";\n`})}),`\n`,(0,e.jsx)(s,{y:2}),`\n`,(0,e.jsx)(t,{asIframe:!0,title:\"Infinite Paginated Table\",resizeEnabled:!1,files:l.infinitePagination,previewHeight:\"620px\",displayMode:\"visible\",showPreview:!0,showOpenInCodeSandbox:!1,iframeSrc:\"/examples/table/infinite-pagination\"}),`\n`,(0,e.jsx)(a.h3,{id:\"virtualization\",children:\"Virtualization\"}),`\n`,(0,e.jsxs)(a.p,{children:[\"Table supports virtualization, which allows efficient rendering of large lists by only rendering items that are visible in the viewport. You can enable virtualization by setting the \",(0,e.jsx)(a.code,{children:\"isVirtualized\"}),\" prop to \",(0,e.jsx)(a.code,{children:\"true\"}),\".\"]}),`\n`,(0,e.jsx)(t,{title:\"Virtualization\",files:l.virtualization}),`\n`,(0,e.jsxs)(a.blockquote,{children:[`\n`,(0,e.jsxs)(a.p,{children:[(0,e.jsx)(a.strong,{children:\"Note\"}),\": The virtualization strategy is based on the \",(0,e.jsx)(a.a,{href:\"https://tanstack.com/virtual/latest\",children:\"@tanstack/react-virtual\"}),\" package, which provides efficient rendering of large lists by only rendering items that are visible in the viewport.\"]}),`\n`]}),`\n`,(0,e.jsx)(a.h4,{id:\"ten-thousand-items\",children:\"Ten Thousand Items\"}),`\n`,(0,e.jsx)(a.p,{children:\"Here's an example of using virtualization with 10,000 items.\"}),`\n`,(0,e.jsx)(t,{title:\"Ten Thousand Items\",files:l.virtualizationTenThousand}),`\n`,(0,e.jsx)(a.h4,{id:\"max-table-height\",children:\"Max Table Height\"}),`\n`,(0,e.jsxs)(a.p,{children:[\"The \",(0,e.jsx)(a.code,{children:\"maxTableHeight\"}),\" prop is used to set the maximum height of the table. This is required when using virtualization. By default, it's set to \",(0,e.jsx)(a.code,{children:\"600\"}),\".\"]}),`\n`,(0,e.jsx)(t,{title:\"Max Table Height\",files:l.virtualizationCustomMaxTableHeight}),`\n`,(0,e.jsx)(a.h4,{id:\"custom-row-height\",children:\"Custom Row Height\"}),`\n`,(0,e.jsxs)(a.p,{children:[\"The \",(0,e.jsx)(a.code,{children:\"rowHeight\"}),\" prop is used to set the height of each row in the table. This is required when using virtualization. By default, it's set to \",(0,e.jsx)(a.code,{children:\"40\"}),\".\"]}),`\n`,(0,e.jsx)(t,{title:\"Custom Row Height\",files:l.virtualizationCustomItemHeight}),`\n`,(0,e.jsx)(a.h3,{id:\"use-case-example\",children:\"Use Case Example\"}),`\n`,(0,e.jsx)(a.p,{children:`When creating a table, you usually need core functionalities like sorting, pagination, and filtering. In the\nexample below, we combined all these functionalities to create a complete table.`}),`\n`,(0,e.jsx)(t,{asIframe:!0,typescriptStrict:!0,title:\"Table use Case Example\",resizeEnabled:!1,files:l.useCase,previewHeight:\"630px\",displayMode:\"visible\",iframeSrc:\"/examples/table/use-case\"}),`\n`,(0,e.jsx)(a.h2,{id:\"slots\",children:\"Slots\"}),`\n`,(0,e.jsxs)(a.ul,{children:[`\n`,(0,e.jsxs)(a.li,{children:[(0,e.jsx)(a.strong,{children:\"base\"}),\": Defines a flexible column layout and relative positioning for the table component.\"]}),`\n`,(0,e.jsxs)(a.li,{children:[(0,e.jsx)(a.strong,{children:\"wrapper\"}),\": Applies to the outermost wrapper, providing padding, flexible layout, relative positioning, visual styles, and scrollable overflow handling.\"]}),`\n`,(0,e.jsxs)(a.li,{children:[(0,e.jsx)(a.strong,{children:\"table\"}),\": Sets the table to have a full minimum width and auto-adjusting height.\"]}),`\n`,(0,e.jsxs)(a.li,{children:[(0,e.jsx)(a.strong,{children:\"thead\"}),\": Specifies rounded corners for the first child row in the table header.\"]}),`\n`,(0,e.jsxs)(a.li,{children:[(0,e.jsx)(a.strong,{children:\"tbody\"}),\": No specific styles are applied to the body of the table.\"]}),`\n`,(0,e.jsxs)(a.li,{children:[(0,e.jsx)(a.strong,{children:\"tr\"}),\": Styles for table rows including group focus, outline properties, and a set of undefined focus-visible classes.\"]}),`\n`,(0,e.jsxs)(a.li,{children:[(0,e.jsx)(a.strong,{children:\"th\"}),\": Styles for table headers, including padding, text alignment, font properties, and special styles for sortable columns.\"]}),`\n`,(0,e.jsxs)(a.li,{children:[(0,e.jsx)(a.strong,{children:\"td\"}),\": Applies to table cells, with properties for padding, alignment, and relative positioning, plus special styles for first child elements, selection indication, and disabled cells.\"]}),`\n`,(0,e.jsxs)(a.li,{children:[(0,e.jsx)(a.strong,{children:\"tfoot\"}),\": No specific styles are applied to the footer of the table.\"]}),`\n`,(0,e.jsxs)(a.li,{children:[(0,e.jsx)(a.strong,{children:\"sortIcon\"}),\": Styles for sorting icons, with properties for margin, opacity, and transition effects based on sorting direction and hover state.\"]}),`\n`,(0,e.jsxs)(a.li,{children:[(0,e.jsx)(a.strong,{children:\"emptyWrapper\"}),\": Defines style for an empty table, with text alignment, color, and a specified height.\"]}),`\n`,(0,e.jsxs)(a.li,{children:[(0,e.jsx)(a.strong,{children:\"loadingWrapper\"}),\": Style applied when the table is loading, positioning it centrally in its container.\"]}),`\n`]}),`\n`,(0,e.jsx)(a.h3,{id:\"custom-styles\",children:\"Custom Styles\"}),`\n`,(0,e.jsxs)(a.p,{children:[\"You can customize the \",(0,e.jsx)(a.code,{children:\"Table\"}),\" component by passing custom Tailwind CSS classes to the component slots.\"]}),`\n`,(0,e.jsx)(t,{asIframe:!0,title:\"Table custom styles example\",resizeEnabled:!1,files:l.customStyles,previewHeight:\"540px\",displayMode:\"visible\",iframeSrc:\"/examples/table/custom-styles\"}),`\n`,(0,e.jsx)(s,{y:4}),`\n`,(0,e.jsx)(a.h2,{id:\"data-attributes\",children:\"Data Attributes\"}),`\n`,(0,e.jsxs)(a.p,{children:[(0,e.jsx)(a.code,{children:\"TableBody\"}),\" has the following attributes:\"]}),`\n`,(0,e.jsxs)(a.ul,{children:[`\n`,(0,e.jsxs)(a.li,{children:[(0,e.jsx)(a.strong,{children:\"data-empty\"}),`:\nWhen the table is empty.`]}),`\n`,(0,e.jsxs)(a.li,{children:[(0,e.jsx)(a.strong,{children:\"data-loading\"}),`:\nWhen the table data is loading. Based on `,(0,e.jsx)(a.code,{children:\"TableBody\"}),\" \",(0,e.jsx)(a.code,{children:\"isLoading\"}),\" and \",(0,e.jsx)(a.code,{children:\"loadingContent\"}),\" props.\"]}),`\n`]}),`\n`,(0,e.jsxs)(a.p,{children:[(0,e.jsx)(a.code,{children:\"TableRow\"}),\" has the following attributes:\"]}),`\n`,(0,e.jsxs)(a.ul,{children:[`\n`,(0,e.jsxs)(a.li,{children:[(0,e.jsx)(a.strong,{children:\"data-selected\"}),`:\nWhen the row is selected. Based on `,(0,e.jsx)(a.code,{children:\"Table\"}),\" \",(0,e.jsx)(a.code,{children:\"selectedKeys\"}),\" prop.\"]}),`\n`,(0,e.jsxs)(a.li,{children:[(0,e.jsx)(a.strong,{children:\"data-disabled\"}),`:\nWhen the row is disabled. Based on `,(0,e.jsx)(a.code,{children:\"Table\"}),\" \",(0,e.jsx)(a.code,{children:\"disabledKeys\"}),\" prop.\"]}),`\n`,(0,e.jsxs)(a.li,{children:[(0,e.jsx)(a.strong,{children:\"data-hover\"}),`:\nWhen the row is being hovered. Based on `,(0,e.jsx)(a.a,{href:\"https://react-spectrum.adobe.com/react-aria/useHover.html\",children:\"useHover\"})]}),`\n`,(0,e.jsxs)(a.li,{children:[(0,e.jsx)(a.strong,{children:\"data-focus-visible\"}),`:\nWhen the row is being focused with the keyboard. Based on `,(0,e.jsx)(a.a,{href:\"https://react-spectrum.adobe.com/react-aria/useFocusRing.html\",children:\"useFocusRing\"}),\".\"]}),`\n`,(0,e.jsxs)(a.li,{children:[(0,e.jsx)(a.strong,{children:\"data-first\"}),`:\nWhen the row is the first row.`]}),`\n`,(0,e.jsxs)(a.li,{children:[(0,e.jsx)(a.strong,{children:\"data-middle\"}),`:\nWhen the row is in the middle.`]}),`\n`,(0,e.jsxs)(a.li,{children:[(0,e.jsx)(a.strong,{children:\"data-odd\"}),`:\nWhen the row is odd.`]}),`\n`,(0,e.jsxs)(a.li,{children:[(0,e.jsx)(a.strong,{children:\"data-last\"}),`:\nWhen the row is the last row.`]}),`\n`]}),`\n`,(0,e.jsxs)(a.p,{children:[(0,e.jsx)(a.code,{children:\"TableCell\"}),\" has the following attributes:\"]}),`\n`,(0,e.jsxs)(a.ul,{children:[`\n`,(0,e.jsxs)(a.li,{children:[(0,e.jsx)(a.strong,{children:\"data-selected\"}),`:\nWhen the cell row is selected. Based on `,(0,e.jsx)(a.code,{children:\"Table\"}),\" \",(0,e.jsx)(a.code,{children:\"selectedKeys\"}),\" prop.\"]}),`\n`,(0,e.jsxs)(a.li,{children:[(0,e.jsx)(a.strong,{children:\"data-focus-visible\"}),`:\nWhen the cell is being focused with the keyboard. Based on `,(0,e.jsx)(a.a,{href:\"https://react-spectrum.adobe.com/react-aria/useFocusRing.html\",children:\"useFocusRing\"}),\".\"]}),`\n`]}),`\n`,(0,e.jsx)(s,{y:4}),`\n`,(0,e.jsx)(a.h2,{id:\"accessibility\",children:\"Accessibility\"}),`\n`,(0,e.jsxs)(a.ul,{children:[`\n`,(0,e.jsx)(a.li,{children:\"Exposed to assistive technology as a grid using ARIA.\"}),`\n`,(0,e.jsx)(a.li,{children:\"Keyboard navigation between columns, rows, cells, and in-cell focusable elements via the arrow keys.\"}),`\n`,(0,e.jsx)(a.li,{children:\"Single, multiple, or no row selection via mouse, touch, or keyboard interactions.\"}),`\n`,(0,e.jsx)(a.li,{children:\"Support for disabled rows, which cannot be selected.\"}),`\n`,(0,e.jsx)(a.li,{children:\"Column sorting support.\"}),`\n`,(0,e.jsx)(a.li,{children:\"Async loading, infinite scrolling, filtering, and sorting support.\"}),`\n`,(0,e.jsx)(a.li,{children:\"Support for both toggle and replace selection behaviors.\"}),`\n`,(0,e.jsx)(a.li,{children:\"Labeling support for accessibility.\"}),`\n`,(0,e.jsx)(a.li,{children:\"Ensures that selections are announced using an ARIA live region.\"}),`\n`,(0,e.jsx)(a.li,{children:\"Support for marking columns as row headers, which will be read when navigating the rows with a screen reader.\"}),`\n`,(0,e.jsx)(a.li,{children:\"Optional support for checkboxes in each row for selection, as well as in the header to select all rows.\"}),`\n`,(0,e.jsx)(a.li,{children:\"Automatic scrolling support during keyboard navigation.\"}),`\n`,(0,e.jsx)(a.li,{children:\"Support for row actions via double click, Enter key, or tapping.\"}),`\n`,(0,e.jsx)(a.li,{children:\"Typeahead to allow focusing rows by typing text.\"}),`\n`,(0,e.jsx)(a.li,{children:\"Long press to enter selection mode on touch when there is both selection and row actions.\"}),`\n`]}),`\n`,(0,e.jsx)(s,{y:4}),`\n`,(0,e.jsx)(a.h2,{id:\"api\",children:\"API\"}),`\n`,(0,e.jsx)(a.h3,{id:\"table-props\",children:\"Table Props\"}),`\n`,(0,e.jsx)(r,{data:[{attribute:\"children*\",type:\"ReactNode[]\",description:\"The elements that make up the table. Includes the TableHeader, TableBody, TableColumn, and TableRow.\",default:\"-\"},{attribute:\"color\",type:\"default | primary | secondary | success | warning | danger\",description:\"Color of the selected rows, and checkboxes.\",default:\"default\"},{attribute:\"layout\",type:\"auto | fixed\",description:\"Defines the layout of the table.\",default:\"auto\"},{attribute:\"radius\",type:\"none | sm | md | lg\",description:\"The border-radius of the table.\",default:\"lg\"},{attribute:\"shadow\",type:\"none | sm | md | lg\",description:\"The shadow size of the table.\",default:\"sm\"},{attribute:\"maxTableHeight\",type:\"number\",description:\"The maximum height of the table in pixels. Required when using virtualization.\",default:600},{attribute:\"rowHeight\",type:\"number\",description:\"The fixed height of each row item in pixels. Required when using virtualization.\",default:40},{attribute:\"isVirtualized\",type:\"boolean\",description:\"Whether to enable virtualization. By default, it's enabled when the number of items exceeds 50.\",default:\"undefined\"},{attribute:\"hideHeader\",type:\"boolean\",description:\"Whether to hide the table header.\",default:\"false\"},{attribute:\"isStriped\",type:\"boolean\",description:\"Whether to apply striped rows in the table.\",default:\"false\"},{attribute:\"isCompact\",type:\"boolean\",description:\"Whether to apply compact style to the table.\",default:\"false\"},{attribute:\"isHeaderSticky\",type:\"boolean\",description:\"Whether to make the table header sticky.\",default:\"false\"},{attribute:\"fullWidth\",type:\"boolean\",description:\"Whether to make the table full width.\",default:\"true\"},{attribute:\"removeWrapper\",type:\"boolean\",description:\"Whether the table base container should not be rendered.\",default:\"false\"},{attribute:\"BaseComponent\",type:\"React.ComponentType<any>\",description:\"A custom wrapper component for the table.\",default:\"div\"},{attribute:\"topContent\",type:\"ReactNode\",description:\"Provides content to include a component in the top of the table.\",default:\"-\"},{attribute:\"bottomContent\",type:\"ReactNode\",description:\"Provides content to include a component in the bottom of the table.\",default:\"-\"},{attribute:\"topContentPlacement\",type:\"inside | outside\",description:\"Where to place the topContent component.\",default:\"inside\"},{attribute:\"bottomContentPlacement\",type:\"inside | outside\",description:\"Where to place the bottomContent component.\",default:\"inside\"},{attribute:\"showSelectionCheckboxes\",type:\"boolean\",description:\"Whether the row selection checkboxes should be displayed.\",default:\"-\"},{attribute:\"sortDescriptor\",type:\"SortDescriptor\",description:\"The current sorted column and direction.\",default:\"-\"},{attribute:\"selectedKeys\",type:\"Selection\",description:\"The currently selected keys in the collection (controlled).\",default:\"-\"},{attribute:\"defaultSelectedKeys\",type:\"Selection\",description:\"The initial selected keys in the collection (uncontrolled).\",default:\"-\"},{attribute:\"disabledKeys\",type:\"Selection\",description:\"A set of keys for rows that are disabled.\",default:\"-\"},{attribute:\"disallowEmptySelection\",type:\"boolean\",description:\"Whether the collection allows empty selection.\",default:\"-\"},{attribute:\"selectionMode\",type:\"single | multiple | none\",description:\"The type of selection that is allowed in the collection.\",default:\"none\"},{attribute:\"selectionBehavior\",type:\"toggle | replace\",description:\"How multiple selection should behave in the collection.\",default:\"toggle\"},{attribute:\"disabledBehavior\",type:\"selection | all\",description:\"Whether disabledKeys applies to all interactions, or only selection.\",default:\"selection\"},{attribute:\"allowDuplicateSelectionEvents\",type:\"boolean\",description:\"Whether onSelectionChange should fire even if the new set of keys is the same as the last.\",default:\"-\"},{attribute:\"disableAnimation\",type:\"boolean\",description:\"Whether to disable the table and checkbox animations.\",default:\"false\"},{attribute:\"checkboxesProps\",type:\"CheckboxProps\",description:\"Props to be passed to the checkboxes.\",default:\"-\"},{attribute:\"classNames\",type:\"Partial<Record<'base' | 'table' | 'thead' | 'tbody' | 'tfoot' | 'emptyWrapper' | 'loadingWrapper' | 'wrapper' | 'tr' | 'th' | 'td' | 'sortIcon', string>>\",description:\"Allows to set custom class names for the dropdown item slots.\",default:\"-\"},{attribute:\"isKeyboardNavigationDisabled\",type:\"boolean\",description:\"Whether to disable keyboard navigations or not.\",default:\"false\"}]}),`\n`,(0,e.jsx)(a.h3,{id:\"table-events\",children:\"Table Events\"}),`\n`,(0,e.jsx)(r,{data:[{attribute:\"onRowAction\",type:\"(key: React.Key) => void\",description:\"Handler that is called when a user performs an action on the row.\",default:\"-\"},{attribute:\"onCellAction\",type:\"(key: React.Key) => void\",description:\"Handler that is called when a user performs an action on the cell.\",default:\"-\"},{attribute:\"onSelectionChange\",type:\"(keys: Selection) => any\",description:\"Handler that is called when the selection changes.\",default:\"-\"},{attribute:\"onSortChange\",type:\"(descriptor: SortDescriptor) => any\",description:\"Handler that is called when the sorted column or direction changes.\",default:\"-\"}]}),`\n`,(0,e.jsx)(a.h3,{id:\"tableheader-props\",children:\"TableHeader Props\"}),`\n`,(0,e.jsx)(r,{data:[{attribute:\"children*\",type:\"ReactNode[]\",description:\"A list of Column(s) or a function. If the latter, a list of columns must be provided using the columns prop\",default:\"-\"},{attribute:\"columns\",type:\"T[]\",description:\"A list of table columns.\",default:\"-\"}]}),`\n`,(0,e.jsx)(a.h3,{id:\"tablecolumn-props\",children:\"TableColumn Props\"}),`\n`,(0,e.jsx)(r,{data:[{attribute:\"children*\",type:\"ReactNode\",description:\"Static child columns or content to render as the column header\",default:\"-\"},{attribute:\"align\",type:\"start | center | end\",description:\"The alignment of the column's contents relative to its allotted width\",default:\"start\"},{attribute:\"hideHeader\",type:\"boolean\",description:\"Whether the column should hide its header text\",default:\"false\"},{attribute:\"allowsSorting\",type:\"boolean\",description:\"Whether the column allows sorting\",default:\"-\"},{attribute:\"isRowHeader\",type:\"boolean\",description:\"Whether a column is a row header and should be announced by assistive technology during row navigation\",default:\"-\"},{attribute:\"textValue\",type:\"string\",description:\"A string representation of the column's contents, used for accessibility announcements\",default:\"-\"},{attribute:\"width\",type:\"string | number\",description:\"The width of the column\",default:\"-\"},{attribute:\"minWidth\",type:\"string | number\",description:\"The minimum width of the column\",default:\"-\"},{attribute:\"maxWidth\",type:\"string | number\",description:\"The maximum width of the column\",default:\"-\"}]}),`\n`,(0,e.jsx)(a.h3,{id:\"tablebody-props\",children:\"TableBody Props\"}),`\n`,(0,e.jsx)(r,{data:[{attribute:\"children*\",type:\"RowElement | RowElement[] | ((item: T) => RowElement)\",description:\"The contents of the table body. Supports static items or a function for dynamic rendering\",default:\"-\"},{attribute:\"items\",type:\"Iterable<T>\",description:\"A list of row objects in the table body used when dynamically rendering rows\",default:\"-\"},{attribute:\"isLoading\",type:\"boolean\",description:\"Whether the table body is loading.\",default:\"-\"},{attribute:\"loadingState\",type:\"LoadingState\",description:\"Handler that is called when more items should be loaded, e.g. while scrolling near the bottom\",default:\"-\"},{attribute:\"loadingContent\",type:\"ReactNode\",description:\"Content to display while loading more items\",default:\"-\"},{attribute:\"emptyContent\",type:\"ReactNode\",description:\"Content to display when there are no items in the table body\",default:\"-\"}]}),`\n`,(0,e.jsx)(a.h3,{id:\"tablebody-events\",children:\"TableBody Events\"}),`\n`,(0,e.jsx)(r,{data:[{attribute:\"onLoadMore\",type:\"() => any\",description:\"A list of row objects in the table body used when dynamically rendering rows\",default:\"-\"}]}),`\n`,(0,e.jsx)(a.h3,{id:\"tablerow-props\",children:\"TableRow Props\"}),`\n`,(0,e.jsx)(r,{data:[{attribute:\"children*\",type:\"CellElement | CellElement[] | CellRenderer\",description:\"Rendered contents of the row or row child items\",default:\"-\"},{attribute:\"textValue\",type:\"string\",description:\"A string representation of the row's contents, used for features like typeahead\",default:\"-\"}]}),`\n`,(0,e.jsx)(a.h3,{id:\"tablecell-props\",children:\"TableCell Props\"}),`\n`,(0,e.jsx)(r,{data:[{attribute:\"children*\",type:\"ReactNode\",description:\"The contents of the cell\",default:\"-\"},{attribute:\"textValue\",type:\"string\",description:\"A string representation of the row's contents, used for features like typeahead\",default:\"-\"}]}),`\n`,(0,e.jsx)(a.hr,{}),`\n`,(0,e.jsx)(s,{y:2}),`\n`,(0,e.jsx)(a.h3,{id:\"table-types\",children:\"Table types\"}),`\n`,(0,e.jsx)(a.h4,{id:\"sort-descriptor\",children:\"Sort descriptor\"}),`\n`,(0,e.jsx)(a.pre,{children:(0,e.jsx)(a.code,{className:\"language-ts\",children:`type SortDescriptor = {\n  column: React.Key;\n  direction: \"ascending\" | \"descending\";\n};\n`})}),`\n`,(0,e.jsx)(a.h4,{id:\"selection\",children:\"Selection\"}),`\n`,(0,e.jsx)(a.pre,{children:(0,e.jsx)(a.code,{className:\"language-ts\",children:`type Selection = \"all\" | Set<React.Key>;\n`})}),`\n`,(0,e.jsx)(a.h4,{id:\"loading-state\",children:\"Loading state\"}),`\n`,(0,e.jsx)(a.pre,{children:(0,e.jsx)(a.code,{className:\"language-ts\",children:`type LoadingState = \"loading\" | \"sorting\" | \"loadingMore\" | \"error\" | \"idle\" | \"filtering\";\n`})})]})}function Ce(o={}){let{wrapper:a}=o.components||{};return a?(0,e.jsx)(a,{...o,children:(0,e.jsx)(ye,{...o})}):ye(o)}function n(o,a){throw new Error(\"Expected \"+(a?\"component\":\"object\")+\" `\"+o+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return De(Va);})();\n;return Component;"
  },
  "_id": "docs/components/table.mdx",
  "_raw": {
    "sourceFilePath": "docs/components/table.mdx",
    "sourceFileName": "table.mdx",
    "sourceFileDir": "docs/components",
    "contentType": "mdx",
    "flattenedPath": "docs/components/table"
  },
  "type": "Doc",
  "slug": "/docs/components/table",
  "slugAsParams": "components/table",
  "url": "/docs/components/table"
}